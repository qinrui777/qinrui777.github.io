<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anka tutorial 01</title>
    <url>/2019/11/18/Anka-tutorial-01/</url>
    <content><![CDATA[<h3 id="1-Anka-是什么"><a href="#1-Anka-是什么" class="headerlink" title="1.Anka 是什么"></a>1.Anka 是什么</h3><p>  前端，后端，包括安卓的持续集成的过程都可以轻松的基于docker命令构建、打包，最终产出 docker image镜像，非常方便搭建标准化的pipeline(流水线)；但是对于iOS移动端的同学而言，似乎没有那么简单。每次打包的过程都是耗时、复杂的。另外一点由于macOS系统是捆绑在mac硬件上的，你没有苹果电脑就无法打包，相比而言docker则是纯免费开源的。针对以上问题和情况，anka就是这样一种类似于dock的针对macOS系统的虚拟化技术。</p>
<p>  于是乎，想长期使用是需要收钱的。</p>
<blockquote>
<p>官网介绍 <a href="https://ankadoc.bitbucket.io/#what-is-anka-build" target="_blank" rel="noopener">https://ankadoc.bitbucket.io/#what-is-anka-build</a></p>
</blockquote>
<blockquote>
<p>费用介绍 <a href="https://ankadoc.bitbucket.io/licensing/" target="_blank" rel="noopener">https://ankadoc.bitbucket.io/licensing/</a></p>
</blockquote>
<p>几个组件的关系<br><a href="https://veertu.com/anka-technology/" target="_blank" rel="noopener">https://veertu.com/anka-technology/</a></p>
<p>Anka Hypervisor<br>Anka Controller<br>Anka Registry</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>搭建的环境： MacBook Pro(version: 10.13.6)</p>
<p>下载地址：<a href="https://veertu.com/download-anka-build/" target="_blank" rel="noopener">https://veertu.com/download-anka-build/</a><br><img src="/images/anka_download.png" alt="anka download page"></p>
<h5 id="2-1-Anka-Package-Install-and-Configuration"><a href="#2-1-Anka-Package-Install-and-Configuration" class="headerlink" title="2.1 Anka Package Install and Configuration"></a>2.1 Anka Package Install and Configuration</h5><p><a href="https://ankadoc.bitbucket.io/anka-build/#anka-package-install-and-configuration" target="_blank" rel="noopener">https://ankadoc.bitbucket.io/anka-build/#anka-package-install-and-configuration</a></p>
<p>双击 <em>pkg</em> 包，默认选项安装，最终显示安装成功即可。<br><img src="/images/anka_install_continue_01.png" width="50%" height="50%"></p>
<p><img src="/images/anka_install_continue_02.png" width="50%" height="50%"></p>
<p><img src="/images/anka_install_success_01.png" width="50%" height="50%"></p>
<p>安装完成后可以用过命令 <code>anka config --list</code> 查看所有的配置，比如 vm 的存储路径等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  anka config --list</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| registry_remotes_file_path  | /Users/xxx/.anka/remote                                                   |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| mac_random_bytes            | 2                                                                           |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| disk_eraser_tool            | /Library/Application Support/Veertu/Anka/tools/erase_disk_image.sh          |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| process_type                | Interactive                                                                 |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| default_passwd              | admin                                                                       |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| nvram_path                  | /Library/Application Support/Veertu/Anka/uefi/anka_vars.fd                  |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| vm_lib_dir                  | /Users/xxxx/Library/Application Support/Veertu/Anka/vm_lib/                |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">| anka_image_maker_executable | /Library/Application Support/Veertu/Anka/bin/anka_image                     |</span><br><span class="line">+-----------------------------+-----------------------------------------------------------------------------+</span><br><span class="line">省略100行</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h5 id="2-2-Controller-Registry-Install-and-Configuration"><a href="#2-2-Controller-Registry-Install-and-Configuration" class="headerlink" title="2.2 Controller/Registry Install and Configuration"></a>2.2 Controller/Registry Install and Configuration</h5><p><a href="https://ankadoc.bitbucket.io/anka-build/#controller-registry-install-and-configuration" target="_blank" rel="noopener">https://ankadoc.bitbucket.io/anka-build/#controller-registry-install-and-configuration</a></p>
<p>同上，双击 <strong><em>.pkg</em></strong> 包，默认安装，看到提示安装成功即可。</p>
<p><img src="/images/anka_install_success_02.png" width="50%" height="50%"></p>
<ul>
<li><p><a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a> Anka controller UI界面</p>
</li>
<li><p><a href="http://localhost:8089" target="_blank" rel="noopener">http://localhost:8089</a>  罗列现有的API，其余啥也不能做</p>
</li>
</ul>
<p>设置一下 Registry Address 地址:<br><img src="/images/anka_controller_config.png" width="70%" height="70%"></p>
<h5 id="2-3-申请试用许可（trail-license）"><a href="#2-3-申请试用许可（trail-license）" class="headerlink" title="2.3 申请试用许可（trail license）"></a>2.3 申请试用许可（trail license）</h5><p><a href="https://veertu.com/anka-build-trial" target="_blank" rel="noopener">https://veertu.com/anka-build-trial</a></p>
<p>完善信息提交后，会有一个成功的提示，如图所示:<br><img src="/images/anka_apply_license.png" width="70%" height="70%"></p>
<p>激活key<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo anka license activate xxxx-3750-xxxx-2265</span><br><span class="line">License activated</span><br></pre></td></tr></table></figure></p>
<p>查看license信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ anka license show</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| license_type        | com.veertu.anka.ent |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| status              | valid               |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| expires             | 20-dec-2019         |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| max_number_of_cores | 32                  |</span><br><span class="line">+---------------------+---------------------+</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
  </entry>
  <entry>
    <title>Anka tutorial 02</title>
    <url>/2019/11/19/Anka-tutorial-02/</url>
    <content><![CDATA[<h5 id="1-Joining-Nodes"><a href="#1-Joining-Nodes" class="headerlink" title="1.Joining Nodes"></a>1.Joining Nodes</h5><p>在mac上（anka build 节点）执行  <code>sudo ankacluster join http://localhost:80/</code></p>
<p>output:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo ankacluster join http://localhost:80/ -n demo-mac</span><br><span class="line">Setting tls config</span><br><span class="line">Testing connection to controller...: Ok</span><br><span class="line">Testing connection to the registry...: Ok</span><br><span class="line">Ok</span><br><span class="line">Cluster join success</span><br></pre></td></tr></table></figure></p>
<p>去页面 <em><a href="http://localhost/#/nodes" target="_blank" rel="noopener">http://localhost/#/nodes</a></em> 查看<br><img src="/images/anka_controller_node.png"></p>
<h5 id="2-Create-VM-link"><a href="#2-Create-VM-link" class="headerlink" title="2. Create VM (link)"></a>2. Create VM <a href="https://ankadoc.bitbucket.io/anka-build/#create-vm" target="_blank" rel="noopener">(link)</a></h5><p>先下载mac OS安装包 (安装包7G多，需要提前下载)<br><a href="https://www.macworld.co.uk/how-to/mac-software/download-old-os-x-3629363/#el%20cap" target="_blank" rel="noopener">https://www.macworld.co.uk/how-to/mac-software/download-old-os-x-3629363/#el%20cap</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ anka create --ram-size 4G --cpu-count 2 --disk-size 40G --app /Applications/Install\ macOS\ Catalina.app CatalinaVm</span><br><span class="line">Installing macOS 10.15.1...</span><br><span class="line">Preparing target disk...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note For Catalina Anka VMs, –ram-size value should be 4G and –disk-size should be 80G.<br>由于电脑空间不够了，于是报错了</p>
</blockquote>
<p>清理电脑空间后，再来一次，大约 30min<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ anka create --ram-size 4G --cpu-count 2 --disk-size 80G --app /Applications/Install\ macOS\ Catalina.app  CatalinaVm</span><br><span class="line">Installing macOS 10.15.1...</span><br><span class="line">Preparing target disk...</span><br><span class="line">Installing addons...</span><br><span class="line">Converting to ANKA format...</span><br><span class="line">Waiting <span class="keyword">for</span> installation to complete <span class="keyword">in</span> the guest (about thirty minutes approx.)...</span><br><span class="line">vm created successfully with uuid: a23d5a05-xx89-4xx4-a8b7-6f7b9xxxxxx</span><br></pre></td></tr></table></figure></p>
<h5 id="3-Run-VM"><a href="#3-Run-VM" class="headerlink" title="3. Run VM"></a>3. Run VM</h5><p><img src="/images/anka_demo_720.gif" width="90%" height="90%"></p>
<p>VM 状态之间的转换如下：<br><img src="/images/anka_vm_status.png" width="75%" height="75%"></p>
<blockquote>
<p>需要区别 VM 和后面提到的 instance 关系，VM 更准确点讲是 VM Template，是创建instance的模版，但模版需要通过上面的方法才可以修改；新建VM后，相当于有一个基础的模版，但是要满足其他要求，可以自行在running的 vm 中操作，然后随时保存，类似于docker container的commit操作，但anka build是suspend一个running的 vm 来保存。</p>
</blockquote>
<h5 id="4-Manage-VM-Templates-in-Registry-link"><a href="#4-Manage-VM-Templates-in-Registry-link" class="headerlink" title="4. Manage VM Templates in Registry(link)"></a>4. Manage VM Templates in Registry<a href="https://ankadoc.bitbucket.io/anka-build/#manage-vm-templates-in-registry" target="_blank" rel="noopener">(link)</a></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#罗列仓库</span></span><br><span class="line">➜   anka registry list-repos</span><br><span class="line">++</span><br><span class="line">++</span><br><span class="line"><span class="comment">#添加一个新仓库</span></span><br><span class="line">➜   anka registry add demo-repo http://localhost:8089</span><br><span class="line">➜   anka registry list-repos</span><br><span class="line">++</span><br><span class="line">++</span><br><span class="line">demo-repo (default)</span><br><span class="line">+--------+-----------+</span><br><span class="line">| host   | localhost |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| scheme | http      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| port   | 8089      |</span><br><span class="line">+--------+-----------+</span><br><span class="line"><span class="comment">#推送VM Templates 到新仓库，</span></span><br><span class="line">➜   anka registry push CatalinaVm -d <span class="string">"first push"</span> -t v1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
  </entry>
  <entry>
    <title>Anka tutorial 03: jenkins</title>
    <url>/2019/11/28/Anka-tutorial-03-jenkins/</url>
    <content><![CDATA[<h3 id="anka-集成-Jenkins-link"><a href="#anka-集成-Jenkins-link" class="headerlink" title="anka 集成 Jenkins (link)"></a>anka 集成 Jenkins <a href="https://ankadoc.bitbucket.io/anka-build/#integrate-jenkins-with-controller" target="_blank" rel="noopener">(link)</a></h3><p>未完待续…</p>
<p>安装插件<br><code>Manage Jenkins &gt; Manage Plugins</code></p>
<p>搜索anka</p>
<p>新建 ssh 用的登陆凭证</p>
<p>新建VM的时候 默认用户名和密码分别是 <code>anka/admin</code></p>
<p>配置jenkins<br><code>Manage Jenkins &gt; Configure System</code></p>
<p><img src="/images/anka_jenkins_01.png" width="80%" height="80%"></p>
<p><a href="http://localhost/#/dashboard" target="_blank" rel="noopener">http://localhost/#/dashboard</a></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
  </entry>
  <entry>
    <title>Azure FAQs</title>
    <url>/2019/12/11/Azure-FAQs/</url>
    <content><![CDATA[<h3 id="1-asm-arm"><a href="#1-asm-arm" class="headerlink" title="1. asm, arm"></a>1. asm, arm</h3><ul>
<li>asm: Azure Service Manager</li>
<li>arm: Azure Resource Manager</li>
</ul>
<p>最开始一直都是classic模型，它的模型中有service的概念，所以它也叫 asm（Azure Service Manager）。2014年开始提出arm（Azure Resource Manager），其管理平台叫portal。2015年底arm发布。</p>
<p>当前情况是微软正在将azure的所有功能往arm上迁移。以后都推荐使用arm。但 是当前状况是arm不完全向后兼容asm，有些功能只有asm上才有，所以还有很多 用户还是在使用classic。</p>
<blockquote>
<p>ref: <a href="https://pengpengxp.github.io/archive/before-2018-11-10/2017-06-28-Azure%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB.html#orgbb66971" target="_blank" rel="noopener">https://pengpengxp.github.io/archive/before-2018-11-10/2017-06-28-Azure%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB.html#orgbb66971</a></p>
</blockquote>
<h3 id="2-AWS-to-Azure-services-comparison"><a href="#2-AWS-to-Azure-services-comparison" class="headerlink" title="2. AWS to Azure services comparison"></a>2. AWS to Azure services comparison</h3><p>详见链接 <a href="https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services</a></p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>Anka tutorial xx: Upgrade Record</title>
    <url>/2019/11/21/Anka-tutorial-xx-Upgrade-Record/</url>
    <content><![CDATA[<h3 id="1-升级前"><a href="#1-升级前" class="headerlink" title="1.升级前"></a>1.升级前</h3><p>从2018年11月到如今2019年11月，已经使用现有的版本1年多；anka也经历了多个版本，此次升级算是跨度较大，升级到目前最新的版本1.5.0</p>
<h4 id="1-1-节点信息"><a href="#1-1-节点信息" class="headerlink" title="1.1 节点信息"></a>1.1 节点信息</h4><table>
<thead>
<tr>
<th style="text-align:left">hostname (节点名称)</th>
<th style="text-align:left">IP</th>
<th style="text-align:left">OS</th>
<th>组件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">node1</td>
<td style="text-align:left">192.168.55.xx</td>
<td style="text-align:left">linux</td>
<td>anka-controller、anka-registry、etcd、beanstalk、 jenkins、sonarqube</td>
</tr>
<tr>
<td style="text-align:left">node2</td>
<td style="text-align:left">192.168.22.xx</td>
<td style="text-align:left">mac OS</td>
<td>anka build</td>
</tr>
</tbody>
</table>
<h4 id="1-2-节点组件版本信息"><a href="#1-2-节点组件版本信息" class="headerlink" title="1.2 节点组件版本信息"></a>1.2 节点组件版本信息</h4><table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Current Ver</th>
<th style="text-align:left">Upgrade to Ver</th>
<th style="text-align:left">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">anka-controller</td>
<td style="text-align:left">1.0.14-e7cc50b</td>
<td style="text-align:left">1.5.0-ca87f665</td>
<td style="text-align:left">自制image</td>
</tr>
<tr>
<td style="text-align:left">etcd</td>
<td style="text-align:left">quay.io/coreos/etcd:v3.1.6</td>
<td style="text-align:left">N/A</td>
<td style="text-align:left"><a href="https://quay.io/repository/coreos/etcd?tab=tags" target="_blank" rel="noopener">https://quay.io/repository/coreos/etcd?tab=tags</a>, 新版本需要 自制image</td>
</tr>
<tr>
<td style="text-align:left">beanstalk</td>
<td style="text-align:left">schickling/beanstalkd</td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">新版本可不使用</td>
</tr>
<tr>
<td style="text-align:left">anka-registry</td>
<td style="text-align:left">same as controller</td>
<td style="text-align:left">1.5.0-ca87f665</td>
<td style="text-align:left">自制image</td>
</tr>
<tr>
<td style="text-align:left">Anka Build</td>
<td style="text-align:left">1.4.3</td>
<td style="text-align:left">2.1.2</td>
<td style="text-align:left">N/A</td>
</tr>
</tbody>
</table>
<h4 id="1-2-组件端口变更信息"><a href="#1-2-组件端口变更信息" class="headerlink" title="1.2 组件端口变更信息"></a>1.2 组件端口变更信息</h4><table>
<thead>
<tr>
<th style="text-align:left">组件</th>
<th style="text-align:center">升级前端口</th>
<th style="text-align:center">升级后端口</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">anka-controller</td>
<td style="text-align:center">8090</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:left">anka-registry</td>
<td style="text-align:center">80</td>
<td style="text-align:center">8089</td>
</tr>
</tbody>
</table>
<p>根据节点的OS，提前下载安装包及相关文件 <a href="https://veertu.com/download-anka-build/" target="_blank" rel="noopener">Anka Build Download page</a></p>
<p><img src="/images/anka_upgrade_install_01.png" width="75%" height="75%"></p>
<h3 id="2-升级步骤"><a href="#2-升级步骤" class="headerlink" title="2. 升级步骤"></a>2. 升级步骤</h3><p>官网升级步骤链接： <a href="https://ankadoc.bitbucket.io/#upgrade-steps" target="_blank" rel="noopener">https://ankadoc.bitbucket.io/#upgrade-steps</a>, 但是不够详细</p>
<h4 id="2-1-On-the-mac-nodes-run-sudo-ankacluster-disjoin"><a href="#2-1-On-the-mac-nodes-run-sudo-ankacluster-disjoin" class="headerlink" title="2.1) On the mac nodes - run sudo ankacluster disjoin."></a>2.1) On the mac nodes - run sudo ankacluster disjoin.</h4><p>在 <strong>node 2</strong> 上操作<br><code>node2 $ sudo ankacluster disjoin -g</code></p>
<h4 id="2-2-Install-the-new-anka-pkg-on-all-the-mac-nodes"><a href="#2-2-Install-the-new-anka-pkg-on-all-the-mac-nodes" class="headerlink" title="2.2) Install the new anka pkg on all the mac nodes."></a>2.2) Install the new anka pkg on all the mac nodes.</h4><p>在 <strong>node 2</strong> 上操作, 找到安装包,双击安装即可</p>
<h4 id="2-3-Upgrade-the-guest-addons-inside-the-VM-templates-with-anka-start-u-Check-the-upgrade-notes-to-see-if-this-step-is-necessary"><a href="#2-3-Upgrade-the-guest-addons-inside-the-VM-templates-with-anka-start-u-Check-the-upgrade-notes-to-see-if-this-step-is-necessary" class="headerlink" title="2.3) Upgrade the guest addons inside the VM templates with anka start -u. Check the upgrade notes to see if this step is necessary."></a>2.3) Upgrade the guest addons inside the VM templates with anka start -u. Check the upgrade notes to see if this step is necessary.</h4><p>在 <strong>node 2</strong> 上操作<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先切换到root用户，方便操作</span></span><br><span class="line"><span class="comment">#这个命令执行后会等待3min左右</span></span><br><span class="line">node2:~ root<span class="comment"># anka stop -f &lt;VM_NAME&gt;</span></span><br><span class="line">node2:~ root<span class="comment"># anka start -u &lt;VM_NAME&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2-4-Push-the-newly-upgraded-VM-templates-to-registry-with-anka-registry-push-vmname-–tag"><a href="#2-4-Push-the-newly-upgraded-VM-templates-to-registry-with-anka-registry-push-vmname-–tag" class="headerlink" title="2.4) Push the newly upgraded VM templates to registry with anka registry push vmname –tag."></a>2.4) Push the newly upgraded VM templates to registry with anka registry push vmname –tag.</h4><p>在 <strong>node 2</strong> 上操作<br><code>node2:~ root# anka registry push &lt;VM_NAME&gt; -d &#39;&lt;Message&gt;&#39; -t v100</code></p>
<h4 id="2-5-Go-to-the-Controller-Registry-and-upgrade"><a href="#2-5-Go-to-the-Controller-Registry-and-upgrade" class="headerlink" title="2.5) Go to the Controller/Registry and upgrade."></a>2.5) Go to the Controller/Registry and upgrade.</h4><p>在 <strong>node 1</strong> 上操作 ，之前的启动方式是docker-compose,根据yaml文件启动</p>
<p>anka 经过一年的开发升级，这块变动较大，比如：</p>
<ul>
<li><ol>
<li>beanstalk 可以不使用了 <em>(starting from anka version 2.0 beanstalk is not required, please configure the controller with the configuration that doesn’t use beanstalk)</em></li>
</ol>
</li>
<li><ol start="2">
<li>端口的变化</li>
</ol>
</li>
<li><ol start="3">
<li>etcd由之前的 quay.io/coreos/etcd 镜像改为自己制作</li>
</ol>
</li>
</ul>
<p>提前备份 docker-compose.yml;先将下载包解压，结合老版本的docker-compose.yml文件，替换 <code>services/</code> 目录下的相关文件<br><img src="/images/anka_1.5.x_package.png" width="60%" height="60%"></p>
<p><strong>注意事项</strong>: </p>
<pre><code>- etcd、registry 挂载的文件目录不可变动，不然影响旧的数据正常读取
- 替换docker-compose.yml的一些值
</code></pre><h4 id="2-6-On-the-mac-nodes-run-sudo-ankacluster-join"><a href="#2-6-On-the-mac-nodes-run-sudo-ankacluster-join" class="headerlink" title="2.6) On the mac nodes - run sudo ankacluster join."></a>2.6) On the mac nodes - run sudo ankacluster join.</h4><p>在 <strong>node 2</strong> 上操作<br><code>ankacluster join -g -n mac-mini-01 http://controller.anka.intranet.in2e.com:80</code></p>
<blockquote>
<p>以上是官网提及的，但是与jenkins 集成中还需要更多的操作，以下作为补充</p>
</blockquote>
<h4 id="2-7-Change-jenkins-configuration"><a href="#2-7-Change-jenkins-configuration" class="headerlink" title="2.7) Change jenkins configuration."></a>2.7) Change jenkins configuration.</h4><ul>
<li><p>2.7.1 修改controller地址<br><img src="/images/anka_jenkins_config_1.png" width="100%" height="100%"></p>
</li>
<li><p>2.7.2 修改 anka  VM templates<br>升级后，测试发现 jenkins 日志中找不到vm templates;需要重新配置 VM templates<br><img src="/images/anka_jenkins_vm_template.png" width="100%" height="100%"></p>
</li>
</ul>
<h5 id="2-8-Change-registry"><a href="#2-8-Change-registry" class="headerlink" title="2.8) Change registry"></a>2.8) Change registry</h5><blockquote>
<p>升级后一天，再更新一个VM template时遇到问题  </p>
</blockquote>
<p><strong>发现问题：</strong><br>报错如下, 根据提示修改了多次命令的格式，但还是没有作用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anka registry push &lt;VM_NAME&gt; -d <span class="string">'update new cert'</span> -t v28</span><br><span class="line">-anka: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)</span><br></pre></td></tr></table></figure></p>
<p><strong>思考问题：</strong><br>在root用户下 使用 <code>anka registry list</code> 时发现也报错，于是怀疑是 registry 的问题；由于端口的变更，导致 anka push VM 会有问题；需要删除，重新添加</p>
<p><strong>尝试解决问题：</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先查看repo</span></span><br><span class="line">node2:~ root<span class="comment"># anka registry list-repos</span></span><br><span class="line">++</span><br><span class="line">++</span><br><span class="line">anka (default)</span><br><span class="line">+--------+-----------------------------------+</span><br><span class="line">| host   | controller.anka.intranet.xxx.com |</span><br><span class="line">+--------+-----------------------------------+</span><br><span class="line">| scheme | http                              |</span><br><span class="line">+--------+-----------------------------------+</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">node2:~ root<span class="comment"># anka registry delete anka</span></span><br><span class="line"><span class="comment">#新增</span></span><br><span class="line">node2:~ root<span class="comment"># anka registry add anka-repo http://192.168.55.xx:8089</span></span><br><span class="line"><span class="comment">#再次list,查看以下</span></span><br><span class="line">node2:~ root<span class="comment"># anka registry list-repos</span></span><br><span class="line">++</span><br><span class="line">++</span><br><span class="line">anka-repo (default)</span><br><span class="line">+--------+---------------+</span><br><span class="line">| host   | 192.168.55.xx |</span><br><span class="line">+--------+---------------+</span><br><span class="line">| scheme | http          |</span><br><span class="line">+--------+---------------+</span><br><span class="line">| port   | 8089          |</span><br><span class="line">+--------+---------------+</span><br></pre></td></tr></table></figure></p>
<p>一波操作后，终于可以正常 push VM, ～～～大坑</p>
<hr>
<p><strong>最后 —-&gt;记得修改Node上的 VM capacity</strong><br>每次disjoin -&gt; join 动作，这个值都会回到默认值 2;或者执行 <code>ankacluster join</code> 的时候可以用 <code>-m</code> 参数去指定<br>这个值的作用是，指定允许同时运行几个 mac OS 实例</p>
<p><img src="/images/anka_vm_capacity.png" width="90%" height="90%"></p>
<blockquote>
<p>主要记录 2019-11-20 左右升级 anka 的操作</p>
</blockquote>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
  </entry>
  <entry>
    <title>Azure tutorial 02: Storage</title>
    <url>/2019/12/11/Azure-tutorial-02-Storage/</url>
    <content><![CDATA[<p>storage account type<br><a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview</a></p>
<p><strong>Blob</strong> - Binary Large Object<br><strong>Binary Object</strong> - Images,Documents,Media Files, Log Files, Backup data Virtual Disks</p>
<p><strong>Blod types:</strong> </p>
<ul>
<li>Block Blob - Text and binary data Files</li>
<li>Append Blobs - Optimized for append operations</li>
<li>Page Blob - A collection of 512 byte pages optimized for random read and writes(virtual disk)</li>
</ul>
<p><strong>Locations and Redundancy:</strong> </p>
<ul>
<li>Locally-redundant storage (LRS): A simple, low-cost replication strategy. Data is replicated synchronously three times within the primary region.</li>
<li>Zone-redundant storage (ZRS): Replication for scenarios requiring high availability. Data is replicated synchronously across three Azure availability zones in the primary region.</li>
<li>Geo-redundant storage (GRS): Cross-regional replication to protect against regional outages. Data is replicated synchronously three times in the primary region, then replicated asynchronously to the secondary region. For read access to data in the secondary region, enable read-access geo-redundant storage (RA-GRS).</li>
<li>Geo-zone-redundant storage (GZRS) (preview): Replication for scenarios requiring both high availability and maximum durability. Data is replicated synchronously across three Azure availability zones in the primary region, then replicated asynchronously to the secondary region. For read access to data in the secondary region, enable read-access geo-zone-redundant storage (RA-GZRS).</li>
</ul>
<p><strong>Access Tiers:</strong></p>
<ul>
<li>Hot </li>
<li>Cool </li>
<li>Archive</li>
</ul>
<p><strong>Azure Storage services:</strong></p>
<ul>
<li>Blob service</li>
<li>File service</li>
<li>Queue service</li>
<li>Table Storage</li>
</ul>
<p><strong>Securing Storage Accounts:</strong></p>
<ul>
<li>Access Keys -Two per storage account,full access</li>
<li>Share Access Signatures - Time based access keys that give granular control</li>
</ul>
<p><strong>作业：新建storage account ,并上传文件或文件夹到</strong></p>
<p>create顺序:<br>a subscriptions -&gt;  a storage account -&gt; a SAS token   </p>
<p>除了从azure portal页面操作之外，还提供以下两种方式</p>
<ul>
<li>Azure Storage Explorer - <a href="https://azure.microsoft.com/en-us/features/storage-explorer/" target="_blank" rel="noopener">install tutorial</a><blockquote>
<p>或者浏览器中直接打开链接<a href="https://go.microsoft.com/fwlink/?LinkId=708342&amp;clcid=0x409，会自动下载" target="_blank" rel="noopener">https://go.microsoft.com/fwlink/?LinkId=708342&amp;clcid=0x409，会自动下载</a></p>
</blockquote>
</li>
</ul>
<p>打开 Azure Storage Explorer， 通过xx链接storage<br><img src="/images/azure_storage_01.png" width="80%" height="80%"></p>
<p><img src="/images/azure_storage_02.png" width="80%" height="80%"></p>
<ul>
<li>azcopy - <a href="https://docs.microsoft.com/zh-cn/azure/storage/common/storage-use-azcopy-v10?WT.mc_id=thomasmaurer-blog-thmaure" target="_blank" rel="noopener">install tutorial</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mac os terminal</span></span><br><span class="line">azcopy cp <span class="string">"/Users/xxx/Desktop/testdir/hello_azure.txt"</span> <span class="string">"https://storage873375.blob.core.windows.net/container1/?[?sv=2019-02-02&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacup&amp;se=2019-12-11T11:40:09Z&amp;st=2019-12-11T03:40:09Z&amp;spr=https&amp;sig=5%2FFHo4%2BBwxDB6wLftyB7%2FSF7gqnhaEmpFa4nheBOXQg%3D]"</span></span><br></pre></td></tr></table></figure>
<p>报错,原始是 <code>？</code> 后边格式的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mac os terminal</span></span><br><span class="line">azcopy cp <span class="string">"/Users/xxx/Desktop/testdir/hello_azure.txt"</span>  <span class="string">"https://storage873375.blob.core.windows.net/container1/newdir/?sv=2019-02-02&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacup&amp;se=2019-12-11T11:40:09Z&amp;st=2019-12-11T03:40:09Z&amp;spr=https&amp;sig=5%2FFHo4%2BBwxDB6wLftyB7%2FSF7gqnhaEmpFa4nheBOXQg%3D"</span></span><br></pre></td></tr></table></figure>
<p><a href="https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs</a></p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>Azure tutorial 01: overview</title>
    <url>/2019/12/11/Azure-tutorial-01-overview/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>Bash function skill</title>
    <url>/2019/06/18/Bash-function-skill/</url>
    <content><![CDATA[<p>bash 函数技巧</p>
<h4 id="1-递归函数"><a href="#1-递归函数" class="headerlink" title="1. 递归函数"></a>1. 递归函数</h4><h4 id="2-导出函数"><a href="#2-导出函数" class="headerlink" title="2.导出函数"></a>2.导出函数</h4><p>函数也可以像环境变量一样用 export 导出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   <span class="function"><span class="title">foo</span></span>() &#123;<span class="built_in">echo</span> <span class="string">"This is foo function"</span>&#125;</span><br><span class="line">➜   <span class="built_in">export</span> -f foo</span><br><span class="line"><span class="function"><span class="title">foo</span></span> () &#123;</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"This is foo function"</span></span><br><span class="line">&#125;</span><br><span class="line">➜   foo</span><br><span class="line">This is foo <span class="keyword">function</span></span><br><span class="line">➜</span><br></pre></td></tr></table></figure></p>
<h4 id="3-读取命令返回值"><a href="#3-读取命令返回值" class="headerlink" title="3. 读取命令返回值"></a>3. 读取命令返回值</h4><p>命令的返回值被保存在变量 <code>$?</code> 中<br>返回值被称为 <strong>退出状态</strong> 。它可用于确定命令执行成功与否。如果命令成功退出，那么退出状态为0，否则为非0.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   cat success_test.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#file name: success_test.sh</span></span><br><span class="line"><span class="comment">#对命令行参数求值，比如 success_test.sh `ls | grep txt`</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"parameter is :"</span><span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$CMD</span> executed successfully."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$CMD</span> terminated unsuccessfully."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   success_test.sh <span class="string">'ls'</span></span><br><span class="line">parameter is :ls</span><br><span class="line">certbot-auto	t1		t3		test.sh</span><br><span class="line">success_test.sh	t2		test.jsonnet</span><br><span class="line"> executed successfully.</span><br></pre></td></tr></table></figure></p>
<h4 id="4-向命令传递参数"><a href="#4-向命令传递参数" class="headerlink" title="4. 向命令传递参数"></a>4. 向命令传递参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   cat showArgs.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 <span class="variable">$#</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span> is <span class="variable">$1</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   showArgs.sh a b cc</span><br><span class="line">1 is a</span><br><span class="line">2 is b</span><br><span class="line">3 is cc</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Crontab on Liunx or Jenkins</title>
    <url>/2019/04/28/Crontab-on-Liunx-or-Jenkins/</url>
    <content><![CDATA[<p>源起：<br><code>@midnight</code>  This will run at some point between 0:00 and 2:59</p>
<p><code>H(0-30) 02 * * *</code> between 2:00 a.m. – 02:30 a.m.<br>//will build the same time every day</p>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://crontab-generator.org/" target="_blank" rel="noopener">https://crontab-generator.org/</a></li>
<li><a href="https://blogs.microsoft.co.il/meravk/2015/06/10/how-to-schedule-a-build-in-jenkins/" target="_blank" rel="noopener">https://blogs.microsoft.co.il/meravk/2015/06/10/how-to-schedule-a-build-in-jenkins/</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Configuration</title>
    <url>/2019/07/26/Docker-Configuration/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">Distribution</th>
<th>Configuration </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Ubuntu/Debian/Gentoo</td>
<td>/etc/default/docker</td>
</tr>
<tr>
<td style="text-align:left">OpenSuse/CentOS/Red Hat</td>
<td>/etc/sysconfig/docker</td>
</tr>
</tbody>
</table>
<p>/lib/systemd/system/docker.service</p>
<p>/user/lib/systemd/system/service/docker</p>
<h5 id="场景一："><a href="#场景一：" class="headerlink" title="场景一："></a>场景一：</h5><p>Docker默认的配置文件/etc/default/docker或者/etc/sysconfig/docker都不起作用，查看了一下/lib/systemd/system/docker.service文件，发现里面没有加载默认配置文件，一些配置不知道要怎么弄了~~~</p>
<p>解决办法是：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment">#添加一行</span></span><br><span class="line">$ EnvironmentFile=-/etc/default/docker</span><br><span class="line">或者</span><br><span class="line">$ EnvironmentFile=-/etc/sysconfig/docker</span><br><span class="line"><span class="comment">#-代表ignore error</span></span><br></pre></td></tr></table></figure></p>
<p>并修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ExecStart=/usr/bin/docker daemon -H fd://</span><br><span class="line"><span class="comment">#改成</span></span><br><span class="line">$ ExecStart=/usr/bin/docker daemon -H fd:// <span class="variable">$DOCKER_OPTS</span></span><br></pre></td></tr></table></figure>
<p>这样才能使用/etc/default/docker里定义的DOCKER_OPTS参数</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Contract</title>
    <url>/2019/07/26/Docker-Contract/</url>
    <content><![CDATA[<blockquote>
<p>Docker 契约</p>
</blockquote>
<p><img src="/images/docker_contract_01.png" alt="docker_contract_01"></p>
<p><strong>问题</strong><br>想要合作团队的可交付成果是整洁的、明确的，从面减少交付流水线里的摩擦。</p>
<p><strong>解决方案</strong><br>使用Docker契约来推动团队间整洁的可交付成果</p>
<p><strong>讨论</strong><br>  随着公司规模扩大，经常可以看到其曾经拥有的扁平化的、精益化的组织架构——几个关键的个人“了解整个系统”，让位给了一个更加结构化的组织架构——不同的团队具有不同职责和能力。我们在效力过的组织中都对此有过切身体会。</p>
<p>  如果没有进行技术投入，随着团队之间相互交付的增多，摩擦也会不断升级。图7-2展示了这个场景的一个简化了但具有代表性的倩形。图7-2 中的工作流有几个大家熟知的间题。这些间题最终都归结于状态管理的困难。测试团队可能在一台不是运维团队所设置的机器上进行侧试。理论上，对所有环境的修改都应仔细地记录下来，并在出现问题时进行回滚以保持一致性。但是，商业压力与人类行为的存在总是破坏这个目标，造成 <strong>环境性漂移</strong>。</p>
<p><img src="/images/docker_contract_03.png" alt="docker_contract_02"></p>
<p>Docker 所能做的是在团队之间划出清洗的分界线，Docker 镜像即是<strong>分界线</strong> ，又是<strong>交换的单位</strong>，我们称为 <strong>Docker Contract (契约)</strong>,如图 7-3 所示。</p>
<p><img src="/images/docker_contract_03.png" alt="docker_contract_03"></p>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://learning.oreilly.com/library/view/Docker+in+Practice/9781617292729/kindle_split_018.html#ch07lev1sec1a" target="_blank" rel="noopener">https://learning.oreilly.com/library/view/Docker+in+Practice/9781617292729/kindle_split_018.html#ch07lev1sec1a</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker clean</title>
    <url>/2019/05/07/Docker-clean/</url>
    <content><![CDATA[<h4 id="1-Cleanup-exited-processes"><a href="#1-Cleanup-exited-processes" class="headerlink" title="1.Cleanup exited processes:"></a>1.Cleanup exited processes:</h4><p>docker rm $(docker ps -q -f status=exited)</p>
<h4 id="3-Cleanup-dangling-volumes"><a href="#3-Cleanup-dangling-volumes" class="headerlink" title="3.Cleanup dangling volumes:"></a>3.Cleanup dangling volumes:</h4><p>docker volume rm $(docker volume ls -qf dangling=true)</p>
<h4 id="3-Cleanup-dangling-images"><a href="#3-Cleanup-dangling-images" class="headerlink" title="3.Cleanup dangling images:"></a>3.Cleanup dangling images:</h4><p>docker rmi $(docker images –filter “dangling=true” -q –no-trunc)</p>
<p>more methods go to below link ↓</p>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://www.jianshu.com/p/470e29801be2" target="_blank" rel="noopener">https://www.jianshu.com/p/470e29801be2</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker image export and import</title>
    <url>/2019/04/07/Docker-image%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<p>A: “为什么要导镜像，直接从网上下载不就行了？”<br>B: “too young too naive，你以为哪里都能上网的，谁家的机房没事都能上个youtube,google的吗”</p>
<blockquote>
<p>一般的公司内网环境是无法访问Internet的，自然也无从下载基础 docker 基础镜像。但这个时候领导交给你的任务–比如用容器运行一个 Java 程序，你在本地程序都调试好了，也在docker container形式运行良好，但是怎么搬到服务器上，这个时候最原始的U盘就大有用处了（虽然现在都是云盘，但是服务器所在网络就好比你小时候玩的小霸王学习机，只能自己和自己玩儿）。</p>
</blockquote>
<h2 id="your-PC-–-gt-U-Disk-–-gt-Server"><a href="#your-PC-–-gt-U-Disk-–-gt-Server" class="headerlink" title="your PC –&gt; U Disk –&gt; Server"></a>your PC –&gt; U Disk –&gt; Server</h2><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps:"></a>Steps:</h3><h5 id="1-Export-image-导出镜像-在你自己的电脑上执行）"><a href="#1-Export-image-导出镜像-在你自己的电脑上执行）" class="headerlink" title="1.Export image (导出镜像,在你自己的电脑上执行）"></a>1.Export image (导出镜像,在你自己的电脑上执行）</h5><p><code></code> docker save Image</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➜  docker images  | grep python</span><br><span class="line">python          3-alpine            c02a3409ee5b        6 weeks ago         86.7MB</span><br><span class="line">➜  docker save c02a3409ee5b &gt; my_python.tar</span><br><span class="line">➜  ls -l</span><br><span class="line">-rw-r--r--    1 xxx  staff  90526208  4  7 21:33 my_python.tar</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更建议用<em>镜像</em>名称去处理，如 docker save python:3-alpine &gt; my_python.tar ；好处是在load后镜像名称保持一致，而不是没有tag的</p>
</blockquote>
<h5 id="2-乾坤大挪移"><a href="#2-乾坤大挪移" class="headerlink" title="2.乾坤大挪移"></a>2.乾坤大挪移</h5><p>拷贝这个tar包到U 盘，然后插到（或者是挂载）Server上</p>
<h5 id="3-Import-image-导入镜像"><a href="#3-Import-image-导入镜像" class="headerlink" title="3.Import image (导入镜像)"></a>3.Import image (导入镜像)</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load &lt; my_python.tar</span><br><span class="line">docker tag 9045 my_python:1.0   //通常还需要重新命名一下，以便可读</span><br></pre></td></tr></table></figure>
<p><strong>More Ref:</strong></p>
<ol>
<li><a href="https://jingsam.github.io/2017/08/26/docker-save-and-docker-export.html" target="_blank" rel="noopener">https://jingsam.github.io/2017/08/26/docker-save-and-docker-export.html</a></li>
<li><a href="https://www.jianshu.com/p/8408e06b7273" target="_blank" rel="noopener">https://www.jianshu.com/p/8408e06b7273</a></li>
</ol>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E01初识</title>
    <url>/2020/03/16/Github-Actions-E01%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>随着github actions在2019年下半年的推出，越来越多的人认识并了解到它。而也因为项目上的机遇，想尝试一下它。于是会较完整地从个人使用角度去记录一下，会有一系列的关于Github actions的<a href="https://www.devops-tech.cn/tags/GA/" target="_blank" rel="noopener">文章</a>。</p>
</blockquote>
<blockquote>
<p>另外，为方便会将 Github actions 简称为<strong>GA</strong>; 如果官方有简写，到时候再统一更换。</p>
</blockquote>
<h3 id="0-Github-Actions的历史"><a href="#0-Github-Actions的历史" class="headerlink" title="0. Github Actions的历史"></a>0. Github Actions的历史</h3><p>2018年10月16日，全球最大开发者社区GitHub Universe开发者大会在旧金山召开，发布了新产品GitHub Actions。但是仅处于 <strong>limited public beta</strong>。个人是2019年9,10月份的时候看到新闻消息，听说了这个新词。当时还是 Beta 版本,需要自己简单的申请一下，才可以使用。而到这个时间点(2020.03),对于公开的 Github Public repositories 早已经可以全面使用(‘2019年11月13日 GitHub Actions 将在 GitHub Universe 上正式发布’)。</p>
<h3 id="1-什么是Github-Actions"><a href="#1-什么是Github-Actions" class="headerlink" title="1. 什么是Github Actions"></a>1. 什么是Github Actions</h3><p>根据<a href="https://github.com/features/actions" target="_blank" rel="noopener">官网</a>的介绍如下：</p>
<p><strong>Github Actions</strong></p>
<p>Automate your workflow from idea to production. </p>
<p><em>GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.</em></p>
<blockquote>
<p>个人理解：</p>
<ul>
<li>首先做了 <code>CI/CD</code> 工具的事情，后面在使用过程中也可以看到github actions 实现了很多<code>CI/CD</code>工具 jenkins,Travis CI,CircleCI 等一些部分功能；</li>
<li>automate(自动),可以让很多与代码库相关的事情自动，比如很多人用到的 <code>用github actions  发布hexo博客</code>， <code>用github actions给自己推送天气预报</code></li>
</ul>
</blockquote>
<h3 id="2-为什么使用"><a href="#2-为什么使用" class="headerlink" title="2. 为什么使用"></a>2. 为什么使用</h3><ul>
<li><p>1.不要钱(部分)</p>
<blockquote>
<p>本着github 开源的原则，公开的仓库可免费，私有仓库有限制的使用，对于企业用户也是。不过很好奇对于购买了github企业版的用户，如果想要使用github actions会怎么收费，有哪些方式可选。</p>
</blockquote>
</li>
<li><p>2.多平台</p>
<blockquote>
<p>支持3大主流操作系统 Linux, macOS, Windows,这一条无疑很有吸引力，因为毕竟一个人难以拥有三种系统的电脑（即便有方法，切换起来也会费时费劲）。而对于苹果软件而言，有一个 macOS 的构建环境实属难得，毕竟人家的系统是收费的。也可对接很多云，如AWS、Azure 或是 GCP，也支持众多语言。</p>
</blockquote>
</li>
<li><p>3.功能强</p>
<blockquote>
<p>功能太多，不一一说明，只简单提及几点，<strong>Matrix Workflows</strong>,<strong>Container Services</strong>,<strong>Caching Dependencies</strong>, <strong>Actions Marketplace</strong> 等等，具体使用后续细解。</p>
</blockquote>
</li>
</ul>
<h3 id="3-基本概念"><a href="#3-基本概念" class="headerlink" title="3.基本概念"></a>3.基本概念</h3><p><strong>workflow（工作流程）</strong>：持续集成一次运行的过程。</p>
<p><strong>job（任务）</strong>：一个 workflow 由一个或多个 job 构成，含义是一次持续集成的运行，可以完成多个任务。</p>
<p><strong>step（步骤）</strong>：每个 job 由多个 step 构成，一步步完成。</p>
<p><strong>action（动作）</strong>：每个 step 可以依次执行一个或多个命令（action）。</p>
<blockquote>
<p>由于自己使用jenkins较多，一直想把以上概念与jenkins的做对比，但后来发现，还是不对比较好。因为 github actions的基本组成有自己的特色和优势，在使用时不要纠结旧的Jenkins中掌握的知识，需要抛弃旧的观念.建议:不被jenkins和其他cicd工具所限制住,最好深入理解github actions开发者的初衷，灵活运用。</p>
</blockquote>
<h4 id="小思考"><a href="#小思考" class="headerlink" title="小思考?"></a>小思考?</h4><p>一年后，两年后，Github Actions 会怎么影响其他工具？（Jenkins,Gocd, Gitlab CI, AWS CodeDeploy等等）</p>
<blockquote>
<p>(欢迎评论区留言)</p>
</blockquote>
<hr>
<p>待完成清单</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> 产出物</li>
<li style="list-style: none"><input type="checkbox"> with用法</li>
<li style="list-style: none"><input type="checkbox"> Badge <em><a href="https://www.jianshu.com/p/570a99aa1608" target="_blank" rel="noopener">https://www.jianshu.com/p/570a99aa1608</a></em></li>
<li style="list-style: none"><input type="checkbox"> 邮件通知 （默认构件失败会给自己的邮箱发消息，成功不会）</li>
</ul>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://github.com/features/actions" target="_blank" rel="noopener">https://github.com/features/actions</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E02最小Demo</title>
    <url>/2020/03/17/Github-Actions-E02%E6%9C%80%E5%B0%8FDemo/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p><a href="https://www.devops-tech.cn/2020/03/16/Github-Actions-E01/" target="_blank" rel="noopener">前面一篇</a>已经说明一些概念，于是为了更好的理解，直接用一个简单的demo帮助进一步理解概念。</p>
</blockquote>
<p>示例仓库： <a href="https://github.com/cicd-draft/api-test-demo" target="_blank" rel="noopener">https://github.com/cicd-draft/api-test-demo</a></p>
<h3 id="1-配置工作流"><a href="#1-配置工作流" class="headerlink" title="1.配置工作流"></a>1.配置工作流</h3><h4 id="1-1-步骤一"><a href="#1-1-步骤一" class="headerlink" title="1.1 步骤一"></a>1.1 步骤一</h4><p>在仓库的根目录，创建名为 .github/workflows 的目录以存储工作流程文件。</p>
<h4 id="1-2-步骤二"><a href="#1-2-步骤二" class="headerlink" title="1.2 步骤二"></a>1.2 步骤二</h4><p>在 <code>.github/workflows</code> 中，为工作流程添加 .yml 或 .yaml 文件。 例如 .github/workflows/demo.yml。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">my</span> <span class="string">workflow</span> <span class="string">demo</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处使用最常见的触发方法，还有其他的很多方法可满足不同需求</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#工作流程运行包括一项或多项作业。 作业默认是并行运行。 要按顺序运行作业，needs 关键词在其他作业上定义依赖项。</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment">#每项作业必须关联一个 ID。&lt;job_id&gt; 必须以字母或 _ 开头</span></span><br><span class="line"><span class="attr">  my_first_job:</span></span><br><span class="line">    <span class="comment"># 作业1名称为 Demo First job,也是作业显示在 GitHub 上的名称。</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Demo</span> <span class="string">First</span> <span class="string">job</span></span><br><span class="line">    <span class="comment"># 此作业在 Linux 上运行</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">My</span> <span class="string">step</span> <span class="string">one</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">echo</span> <span class="string">"Hello ,Github actions, I'm &gt;&gt;My step one&lt;&lt;"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">My</span> <span class="string">step</span> <span class="string">two</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo "My step one begin..."</span></span><br><span class="line"><span class="string">        echo "doing..."</span></span><br><span class="line"><span class="string">        echo "Finished!!!"</span></span><br><span class="line"><span class="string"></span><span class="attr">  my_second_job:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Demo</span> <span class="string">Second</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">check</span> <span class="string">OS</span> <span class="string">info</span></span><br><span class="line">        <span class="string">run</span> <span class="string">:</span> <span class="string">system_profiler</span> <span class="string">SPSoftwareDataType</span></span><br></pre></td></tr></table></figure>
<h4 id="1-3-步骤三"><a href="#1-3-步骤三" class="headerlink" title="1.3 步骤三"></a>1.3 步骤三</h4><p>将工作流程文件中的更改提交到您希望其中运行工作流程的分支。</p>
<p>到这里一个简单的demo就算完成了，可以去 <strong>Actions</strong> 按钮下查看运行情况。</p>
<h3 id="2-管理工作流"><a href="#2-管理工作流" class="headerlink" title="2.管理工作流"></a>2.管理工作流</h3><p><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run" target="_blank" rel="noopener">官网链接</a>有详细说明以下每个操作中的细节</p>
<blockquote>
<p>由于图片太多,就不做搬运工了</p>
</blockquote>
<ul>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#about-workflow-permissions" target="_blank" rel="noopener">关于工作流程权限</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#about-workflow-management" target="_blank" rel="noopener">关于工作流程管理</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#viewing-your-workflow-history" target="_blank" rel="noopener">查看工作流程历史记录</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#canceling-a-workflow-run" target="_blank" rel="noopener">取消工作流程运行</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#viewing-logs-to-diagnose-failures" target="_blank" rel="noopener">查看日志以诊断故障</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#searching-logs" target="_blank" rel="noopener">搜索日志</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#downloading-logs" target="_blank" rel="noopener">下载日志</a></li>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-debug-logging" target="_blank" rel="noopener">启用调试日志</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E04运行环境-runner</title>
    <url>/2020/03/21/Github-Actions-E04%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-runner/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>一个可以直接运行的CICD环境，用起来无疑节省了搭建环境的过程。但对于一个我们陌生的运行环境，最好还是提前了解一些基础的东西，比如：机器的操作系统及版本、内存、CPU、有多少磁盘可用、当前的用户是什么、权限有没有限制，以及workspace在什么目录，不然一旦遇到问题，就无从下手，或者找错方向。</p>
</blockquote>
<p><em>##### </em>CICD环境的灵魂3问：</p>
<ul>
<li>我是谁 <em>-&gt; 操作系统，具体版本，当前用户及权限</em></li>
<li>我在哪里 <em>-&gt; 工作目录在哪里</em></li>
<li>我能做什么 <em>—&gt; 有什么工具已经安装了，还是要自己安装</em></li>
</ul>
<h3 id="1-GitHub-hosted-runner-介绍"><a href="#1-GitHub-hosted-runner-介绍" class="headerlink" title="1. GitHub-hosted runner 介绍"></a>1. GitHub-hosted runner 介绍</h3><p>一个 GitHub-hosted runner 是由GitHub托管并安装了GitHub Actions运行程序应用程序的虚拟机。 GitHub为运行Linux，Windows和macOS操作系统的用户提供帮助。</p>
<p>个人总结：GitHub Actions runner 是一个 application</p>
<p>官网也提及 <em>“The GitHub Actions runner application is open source. You can contribute and file issues in the runner repository.”</em></p>
<h3 id="2-硬件资源"><a href="#2-硬件资源" class="headerlink" title="2. 硬件资源"></a>2. 硬件资源</h3><p>GitHub hosts Linux and Windows runners on Standard_DS2_v2 virtual machines in Microsoft Azure.</p>
<p>GitHub uses MacStadium to host the macOS runners.</p>
<p>每个虚拟机有相同的硬件资源可使用。拿一台同配置的个人电脑，或者云上的服务器相比，GA 的服务器运行起来会快一些。</p>
<ul>
<li>2-core CPU</li>
<li>7 GB of RAM memory</li>
<li>14 GB of SSD disk space</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Virtual environment</th>
<th>YAML workflow label</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Windows Server 2019</td>
<td>windows-latest or windows-2019</td>
</tr>
<tr>
<td style="text-align:left">Ubuntu 18.04</td>
<td>ubuntu-latest or ubuntu-18.04</td>
</tr>
<tr>
<td style="text-align:left">Ubuntu 16.04</td>
<td>ubuntu-16.04</td>
</tr>
<tr>
<td style="text-align:left">macOS Catalina 10.15</td>
<td>macos-latest or macos-10.15</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Inbound ICMP packets are blocked for all Azure virtual machines, so ping or traceroute commands might not work. For more information about the Standard_DS2_v2 machine resources, see “Dv2 and DSv2-series” in the Microsoft Azure documentation.</p>
</blockquote>
<h3 id="3-运行用户的权限"><a href="#3-运行用户的权限" class="headerlink" title="3. 运行用户的权限"></a>3. 运行用户的权限</h3><p>可以写一个demo查看一下当前用户，例子见下面 👇</p>
<p>Linux和macOS虚拟机均使用无密码sudo运行。 当您需要执行命令或安装需要比当前用户更多特权的工具时，可以使用sudo而不需要提供密码。</p>
<p>Windows虚拟机被配置为以禁用了用户帐户控制（UAC）的管理员身份运行。</p>
<h3 id="4-文件系统-Filesystems-on-GitHub-hosted-runners"><a href="#4-文件系统-Filesystems-on-GitHub-hosted-runners" class="headerlink" title="4. 文件系统(Filesystems on GitHub-hosted runners)"></a>4. 文件系统(Filesystems on GitHub-hosted runners)</h3><p>GitHub在虚拟机上的特定目录中执行操作和shell命令, 虚拟机上的文件路径不是静态的。</p>
<p>Docker container filesystem 后面讲到时再说</p>
<p>关于查看当前用户和工作目录的demo</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  linux:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">    <span class="comment">#我是谁</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">whoami</span></span><br><span class="line">    <span class="comment">#我在那儿</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        pwd</span></span><br><span class="line"><span class="string">        echo $HOME $GITHUB_WORKSPACE $GITHUB_EVENT_PATH</span></span><br></pre></td></tr></table></figure>
<p>在我的<a href="https://github.com/cicd-draft/api-test-demo" target="_blank" rel="noopener">repo</a>中运行的输出为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runner</span><br><span class="line">/home/runner/work/api-test-demo/api-test-demo</span><br><span class="line">/home/runner /home/runner/work/api-test-demo/api-test-demo /home/runner/work/_temp/_github_workflow/event.json</span><br></pre></td></tr></table></figure></p>
<p>GitHub为每个工作流创建的环境变量有很多，后面会单独讲到，也可以提前看一下<a href="https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables" target="_blank" rel="noopener">有哪些环境变量</a>。这样类似的<strong>默认的环境变量</strong>就是类似于我们在jenkins上用的 <code>BUILD_NUMBER</code>,<code>JOB_NAME</code>，当然也可以自定义环境变量。</p>
<h3 id="5-软件安装"><a href="#5-软件安装" class="headerlink" title="5. 软件安装"></a>5. 软件安装</h3><p>不同的操作系统上都预先安装好了常用软件，详情可见下方的链接 <a href="https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners" target="_blank" rel="noopener">https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners</a></p>
<p><a href="https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md" target="_blank" rel="noopener">Ubuntu 18.04 LTS</a><br><a href="https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1604-README.md" target="_blank" rel="noopener">Ubuntu 16.04 LTS</a><br><a href="https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md" target="_blank" rel="noopener">Windows Server 2019</a><br><a href="https://github.com/actions/virtual-environments/blob/master/images/win/Windows2016-Readme.md" target="_blank" rel="noopener">Windows Server 2016</a><br><a href="https://github.com/actions/virtual-environments/blob/master/images/macos/macos-10.15-Readme.md" target="_blank" rel="noopener">MacOS 10.15</a></p>
<p>如果不想看看长长的readme，可以在运行job中先检查以下软件是否安装及具体版本；如果最后发现没有安装，就添加安装的命令即可。比如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  linux:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">ninja-build</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">ninja</span> <span class="bullet">--version</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>思考个问题：</strong> 自定义 runner，以及用私有的服务器运行 workflow，怎么实现？</p>
<blockquote>
<p>方法肯定是有的，相信github官方可考虑了runner私有化的场景(毕竟gitlab CI runner在那里摆着)，后续有时间再研究</p>
</blockquote>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://github.com/actions/runner" target="_blank" rel="noopener">Github actions runner 源码仓库</a></li>
<li><a href="https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#administrative-privileges-of-github-hosted-runners" target="_blank" rel="noopener">Administrative privileges of GitHub-hosted runners</a></li>
<li><a href="https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#docker-container-filesystem" target="_blank" rel="noopener">Docker container filesystem</a></li>
<li><a href="https://help.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners" target="_blank" rel="noopener">About self-hosted runners</a></li>
<li><a href="https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/viewing-your-github-actions-usage" target="_blank" rel="noopener">billing</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E03触发</title>
    <url>/2020/03/18/Github-Actions-E03%E8%A7%A6%E5%8F%91/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>知道手机能够打电话，还得知道怎么把电话号码拨出去，这样才能实现通话的功能；而CICD的场景会更为复杂，如果一个任务在你不想让它运行的时候运行，会浪费自己资源，影响产出物。</p>
</blockquote>
<p>关于触发工作流-workflow，github actions的原文如下</p>
<p><strong>Events that trigger workflows</strong></p>
<p>You can configure your workflows to run when specific activity on GitHub happens, at a scheduled time, or when an event outside of GitHub occurs.</p>
<hr>
<p>根据上面描述，大致有3类事件(<em>错了的话欢迎指正</em>)，官网文档更详细的在<a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener">这里</a>，不是在<a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/configuring-a-workflow#triggering-a-workflow-with-events" target="_blank" rel="noopener"><em>那里</em></a></p>
<blockquote>
<p>最好看英文的，中文似乎没有翻译完，少了一个 <em>Triggering new workflows using a personal access token</em> 方法 😢</p>
</blockquote>
<h4 id="一、Github的特定事件-Specific-activity-on-GitHub-happens"><a href="#一、Github的特定事件-Specific-activity-on-GitHub-happens" class="headerlink" title="一、Github的特定事件 (Specific activity on GitHub happens)"></a>一、Github的特定事件 (Specific activity on GitHub happens)</h4><p>算是最常见的一种方式，比如：当小明更新了master分支代码，推送到仓库后触发这个CICD流程。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单一事件 Trigger on push</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="comment">#------------------分割线----------------</span></span><br><span class="line"><span class="comment"># 一个事件列表也可以，Trigger the workflow on push or pull request</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push,</span> <span class="string">pull_request]</span></span><br><span class="line"><span class="comment">#------------------分割线----------------</span></span><br><span class="line"><span class="comment"># 不同类型的事件的组合</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Trigger the workflow on push or pull request,</span></span><br><span class="line">  <span class="comment"># but only for the master branch</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># Also trigger on page_build, as well as release created events</span></span><br><span class="line"><span class="attr">  page_build:</span></span><br><span class="line"><span class="attr">  release:</span></span><br><span class="line"><span class="attr">    types:</span> <span class="comment"># This configuration does not affect the page_build event above</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">created</span></span><br></pre></td></tr></table></figure>
<p>Github 的 webhooks event有很多，每个event又包含很多类型。查看<a href="https://developer.github.com/webhooks/#events" target="_blank" rel="noopener">所有的event</a></p>
<p>顺带熟悉下 github webhook 的概念</p>
<p><strong>官方介绍</strong>：Webhooks provide a way for notifications to be delivered to an external web server whenever certain actions occur on a repository or organization.<a href="https://help.github.com/en/github/extending-github/about-webhooks" target="_blank" rel="noopener">原文点这里</a></p>
<blockquote>
<p><em>通俗版</em>：可以将 github Webhook 理解为一个勤勤恳恳的“卧底”，它被安插到github的一个仓库或某个组织中，一旦发生了之前定义好的事情，它会第一时间把以某种约定好的方式告知给 github acionts。<br><em>简单(不严谨地)而言</em>: 当有行为触发时，Github 会发送 POST 请求至指定的 URL。</p>
</blockquote>
<p>请看🌰<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  issue_comment:</span></span><br><span class="line"><span class="attr">    types:</span> <span class="string">[created,</span> <span class="string">deleted]</span></span><br></pre></td></tr></table></figure></p>
<p>默认情况下，一个事件的所有活动类型都会触发工作流程运行。也可以使用types关键字将工作流程运行限制为特定的活动类型，精确使用。</p>
<blockquote>
<p>延伸一下： github webhook -&gt;  广义的webhooks、 github哪些<a href="https://developer.github.com/webhooks/#events" target="_blank" rel="noopener">events</a></p>
</blockquote>
<h4 id="二、定时事件-Scheduled-events"><a href="#二、定时事件-Scheduled-events" class="headerlink" title="二、定时事件(Scheduled events)"></a>二、定时事件(Scheduled events)</h4><p>类似crontab的用法，使用<a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07" target="_blank" rel="noopener">POSIX cron 语法</a>在指定的时间(<strong>UTC 时间</strong>)运行。</p>
<p>在workflow中用 date命令也可以看到输出的是UTC时间，如:<code>Thu Mar 19 12:08:10 UTC 2020</code>。使用中要根据自己的时区计算出UTC时间，然后配置上。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  schedule:</span></span><br><span class="line">    <span class="comment"># * is a special character in YAML so you have to quote this string</span></span><br><span class="line"><span class="attr">    - cron:</span>  <span class="string">'*/15 * * * *'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注： GitHub 操作 不支持非标准语法 @yearly、@monthly、@weekly、@daily、@hourly 和 @reboot。这样的语法，如 @midnight 在jenkins中是支持的，需要区别开来。</p>
</blockquote>
<h4 id="三、外部事件-External-events"><a href="#三、外部事件-External-events" class="headerlink" title="三、外部事件(External events)"></a>三、外部事件(External events)</h4><ul>
<li>通过Github API 触发叫做 repository_dispatch 的事件，以此来触发workflow.</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">repository_dispatch</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用个人访问令牌触发新工作流程(Triggering new workflows using a personal access token)</li>
</ul>
<p>原文引用：<br><em>For example, if a workflow run pushes code using the repository’s GITHUB_TOKEN, a new workflow will not run even when the repository contains a workflow configured to run when push events occur. </em></p>
<p><em>If you would like to trigger a workflow from a workflow run, you can trigger the event using a personal access token. You’ll need to create a personal access token and store it as a secret in your repository. To minimize your GitHub Actions usage costs, ensure that you don’t create recursive or unintended workflow runs.</em></p>
<p>上面提及的2中方法，都属于用外部方法来触发 workflow。 而上一段英文也提及 workflow 触发workflow的情况，有需要可详细研究。</p>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener">https://help.github.com/en/actions/reference/events-that-trigger-workflows</a></li>
<li><a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">https://developer.github.com/webhooks/</a></li>
<li><a href="https://help.github.com/cn/actions/reference/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags" target="_blank" rel="noopener">Patterns to match branches and tags</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E06产出物</title>
    <url>/2020/03/30/Github-Actions-E06%E4%BA%A7%E5%87%BA%E7%89%A9/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>大多数时候，workflow的产出物都会直接传到对应的某些仓库，比如docker image会送到docker hub这种仓库存储。这种时候是不需要在workflow再额外的管理产出物，但也不能全盘否定；有时候我们没有一个方便的地方去存储某些形式的文件等，就需要我们有类似jenkins <code>archiveArtifacts</code> 功能。但github actions能做的会更多，请期待。</p>
</blockquote>
<h3 id="1-关于artifacts"><a href="#1-关于artifacts" class="headerlink" title="1. 关于artifacts"></a>1. 关于artifacts</h3><p>构件是指在工作流程运行过程中产生的文件或文件集。<br>GitHub 提供两项可用于上传和下载构建构件的操作。 上传到工作流程运行的文件将使用 .zip 格式存档。 更多信息请参阅 <code>action/upload-artifact</code> 和 <code>download-artifact</code> 操作。</p>
<p>这些是您可能想要上传的一些常见构建和测试输出构件：</p>
<ul>
<li>日志文件和核心转储文件</li>
<li>测试结果、失败和屏幕截图</li>
<li>二进制或存档文件</li>
<li>压力测试性能输出和代码覆盖结果</li>
</ul>
<p>当作业完成时，运行程序将终止并删除虚拟环境的实例。</p>
<h3 id="2-上传"><a href="#2-上传" class="headerlink" title="2. 上传"></a>2. 上传</h3><p>常见的场景: 一个java程序的产出物是一个jar包，在构建之后需要得到这个jar用于其他环境部署。</p>
<p>依旧用 <a href="https://github.com/cicd-draft/api-test-demo" target="_blank" rel="noopener">api-test-demo</a> 这个仓库做演示，主要分为以下个步骤：</p>
<ul>
<li>1.下载代码；</li>
<li>2.构建jar包(存放于指定到路径<code>build/libs/api-demo-0.0.1-SNAPSHOT.jar</code>)；</li>
<li>3.上传jar包</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">my</span> <span class="string">workflow</span> <span class="string">demo</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  artifacts_demo_job:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">job1</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Build</span> <span class="string">jar</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        pwd  &amp;&amp; ls -l</span></span><br><span class="line"><span class="string">        ./gradlew -x jar build</span></span><br><span class="line"><span class="string">        ls -l build/libs/api-demo-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string"></span><span class="attr">    - name:</span> <span class="string">Archive</span> <span class="string">SNAPSHOT.jar</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">api_snapshot_jar</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">build/libs/api-demo-0.0.1-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>github actions 工作流的产出物都放在哪里的，保留多久</p>
</blockquote>
<h3 id="3-下载"><a href="#3-下载" class="headerlink" title="3. 下载"></a>3. 下载</h3><p>步骤官方说明如下：</p>
<ul>
<li>1.On GitHub, navigate to the main page of the repository.</li>
<li>2.Under your repository name, click Actions.</li>
<li>3.In the left sidebar, click the workflow you want to see.</li>
<li>4.Under “Workflow runs”, click the name of the run you want to see.</li>
<li>5.To download artifacts, use the Artifacts drop-down menu, and select the artifact you want to download.</li>
<li>6.To delete artifacts, use the Artifacts drop-down menu, and click .</li>
</ul>
<p>注意事项：</p>
<ul>
<li>保留90天</li>
<li>一旦删除某一个构件，无法恢复</li>
</ul>
<h3 id="4-在工作流程中作业之间传递数据"><a href="#4-在工作流程中作业之间传递数据" class="headerlink" title="4. 在工作流程中作业之间传递数据"></a>4. 在工作流程中作业之间传递数据</h3><p><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts#passing-data-between-jobs-in-a-workflow" target="_blank" rel="noopener">https://help.github.com/cn/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts#passing-data-between-jobs-in-a-workflow</a></p>
<p>由于同一个workflow的多个job分别运行在不同的虚拟主机上，下面示例工作流程说明如何在相同工作流程中的任务之间传递数据。关键词 <strong>need</strong> 用来确保job按顺序运行.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Share</span> <span class="string">data</span> <span class="string">between</span> <span class="string">jobs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  job_1:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Add</span> <span class="number">3</span> <span class="string">and</span> <span class="number">7</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - shell:</span> <span class="string">bash</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          expr 3 + 7 &gt; math-homework.txt</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">Upload</span> <span class="string">math</span> <span class="string">result</span> <span class="string">for</span> <span class="string">job</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">homework</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">math-homework.txt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  job_2:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Multiply</span> <span class="string">by</span> <span class="number">9</span></span><br><span class="line"><span class="attr">    needs:</span> <span class="string">job_1</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Download</span> <span class="string">math</span> <span class="string">result</span> <span class="string">for</span> <span class="string">job</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/download-artifact@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">homework</span></span><br><span class="line"><span class="attr">      - shell:</span> <span class="string">bash</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          value=`cat homework/math-homework.txt`</span></span><br><span class="line"><span class="string">          expr $value \* 9 &gt; homework/math-homework.txt</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">Upload</span> <span class="string">math</span> <span class="string">result</span> <span class="string">for</span> <span class="string">job</span> <span class="number">2</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">homework</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">homework/math-homework.txt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  job_3:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Display</span> <span class="string">results</span></span><br><span class="line"><span class="attr">    needs:</span> <span class="string">job_2</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">macOS-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Download</span> <span class="string">math</span> <span class="string">result</span> <span class="string">for</span> <span class="string">job</span> <span class="number">2</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/download-artifact@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">homework</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Print</span> <span class="string">the</span> <span class="string">final</span> <span class="string">result</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">bash</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          value=`cat homework/math-homework.txt`</span></span><br><span class="line"><span class="string">          echo The result is $value</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts" target="_blank" rel="noopener">关于该篇的原文</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E05环境变量</title>
    <url>/2020/03/24/Github-Actions-E05%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>例如在使用Jenkins等其他CICD工具时那样，环境变量可以帮助我们在流水线中传递参数，然后使用这些变量方便利用，或是获取更多关于构建的信息(比如<code>GITHUB_REPOSITORY</code>)。 例如构建镜像时 <code>app1:master-1</code>、<code>app1:ffac53</code>， 用分支名做判断等。</p>
</blockquote>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>GitHub为每个GitHub Actions工作流程运行设置默认环境变量。 您还可以在工作流文件中设置自定义环境变量。</p>
<h3 id="2-默认的环境变量"><a href="#2-默认的环境变量" class="headerlink" title="2. 默认的环境变量"></a>2. 默认的环境变量</h3><table>
<thead>
<tr>
<th style="text-align:left">环境变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HOME</td>
<td>用于存储用户数据的 GitHub 主目录路径。 例如  <code>/github/home</code>。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_WORKFLOW</td>
<td>工作流程的名称。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_RUN_ID</td>
<td>仓库中每次运行的唯一编号。 如果重新运行工作流运行，此数字不会更改。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_RUN_NUMBER</td>
<td>存储库中特定工作流程的每次运行的唯一编号。 对于工作流程的第一次运行，此数字从1开始，并在每次新运行时递增。 如果重新运行工作流运行，则此数字不会更改。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_ACTION</td>
<td>操作唯一的标识符 (id)。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_ACTIONS</td>
<td>当GitHub操作正在运行工作流时，请始终为true。可以使用此变量来区分何时在本地或通过GitHub运行测试.</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_ACTOR</td>
<td>发起工作流程的个人或应用程序的名称。 例如 octocat。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_REPOSITORY</td>
<td>所有者和仓库名称。 例如 octocat/Hello-World。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_EVENT_NAME</td>
<td>触发工作流程的 web 挂钩事件的名称。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_EVENT_PATH</td>
<td>具有完整 web 挂钩事件有效负载的文件路径。 例如 <code>/github/workflow/event.json</code>。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_WORKSPACE</td>
<td>GitHub 工作空间目录路径。 如果工作流程使用 <code>actions/checkout</code> 操作，工作空间目录将包含存储仓库副本的子目录。 如果不使用 <code>actions/checkout</code> 操作，该目录将为空。 例如 <code>/home/runner/work/my-repo-name/my-repo-name</code>。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_SHA</td>
<td>触发工作流程的提交 SHA。例如 ffac537e6cbbf934b08745a378932722df287a53。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_REF</td>
<td>触发工作流程的分支或标记参考。例如 refs/heads/feature-branch-1，如果分支或标记都不适用于事件类型，则变量不会存在。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_HEAD_REF</td>
<td>仅为复刻的仓库设置。 头部仓库的分支。</td>
</tr>
<tr>
<td style="text-align:left">GITHUB_BASE_REF</td>
<td>仅为复刻的仓库设置。 基础仓库的分支。</td>
</tr>
</tbody>
</table>
<p><strong>作用域</strong>: 整个workflow中</p>
<p>在例子<a href="https://github.com/cicd-draft/api-test-demo/blob/master/.github/workflows/env_usage1.yml.backup" target="_blank" rel="noopener">env_usage1.yml</a>中，从上到下依次输出如下(<em>如果需要测试，可去掉后缀 <code>.backup</code></em>):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Show Default environment variables</span><br><span class="line">&gt;&gt; In this example &lt;&lt;</span><br><span class="line">HOME is : /home/runner</span><br><span class="line">GITHUB_WORKFLOW is: my workflow demo</span><br><span class="line">GITHUB_RUN_ID is : 62167662</span><br><span class="line">GITHUB_RUN_NUMBER is : 3</span><br><span class="line">GITHUB_ACTION is : run</span><br><span class="line">GITHUB_ACTIONS is : <span class="literal">true</span></span><br><span class="line">GITHUB_ACTOR is : qinrui777</span><br><span class="line">GITHUB_REPOSITORY is : cicd-draft/api-test-demo</span><br><span class="line">GITHUB_EVENT_NAME is : push</span><br><span class="line">GITHUB_EVENT_PATH is : /home/runner/work/_temp/_github_workflow/event.json</span><br><span class="line">GITHUB_WORKSPACE is : /home/runner/work/api-test-demo/api-test-demo</span><br><span class="line">GITHUB_SHA is : 3eb054249e103ab3d8a85e23384472433b9815a8</span><br><span class="line">GITHUB_REF is : refs/heads/master</span><br><span class="line">GITHUB_HEAD_REF is :</span><br><span class="line">GITHUB_BASE_REF is :</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>可以观察到:GitHub 会保留<code>GITHUB_</code>环境变量前缀供GitHub内部使用。设置有 GITHUB_ 前缀的环境变量或密码将导致错误。</p>
</blockquote>
<h3 id="3-自定义环境变量"><a href="#3-自定义环境变量" class="headerlink" title="3. 自定义环境变量"></a>3. 自定义环境变量</h3><p>默认的环境变量有时候，不足以满足我们的要求，这是就需要自定义一些，以便使用。最好定义在yml文件靠前的部分，一目了然。</p>
<p>环境变量可用于工作流程中的所有作业和步骤，还可以设置仅适用于作业或步骤的环境变量，需要注意环境变量<strong>作用域</strong>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">my</span> <span class="string">workflow</span> <span class="string">demo</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于该workflow的所有job和steps</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  SERVER:</span> <span class="string">production</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  env_usage_job1:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">job1</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">My</span> <span class="string">step</span> <span class="string">one</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo "this is job1"</span></span><br><span class="line"><span class="string">        echo $SERVER</span></span><br><span class="line"><span class="string"># 不能写成 echo $<span class="template-variable">&#123;&#123; SERVER &#125;&#125;</span></span></span><br><span class="line"><span class="string"></span><span class="attr">  second_job:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">job2</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">My</span> <span class="string">step</span> <span class="string">one</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo "this is job2"</span></span><br><span class="line"><span class="string">        echo $SERVER</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### job 级别的</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  job1:</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      FIRST_NAME:</span> <span class="string">Mona</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### steps 级别的</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">world</span> <span class="string">$FIRST_NAME</span> <span class="string">$middle_name</span> <span class="string">$Last_Name!</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      FIRST_NAME:</span> <span class="string">Mona</span></span><br><span class="line"><span class="attr">      middle_name:</span> <span class="string">The</span></span><br><span class="line"><span class="attr">      Last_Name:</span> <span class="string">Octocat</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>搞不懂为什么官网示例 steps 中的 env放在 run后面?</p>
</blockquote>
<h3 id="4-context-与-environment-variables-的关系"><a href="#4-context-与-environment-variables-的关系" class="headerlink" title="4. context 与 environment variables 的关系"></a>4. context 与 environment variables 的关系</h3><p>The github context contains information about the workflow run and the event that triggered the run. You can read most of the github context data in environment variables. For more information about environment variables, see “Using environment variables.”</p>
<ul>
<li>Todo</li>
</ul>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context" target="_blank" rel="noopener">GA Context</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions E07上下文和表达式语法</title>
    <url>/2020/04/01/Github-Actions-E07%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>如果没有这些内容，workflow照样可以运行起来；但利用上下文获取的信息和内置的表达式功能可以大大帮助我们轻松地完成更多的事情。另外，上下文和环境变量中的部分内容的目的是一样的，在选择时，用自己习惯的之一就好。</p>
</blockquote>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>可以使用表达式程序化设置工作流程文件中的变量和访问上下文。表达式可以是文字值、上下文引用或函数的任意组合。可以使用运算符组合文字、上下文引用和函数</p>
<p>在if条件条件下使用表达式时，不需要使用表达式语法，因为GitHub会自动将if条件条件计算为表达式。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if 条件的示例表达式</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="attr">  - uses:</span> <span class="string">actions/hello-world-javascript-action@master</span></span><br><span class="line"><span class="attr">    if:</span> <span class="string">&lt;expression&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-上下文"><a href="#2-上下文" class="headerlink" title="2. 上下文"></a>2. 上下文</h3><p>Contexts are a way to access information about workflow runs, runner environments, jobs, and steps. 上下文使用表达式语法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">上下文名称</th>
<th>类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">github</td>
<td>对象</td>
<td style="text-align:left">工作流程运行的相关信息。 更多信息请参阅 github 上下文。</td>
</tr>
<tr>
<td style="text-align:left">env</td>
<td>对象</td>
<td style="text-align:left">Contains environment variables set in a workflow, job, or step. For more information, see env context .</td>
</tr>
<tr>
<td style="text-align:left">job</td>
<td>对象</td>
<td style="text-align:left">当前执行的作业相关信息。 更多信息请参阅 job 上下文。</td>
</tr>
<tr>
<td style="text-align:left">steps</td>
<td>对象</td>
<td style="text-align:left">此作业中已经运行的步骤的相关信息。 更多信息请参阅 steps 上下文。</td>
</tr>
<tr>
<td style="text-align:left">runner</td>
<td>对象</td>
<td style="text-align:left">运行当前作业的运行程序相关信息。 For more information, see runner context.</td>
</tr>
<tr>
<td style="text-align:left">secrets</td>
<td>对象</td>
<td style="text-align:left">用于访问仓库中设置的密码。 For more information about secrets, see “Creating and using encrypted secrets.”</td>
</tr>
<tr>
<td style="text-align:left">strategy</td>
<td>对象</td>
<td style="text-align:left">用于访问配置的策略参数及当前作业的相关信息。 策略参数包括 fail-fast、job-index、job-total 和 max-parallel。</td>
</tr>
<tr>
<td style="text-align:left">matrix</td>
<td>对象</td>
<td style="text-align:left">用于访问为当前作业配置的矩阵参数。 例如，如果使用 os 和 node 版本配置矩阵构建，matrix 上下文对象将包含当前作业的 os 和 node 版本。</td>
</tr>
</tbody>
</table>
<h4 id="2-1-github-context"><a href="#2-1-github-context" class="headerlink" title="2.1 github context"></a>2.1 github context</h4><p>官网中也提到 <strong>你可以在环境变量中读取到大多数的 github 上下文</strong></p>
<p>作为表达式的一部分，您可以使用以下两种语法之一访问上下文信息。</p>
<p>索引语法：github[‘sha’]<br>属性解除参考语法：github.sha </p>
<blockquote>
<p>注意: 在使用敏感信息时，需要更加小心。在控制台日志输出时，Github 会遮掩sercrets。但是当导出或打印上下文时应谨慎行事。</p>
</blockquote>
<h4 id="2-2-env-context"><a href="#2-2-env-context" class="headerlink" title="2.2 env context"></a>2.2 env context</h4><p>env上下文包含在工作流，作业或步骤中设置的环境变量。 有关在工作流中设置环境变量的更多信息，可参见之前的文章–<a href="https://www.devops-tech.cn/2020/03/24/Github-Actions-E05%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/" target="_blank" rel="noopener">Github Actions E05环境变量</a></p>
<p>env上下文语法允许您在工作流文件中使用环境变量的值。 如果要在runner中使用环境变量的值，请使用runner操作系统的常规方法读取环境变量。</p>
<h4 id="2-3-job-context"><a href="#2-3-job-context" class="headerlink" title="2.3 job context"></a>2.3 job context</h4><p>job 上下文包含当前正在运行的作业相关信息。</p>
<h4 id="2-4-steps-context"><a href="#2-4-steps-context" class="headerlink" title="2.4 steps context"></a>2.4 steps context</h4><p>steps 上下文包含当前作业中已经运行的步骤相关信息。</p>
<h4 id="2-5-runner-context"><a href="#2-5-runner-context" class="headerlink" title="2.5 runner context"></a>2.5 runner context</h4><h4 id="2-6-secrets-context"><a href="#2-6-secrets-context" class="headerlink" title="2.6 secrets context"></a>2.6 secrets context</h4><h4 id="2-7-strategy-context"><a href="#2-7-strategy-context" class="headerlink" title="2.7 strategy context"></a>2.7 strategy context</h4><h4 id="2-8-matrix-context"><a href="#2-8-matrix-context" class="headerlink" title="2.8 matrix context"></a>2.8 matrix context</h4><p>各种上下文列表(还没看得到 strategy、matrix的使用)</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性名称</th>
<th>类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">github</td>
<td>object</td>
<td style="text-align:left">工作流程中任何作业或步骤期间可用的顶层上下文。</td>
</tr>
<tr>
<td style="text-align:left">github.event</td>
<td>object</td>
<td style="text-align:left">完整事件 web 挂钩有效负载。 更多信息请参阅“触发工作流程的事件”。</td>
</tr>
<tr>
<td style="text-align:left">github.event_path</td>
<td>string</td>
<td style="text-align:left">The path to the full event webhook payload on the runner.</td>
</tr>
<tr>
<td style="text-align:left">github.workflow</td>
<td>string</td>
<td style="text-align:left">工作流程的名称。 如果工作流程文件未指定 name，此属性的值将是仓库中工作流程文件的完整路径。</td>
</tr>
<tr>
<td style="text-align:left">github…</td>
<td></td>
<td style="text-align:left">github上下文还有很多，详情请见xx</td>
</tr>
<tr>
<td style="text-align:left">env</td>
<td>object</td>
<td style="text-align:left">此上下文针对作业中的每个步骤而改变。 您可以从作业中的任何步骤访问此上下文。</td>
</tr>
<tr>
<td style="text-align:left"><code>env.&lt;env name&gt;</code></td>
<td>string</td>
<td style="text-align:left">某一个具体环境变量的值。  (完)</td>
</tr>
<tr>
<td style="text-align:left">job</td>
<td>object</td>
<td style="text-align:left">此上下文针对工作流程运行中的每项作业而改变。 您可以从作业中的任何步骤访问此上下文。</td>
</tr>
<tr>
<td style="text-align:left">job.status</td>
<td>string</td>
<td style="text-align:left">作业的当前状态。 可能的值包括 success、failure 或 cancelled。</td>
</tr>
<tr>
<td style="text-align:left">job.container</td>
<td>object</td>
<td style="text-align:left">作业的容器相关信息。 有关容器的更多信息，请参阅“GitHub 操作 的工作流程语法”。</td>
</tr>
<tr>
<td style="text-align:left">job.container.id</td>
<td>string</td>
<td style="text-align:left">容器的 id。</td>
</tr>
<tr>
<td style="text-align:left">job…</td>
<td></td>
<td style="text-align:left">job 上下文还有很多，详情请见xx</td>
</tr>
<tr>
<td style="text-align:left">steps</td>
<td>object</td>
<td style="text-align:left">此上下文针对作业中的每个步骤而改变。 您可以从作业中的任何步骤访问此上下文。</td>
</tr>
<tr>
<td style="text-align:left">steps.<step id>.outputs</step></td>
<td>object</td>
<td style="text-align:left">为步骤定义的输出集。 更多信息请参阅“GitHub 操作 的元数据语法”。</td>
</tr>
<tr>
<td style="text-align:left">steps.<step id>.outputs.<output name></output></step></td>
<td>string</td>
<td style="text-align:left">特定输出的值。（完）</td>
</tr>
</tbody>
</table>
<h3 id="3-文字"><a href="#3-文字" class="headerlink" title="3. 文字"></a>3. 文字</h3><p>作为表达式的一部分，您可以使用 boolean、null、number 或 string 数据类型。 Boolean 文字不区分大小写，因此可以使用 true 或 True。</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th>文字值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean</td>
<td>true 或 false</td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td>null</td>
</tr>
<tr>
<td style="text-align:left">number</td>
<td>JSON 支持的任何数字格式。</td>
</tr>
<tr>
<td style="text-align:left">string</td>
<td>必须使用单引号。 使用单引号逸出文字单引号。</td>
</tr>
</tbody>
</table>
<h3 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h3><table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>( )</code></td>
<td>逻辑分组</td>
</tr>
<tr>
<td style="text-align:left"><code>[ ]</code></td>
<td>索引</td>
</tr>
<tr>
<td style="text-align:left"><code>.</code></td>
<td>属性解除参考</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td>非</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td>小于或等于</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td>大于或等于</td>
</tr>
<tr>
<td style="text-align:left"><code>==</code></td>
<td>等于</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td>不等于</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td>和</td>
</tr>
<tr>
<td style="text-align:left">&#124; &#124;</td>
<td>或</td>
</tr>
</tbody>
</table>
<p>GitHub 进行宽松的等式比较。</p>
<ul>
<li>如果类型不匹配，GitHub 强制转换类型为数字。 GitHub 使用这些转换将数据类型转换为数字：</li>
<li>一个 NaN 与另一个 NaN 的比较不会产生 true。</li>
<li>GitHub 在比较字符串时忽略大小写。</li>
<li>对象和数组仅在为同一实例时才视为相等。</li>
</ul>
<h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h3><p>GitHub 提供一组内置的函数，可用于表达式。 有些函数抛出值到字符串以进行比较。 GitHub 使用这些转换将数据类型转换为字符串。 函数有 contains、startsWith、 endsWith、 format、 join、 toJson、 hashFiles，还有一类作业状态检查函数，有 success、always、 cancelled、 failure。有些类似Jenkins中的post使用的一些判断条件，但github actions是使用于step中的。具体使用详情可见<a href="https://help.github.com/cn/actions/reference/context-and-expression-syntax-for-github-actions#functions" target="_blank" rel="noopener">官网</a></p>
<h3 id="6-对象过滤器"><a href="#6-对象过滤器" class="headerlink" title="6. 对象过滤器"></a>6. 对象过滤器</h3><p>可以使用 * 语法应用过滤条件并从集合中选择匹配的项目。</p>
<p>例如，考虑名为 fruits 的对象数组。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"apple"</span>, <span class="string">"quantity"</span>: 1 &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"orange"</span>, <span class="string">"quantity"</span>: 2 &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"pear"</span>, <span class="string">"quantity"</span>: 1 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>过滤条件 fruits.*.name 返回数组 [ “apple”, “orange”, “pear” ]</p>
<hr>
<p><strong>由于项目实践还不多，等我哪天需要用到这些功能，以完成一些特殊情况的需求时，再来一一举例。</strong></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Create Custom iTerm2 Window</title>
    <url>/2019/04/18/How-to-Create-Custom-iTerm2-Window/</url>
    <content><![CDATA[<h4 id="1-Open-iTerm-preferences-setting-打开偏好设置"><a href="#1-Open-iTerm-preferences-setting-打开偏好设置" class="headerlink" title="1.Open iTerm preferences setting (打开偏好设置)"></a>1.Open iTerm preferences setting (打开偏好设置)</h4><p><img src="/images/iterm_image_01.png" alt="iterm_image_01"></p>
<h4 id="2-New-add-a-profile-新加一个配置"><a href="#2-New-add-a-profile-新加一个配置" class="headerlink" title="2.New add a profile (新加一个配置)"></a>2.New add a profile (新加一个配置)</h4><p><img src="/images/iterm_image_02.png" alt="iterm_image_02"></p>
<h4 id="3-Setting-windows-name-etc-（定义名称，窗口高度，宽度等）"><a href="#3-Setting-windows-name-etc-（定义名称，窗口高度，宽度等）" class="headerlink" title="3.Setting windows name etc （定义名称，窗口高度，宽度等）"></a>3.Setting windows name etc （定义名称，窗口高度，宽度等）</h4><p><img src="/images/iterm_image_03.png" alt="iterm_image_03"></p>
<p><img src="/images/iterm_image_04.png" alt="iterm_image_04"></p>
<h4 id="4-define-hotkey-定义快捷键"><a href="#4-define-hotkey-定义快捷键" class="headerlink" title="4.define hotkey (定义快捷键)"></a>4.define hotkey (定义快捷键)</h4><p><img src="/images/iterm_image_05.png" alt="iterm_image_05"></p>
<p><img src="/images/iterm_image_06.png" alt="iterm_image_06"></p>
<h4 id="Finally-使用快捷键"><a href="#Finally-使用快捷键" class="headerlink" title="Finally 使用快捷键"></a>Finally 使用快捷键</h4><p>按 <strong>一次</strong> 出现窗口，<strong>再按一次</strong> 窗口消失。如果是多屏，可以在不同屏幕下调用出来，会话内容仍保持着。</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Import P12 file on Mac OS X with CLI</title>
    <url>/2019/11/22/Import-P12-file-on-Mac-OS-X-with-CLI/</url>
    <content><![CDATA[<h3 id="目的：通过命令行倒入p12证书"><a href="#目的：通过命令行倒入p12证书" class="headerlink" title="目的：通过命令行倒入p12证书"></a>目的：通过命令行倒入p12证书</h3><p>Apple为了安全，在ssh登录时，是不允许读取Keychains（钥匙串）的，所以 <strong>security unlock-keychain</strong> 这行命令就很重要了。比如在Pipeline构建打包前，先解锁Keychains。</p>
<h4 id="1-解锁"><a href="#1-解锁" class="headerlink" title="1.解锁"></a>1.解锁</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一： 命令行中不含密码，交互方式</span></span><br><span class="line">➜   security unlock-keychain /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db</span><br><span class="line">password to unlock /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db:</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者命令行中包含密码的方式</span></span><br><span class="line">➜   security unlock-keychain -p &lt;Mac_Login_PWD&gt; /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db</span><br><span class="line">➜   security list-keychains -s /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db</span><br></pre></td></tr></table></figure>
<h4 id="2-导入"><a href="#2-导入" class="headerlink" title="2.导入"></a>2.导入</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一： 命令行中不含密码，交互方式</span></span><br><span class="line"><span class="comment">#会有弹窗，提示输入 P12文件的密码</span></span><br><span class="line">➜   security import ~/Desktop/xxx.p12 -k /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db</span><br><span class="line">1 identity imported.</span><br><span class="line"><span class="comment">#或者命令行中包含密码的方式</span></span><br><span class="line">➜   security import ~/&lt;Your_Path&gt;/xxx.p12 -k /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db -P &lt;P12_Password&gt;</span><br><span class="line">1 identity imported.</span><br></pre></td></tr></table></figure>
<h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h4><p>删除<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##先展示证书，获取SHA1值; -p 可指定类型</span></span><br><span class="line">security find-identity -p codesigning /Users/&lt;Your_Name&gt;/Library/Keychains/login.keychain-db</span><br><span class="line"><span class="comment">##根据SHA1值删除对应的证书</span></span><br><span class="line">security delete-certificate -Z &lt;Your_SHA1&gt;</span><br></pre></td></tr></table></figure></p>
<p>更过 security 用法，查看 <code>security --help</code> 、<code>security find-identity --help</code></p>
<hr>
<p>More ref:<br><a href="https://www.cnblogs.com/pixy/p/4817579.html" target="_blank" rel="noopener">https://www.cnblogs.com/pixy/p/4817579.html</a></p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins Dashboard with Grafana and Prometheus </title>
    <url>/2019/04/22/Jenkins-Dashboard-with-Grafana-and-Prometheus/</url>
    <content><![CDATA[<h3 id="1-Go-to-“manage-Jenkins”-then-“manage-plugins”-and-install-“-Prometheus-metrics-plugin”"><a href="#1-Go-to-“manage-Jenkins”-then-“manage-plugins”-and-install-“-Prometheus-metrics-plugin”" class="headerlink" title="1.Go to “manage Jenkins” then “manage plugins” and install “ Prometheus metrics plugin”"></a>1.Go to “manage Jenkins” then “manage plugins” and install “ Prometheus metrics plugin”</h3><p>This plugin will expose an endpoint (default /prometheus) with metrics where a Prometheus Server can scrape data.</p>
<p><img src="/images/jenkins_dashboard_02.png" alt="jenkins_dashboard_02"></p>
<h3 id="2-Configure-Prometheus-to-scrape-metrics-from-Jenkins"><a href="#2-Configure-Prometheus-to-scrape-metrics-from-Jenkins" class="headerlink" title="2.Configure Prometheus to scrape metrics from Jenkins"></a>2.Configure Prometheus to scrape metrics from Jenkins</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: ‘jenkins’</span><br><span class="line">  metrics_path: /prometheus</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [‘Jenkins_Host:PORT’]</span><br></pre></td></tr></table></figure>
<p>you can go to your prometheus ,find some metrics to dispaly.</p>
<p><img src="/images/jenkins_dashboard_01.png" alt="jenkins_dashboard_01"></p>
<h3 id="3-Create-a-grafana-Dashboard"><a href="#3-Create-a-grafana-Dashboard" class="headerlink" title="3.Create a  grafana Dashboard"></a>3.Create a  grafana Dashboard</h3><p>dashboard link : <a href="https://grafana.com/dashboards/9964" target="_blank" rel="noopener">https://grafana.com/dashboards/9964</a></p>
<p>then go to the grafana website import json file :<br><img src="/images/jenkins_dashboard_03.png" alt="jenkins_dashboard_03"></p>
<p>you can search in the grafana dashboard (<a href="https://grafana.com/dashboards" target="_blank" rel="noopener">https://grafana.com/dashboards</a>)</p>
<h3 id="4-Customize-your-dashboard"><a href="#4-Customize-your-dashboard" class="headerlink" title="4.Customize your dashboard"></a>4.Customize your dashboard</h3><p>example:<br><img src="/images/jenkins_dashboard_04.png" alt="jenkins_dashboard_04"></p>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins Unicode icons</title>
    <url>/2019/07/04/Jenkins-Unicode-icons/</url>
    <content><![CDATA[<h5 id="Unicode-icons-list"><a href="#Unicode-icons-list" class="headerlink" title="Unicode icons list:"></a>Unicode icons list:</h5><p>“\u2776” = ❶<br>“\u27A1” = ➡<br>“\u2756” = ❖<br>“\u273F” = ✿<br>“\u2795” = ➕</p>
<p>“\u2713” = ✓<br>“\u2705” = ✅<br>“\u274E” = ❎<br>“\u2717” = ✗<br>“\u274C” = ❌</p>
<p>“\u2600” = ☀<br>“\u2601” = ☁<br>“\u2622” = ☢<br>“\u2623” = ☣<br>“\u2639” = ☹<br>“\u263A” = ☺</p>
<p>Example :<br>make stage name to a icon, or command message<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//declarative pipeline</span><br><span class="line">...</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'\u270A RAISED FIST'</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                script&#123;</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">"This is Stage One"</span></span><br><span class="line">                    currentBuild.displayName = <span class="string">"<span class="variable">$&#123;env.BUILD_NUMBER&#125;</span> -&gt; <span class="variable">$&#123;env.GIT_BRANCH&#125;</span>"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'\u273F Verify'</span> //u2700</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'\u2620 kulou'</span> //u2600</span><br></pre></td></tr></table></figure>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="http://www.fileformat.info/info/unicode/block/dingbats/list.htm" target="_blank" rel="noopener">More icons in the \u2700 Unicode Digbats block.</a></li>
<li><a href="https://www.w3schools.com/charsets/ref_utf_symbols.asp" target="_blank" rel="noopener">More icons in the \u2600 range</a></li>
</ul>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins  add timestamps</title>
    <url>/2019/07/04/Jenkins-add-timestamps/</url>
    <content><![CDATA[<p><strong>Timestamper plugin</strong>: Adds timestamps to the Console Output</p>
<h4 id="Method-One-use-options"><a href="#Method-One-use-options" class="headerlink" title="Method One: use options"></a>Method One: use options</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//declarative pipeline</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any     </span><br><span class="line">    options &#123; </span><br><span class="line">        timestamps () </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Example output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">16:21:40 + <span class="built_in">echo</span> 23</span><br><span class="line">16:21:40 23</span><br><span class="line">[Pipeline] sh</span><br><span class="line">16:21:41 + <span class="built_in">echo</span> master , test.BuiltInFunction/Devops_Tools/demo-from-git</span><br><span class="line">16:21:41 master , test.BuiltInFunction/Devops_Tools/demo-from-git</span><br><span class="line">[Pipeline] <span class="built_in">echo</span></span><br><span class="line">16:21:41 haha</span><br></pre></td></tr></table></figure>
<h4 id="Method-Two-use-wrap"><a href="#Method-Two-use-wrap" class="headerlink" title="Method Two: use wrap"></a>Method Two: use wrap</h4><pre><code class="bash">//declarative pipeline
pipeline {
    agent any   
    stages {
        stage(<span class="string">'Stage with timestamp'</span>){
            steps{
                sh <span class="string">"echo <span class="variable">${env.BUILD_NUMBER}</span>"</span>
                wrap([<span class="variable">$class</span>: <span class="string">'TimestamperBuildWrapper'</span>]) {
                  <span class="built_in">echo</span> <span class="string">"Done"</span>
                }
            }
        }
    }    
}
</code></pre>
<blockquote>
<p>默认是到分钟级别，到秒级别的需要自己定义格式,或者在菜单左侧，选择“Elapsed time”</p>
</blockquote>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://plugins.jenkins.io/timestamper" target="_blank" rel="noopener">Timestamper</a></li>
</ul>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins build trigger、logRotator、buildDiscarder etc</title>
    <url>/2019/04/11/Jenkins-build-trigger%E3%80%81logRotator%E3%80%81options/</url>
    <content><![CDATA[<p>Declarative Pipeline 与Job DSL的同一个功能的语法命令有些差异，不能直接套用，需要查对应的官方文档。 </p>
<h4 id="1-Jenkins-Declarative-Pipeline"><a href="#1-Jenkins-Declarative-Pipeline" class="headerlink" title="1.Jenkins Declarative Pipeline"></a>1.Jenkins Declarative Pipeline</h4><p>语法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//Jenkinsfile (Declarative Pipeline)</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123; label  <span class="string">'sbt'</span> &#125;</span><br><span class="line">    options&#123;</span><br><span class="line">        buildDiscarder(logRotator(numToKeepStr:<span class="string">'5'</span>))</span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">    &#125;</span><br><span class="line">    triggers&#123;</span><br><span class="line">       pollSCM(<span class="string">'H/2 * * * 1-5'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        MYBRANCH = <span class="string">"<span class="variable">$&#123;env.BRANCH_NAME&#125;</span>"</span></span><br><span class="line">        NEXUS_URL = <span class="string">'117.121.xxx.xx:443'</span></span><br><span class="line">        BASE_IMAGE_TAG = <span class="string">"<span class="variable">$&#123;NEXUS_URL&#125;</span>/<span class="variable">$&#123;GROUP_NAME&#125;</span>/<span class="variable">$&#123;SERVICE_NAME&#125;</span>"</span></span><br><span class="line">        BRANCH_IMAGE_TAG = <span class="string">"<span class="variable">$&#123;NEXUS_URL&#125;</span>/<span class="variable">$&#123;GROUP_NAME&#125;</span>/<span class="variable">$&#123;SERVICE_NAME&#125;</span>-<span class="variable">$&#123;MYBRANCH&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.1  triggers</strong></p>
<p><strong>1.2  buildDiscarder</strong></p>
<p><strong>1.3  disableConcurrentBuilds</strong></p>
<ul>
<li>daysToKeepStr: history is only kept up to this days.</li>
<li>numToKeepStr: only this number of build logs are kept.</li>
<li>artifactDaysToKeepStr: artifacts are only kept up to this days.</li>
<li>artifactNumToKeepStr: only this number of builds have their artifacts kept.</li>
</ul>
<p><strong>1.4 environment</strong></p>
<h4 id="2-Jenkins-Job-DSL"><a href="#2-Jenkins-Job-DSL" class="headerlink" title="2.Jenkins Job DSL"></a>2.Jenkins Job DSL</h4><p>语法如下<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipelineJob(<span class="string">"$&#123;AndroidFolder&#125;/nightly-build"</span>) &#123;</span><br><span class="line">  description <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;h3&gt;</span></span><br><span class="line"><span class="string"> Android Build for nightly build</span></span><br><span class="line"><span class="string">&lt;/h3&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">  <span class="comment">//@midnight This will run at some point between 0:00 and 2:59</span></span><br><span class="line">  triggers&#123;</span><br><span class="line">    cron <span class="string">'''TZ=Asia/Shanghai</span></span><br><span class="line"><span class="string">    @midnight</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">  &#125;</span><br><span class="line">  logRotator &#123;</span><br><span class="line">    artifactNumToKeep(<span class="number">30</span>)</span><br><span class="line">    numToKeep(<span class="number">30</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  throttleConcurrentBuilds &#123;</span><br><span class="line">    maxTotal(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  environmentVariables &#123;</span><br><span class="line">    env(<span class="string">'GIT_URL'</span>, gitUrl)</span><br><span class="line">    env(<span class="string">'GIT_BRANCH'</span>, gitBranch)</span><br><span class="line">    env(<span class="string">'GIT_CREDENTIAL_ID'</span>, <span class="string">'xxxx-git-ssh-private'</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>2.1 triggers</strong></p>
<p><strong>2.2  logRotator</strong></p>
<ul>
<li>artifactDaysToKeep: If specified, artifacts from builds older than this number of days will be deleted, but the logs, history, reports, etc for the build will be kept.</li>
<li>artifactNumToKeep: If specified, only up to this number of builds have their artifacts retained.</li>
<li>daysToKeep: If specified, build records are only kept up to this number of days.</li>
<li>numToKeep: If specified, only up to this number of build records are kept.</li>
</ul>
<p><strong>2.3 throttleConcurrentBuilds</strong><br>throttleConcurrentBuilds 需要单独给Jenkins安装插件 <strong>Throttle Concurrent Builds</strong> </p>
<p><strong>2.4 environmentVariables</strong></p>
<p><strong>More Ref:</strong></p>
<blockquote>
<ol>
<li><a href="https://jenkins.io/doc/book/pipeline/syntax/#available-options" target="_blank" rel="noopener">https://jenkins.io/doc/book/pipeline/syntax/#available-options</a></li>
<li><a href="https://jenkinsci.github.io/job-dsl-plugin/#path/pipelineJob-logRotator" target="_blank" rel="noopener">https://jenkinsci.github.io/job-dsl-plugin/#path/pipelineJob-logRotator</a></li>
<li><a href="https://jenkinsci.github.io/job-dsl-plugin/#path/pipelineJob-triggers" target="_blank" rel="noopener">https://jenkinsci.github.io/job-dsl-plugin/#path/pipelineJob-triggers</a></li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>backup specially with shell script or python</title>
    <url>/2019/05/21/Linux-backup-specially/</url>
    <content><![CDATA[<h3 id="需求：-备份目录，只备份新加的文件，不备份减少的文件"><a href="#需求：-备份目录，只备份新加的文件，不备份减少的文件" class="headerlink" title="需求： 备份目录，只备份新加的文件，不备份减少的文件"></a>需求： 备份目录，只备份新加的文件，不备份减少的文件</h3><p>分析： 通常备份目录用 <code>rsync</code> 就可以达到目的，但开发同学怕误操作，删除文件，于是提出这个 <em>只增不减</em> 的需求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">backUp</span></span>()&#123;</span><br><span class="line"><span class="built_in">local</span> sourceDir=<span class="variable">$1</span> <span class="comment">#需要备份的文件/目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> destDir=<span class="variable">$2</span> <span class="comment">#备份目的地</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$sourceDir</span>"</span> ] <span class="comment">#备份目录</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#如果目录尚未备份，则创建此目录</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$destDir</span>/<span class="variable">$sourceDir</span>"</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"创建目录\t<span class="variable">$sourceDir</span>"</span></span><br><span class="line">  mkdir -p <span class="string">"<span class="variable">$destDir</span>/<span class="variable">$sourceDir</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对目录中对每一个文件,递归调用此函数进行备份</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $(ls <span class="string">"<span class="variable">$sourceDir</span>"</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">backUp <span class="string">"<span class="variable">$sourceDir</span>/<span class="variable">$var</span>"</span> <span class="string">"<span class="variable">$destDir</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment">#备份文件</span></span><br><span class="line">  <span class="comment">#如果文件在尚未备份，则直接复制</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$destDir</span>/<span class="variable">$sourceDir</span>"</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"备份文件\t<span class="variable">$sourceDir</span>"</span></span><br><span class="line">  cp <span class="string">"<span class="variable">$sourceDir</span>"</span> <span class="string">"<span class="variable">$destDir</span>/<span class="variable">$sourceDir</span>"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#如果文件已存在，则比较两个文件对最后修改时间，如果文件已修改，则更新文件</span></span><br><span class="line">  lastModifi_backup=$(date -r <span class="string">"<span class="variable">$destDir</span>/<span class="variable">$sourceDir</span>"</span> +%s)</span><br><span class="line">  lastModifi_current=$(date -r <span class="string">"<span class="variable">$sourceDir</span>"</span> +%s)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$lastModifi_current</span>"</span> -gt <span class="string">"<span class="variable">$lastModifi_backup</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"更新文件\t<span class="variable">$sourceDir</span>"</span> </span><br><span class="line">    cp <span class="string">"<span class="variable">$sourceDir</span>"</span> <span class="string">"<span class="variable">$destDir</span>/<span class="variable">$sourceDir</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">backUp <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span></span><br></pre></td></tr></table></figure>
<p>运行脚本： <code>./backupSpecially.sh &quot;/date/originData&quot; &quot;/date/backup_dir&quot;</code></p>
<p>发现运行shell脚本有问题，于是大神帮我写了个python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2.7</span></span><br><span class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os,time,filecmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">differentFileCopy</span><span class="params">(sourcePath, targetPath)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(sourcePath):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(targetPath):</span><br><span class="line">        os.makedirs(targetPath)</span><br><span class="line">    <span class="keyword">for</span> fileName <span class="keyword">in</span> os.listdir(sourcePath):</span><br><span class="line">        absourcePath = os.path.join(sourcePath, fileName)</span><br><span class="line">        abstargetPath = os.path.join(targetPath, fileName)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(absourcePath):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(abstargetPath):</span><br><span class="line">                os.makedirs(abstargetPath)</span><br><span class="line">                differentFileCopy(absourcePath, abstargetPath)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(absourcePath):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(abstargetPath):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'copy %s to %s'</span> %(fileName,abstargetPath)</span><br><span class="line">                os.system(<span class="string">'cp'</span>+<span class="string">' '</span>+absourcePath+<span class="string">' '</span>+targetPath)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> filecmp.cmp(absourcePath,abstargetPath):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'copy %s to %s'</span> %(fileName,abstargetPath)</span><br><span class="line">                os.system(<span class="string">'cp'</span>+<span class="string">' '</span>+absourcePath+<span class="string">' '</span>+targetPath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    startTime = time.clock()</span><br><span class="line">    sourcePath = <span class="string">r"/date/originData"</span></span><br><span class="line">    targetPath = <span class="string">r"/date/Data_backupDir"</span></span><br><span class="line">    differentFileCopy(sourcePath, targetPath)</span><br><span class="line">    endTime = time.clock()</span><br><span class="line">    time_mi = endTime // <span class="number">60</span></span><br><span class="line">    time_s = endTime // <span class="number">1</span> % <span class="number">60</span></span><br><span class="line">    time_ms = ((endTime * <span class="number">100</span>) // <span class="number">1</span>) % <span class="number">100</span></span><br><span class="line">    print(<span class="string">"总用时:%02.0f:%02.0f:%2.0f"</span> % (time_mi, time_s, time_ms))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins trigger downstream job</title>
    <url>/2019/05/30/Jenkins-trigger-downstream-job/</url>
    <content><![CDATA[<p>origin_job 触发 second_job</p>
<p>origin_job 如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//declarative pipeline</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any </span><br><span class="line">    </span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Stage One'</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                sh <span class="string">"echo *** This is Stage One ***"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">'Stage Two'</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                sh <span class="string">"echo $&#123;env.BUILD_NUMBER&#125;"</span></span><br><span class="line">                sh <span class="string">"echo $&#123;env.NODE_NAME&#125; , $&#123;env.JOB_NAME&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">"Invoke second job without parameters"</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                build <span class="string">job:</span> <span class="string">'second_job'</span></span><br><span class="line">                sleep <span class="number">30</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        stage(<span class="string">"Invoke second job with parameters"</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                build <span class="string">job:</span> <span class="string">'second_job'</span>,</span><br><span class="line"><span class="symbol">                parameters:</span>[</span><br><span class="line">                    string(<span class="string">name:</span><span class="string">'Para1'</span>,<span class="string">value:</span>String.valueOf(JOB_NAME)),</span><br><span class="line">                    string(<span class="string">name:</span><span class="string">'Para2'</span>,<span class="string">value:</span>String.valueOf(BUILD_NUMBER))</span><br><span class="line">                ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>second_job </p>
<p>点击““参数化构建””手动添加 两个参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any </span><br><span class="line">    </span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Stage One'</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                sh <span class="string">"echo *** This is <span class="variable">$&#123;env.JOB_NAME&#125;</span> ,and We are stage one ***"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    stage(<span class="string">'Echo origin_job para'</span>)&#123;</span><br><span class="line">        steps&#123;</span><br><span class="line">                sh <span class="string">"echo <span class="variable">$&#123;env.Para1&#125;</span>"</span></span><br><span class="line">                sh <span class="string">"echo <span class="variable">$&#123;env.Para2&#125;</span>"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 101 :Intro</title>
    <url>/2019/07/04/Makefile-101-Intro/</url>
    <content><![CDATA[<p>新建文件 ，文件名 makefile 或 Makefile</p>
<p>格式：<br>target: dependencies</p>
<p><tab> command</tab></p>
<p>目标：要生成的目标文件<br>依赖：目标文件由哪些文件生成<br>命令：通过执行该命令由依赖文件生成目标</p>
<p>工作原理：</p>
<p>1、若想生成目标，检查规则中的依赖条件是否存在，如不存在，则寻找是否有规则用来生成该依赖文件</p>
<p>2、检查规则中的目标是否需要更新，必须先检查它的所有依赖，依赖中有任一个被更新，则目标必须更新</p>
<p>分析各个目标和依赖之间的关系<br>根据依赖关系自底向上执行命令<br>根据修改时间比目标新，确定更新<br>如果目标不依赖任何条件，则执行对应命令，以示更新</p>
<h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h5><p>gcc test.c -o test // 根据test.c文件，编译一个 test的可执行文件出来</p>
<p>➡ 用makefile来完成这一过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>: test.c</span><br><span class="line">    gcc test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   make</span><br><span class="line">gcc hello.c -o hellofrommakefile</span><br></pre></td></tr></table></figure></p>
<h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">main: main.c tool.o</span><br><span class="line">    gcc main.c tool.o -o main</span><br><span class="line"></span><br><span class="line">tool.o: tool.c</span><br><span class="line">    gcc -c tool.c</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">    rm *.o main</span><br></pre></td></tr></table></figure>
<p>执行命令 make</p>
<p>执行 make clean</p>
<h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h5><p>执行所有的target</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">all: stage1 stage2</span><br><span class="line"></span><br><span class="line">stage1:</span><br><span class="line">        @<span class="built_in">echo</span> <span class="string">"I am stage1"</span></span><br><span class="line"></span><br><span class="line">stage2:</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"I am stage2"</span></span><br></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  example_stages make</span><br><span class="line">I am stage1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I am stage2"</span></span><br><span class="line">I am stage2</span><br></pre></td></tr></table></figure></p>
<h5 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4:"></a>Example 4:</h5><h5 id="other-FAQs"><a href="#other-FAQs" class="headerlink" title="other FAQs:"></a>other FAQs:</h5><ul>
<li>编译的时候一直报makefile:29: *** missing separator错误。最后定位到是语法错了。输入的tab键被编辑器自动替换成4个空格了，导致一直报错;vim下可以这样写入tab键：<code>ctr+v+i</code>,会写入一个tab键</li>
</ul>
<ul>
<li>对每个 .c 文件进行编译，生成 .o 文件，然后对几个 .o 文件联合编译生成可执行的文件</li>
</ul>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://makefiletutorial.com/" target="_blank" rel="noopener">https://makefiletutorial.com/</a></li>
<li><a href="https://www.mycode.net.cn/platform/linux-unix/1499.html" target="_blank" rel="noopener">https://www.mycode.net.cn/platform/linux-unix/1499.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/02/make.html</a></li>
<li><a href="https://blog.csdn.net/chinawangfei/article/details/42125241" target="_blank" rel="noopener">https://blog.csdn.net/chinawangfei/article/details/42125241</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 102:Variable</title>
    <url>/2019/07/05/Makefile-102-Variable/</url>
    <content><![CDATA[<h5 id="Variables-common-use"><a href="#Variables-common-use" class="headerlink" title="Variables (common use)"></a>Variables (common use)</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin_file = hello.c</span><br><span class="line"></span><br><span class="line">hellofrommakefile: $(origin_file)</span><br><span class="line">	gcc hello.c -o hellofrommakefile</span><br></pre></td></tr></table></figure>
<h5 id="Automatic-Variables-自动变量"><a href="#Automatic-Variables-自动变量" class="headerlink" title="Automatic Variables(自动变量)"></a>Automatic Variables(自动变量)</h5><p>makefile 中有一些预定义的变量，你可以理解它像是 C 语言中的一些关键字，分别有不同的意义，我们列举几个常用的自动变量，<a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables" target="_blank" rel="noopener">其他还有很多</a></p>
<p>$@：在命令中使用，表示规则中的目标<br>$&lt;：在命令中使用，表示规则中的第一个条件<br>$^：在命令中使用，表示规则中的所有条件，组成一个列表，以空格隔开，如果这个列表中有重复的项则消除重复项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hellofrommakefile: hello.c</span><br><span class="line">	gcc hello.c -o hellofrommakefile</span><br></pre></td></tr></table></figure>
<p>等价于<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hellofrommakefile: hello.c</span><br><span class="line">	gcc hello.c -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure></p>
<h5 id="mplicit-Variables-内置变量"><a href="#mplicit-Variables-内置变量" class="headerlink" title="mplicit Variables(内置变量)"></a>mplicit Variables(内置变量)</h5><p>Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html" target="_blank" rel="noopener">ta</a>。</p>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="http://www.chiark.greenend.org.uk/doc/make-doc/make.html/Using-Variables.html" target="_blank" rel="noopener">http://www.chiark.greenend.org.uk/doc/make-doc/make.html/Using-Variables.html</a></li>
<li><a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html" target="_blank" rel="noopener">https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 103: all &amp; clean</title>
    <url>/2019/07/05/Makefile-103-all-clean/</url>
    <content><![CDATA[<h5 id="makefile-中的all"><a href="#makefile-中的all" class="headerlink" title="makefile 中的all"></a>makefile 中的all</h5><p>因为 makefile 的执行流程是找到第一个目标作为最终生成的目标，如果顺序错乱了，makefile 就可能报错，all 方法就是解决这个问题而存在的，并且，all 方法可以让一个 makefile 生成多个目标。示例如下：</p>
<h5 id="makefile-中的-clean"><a href="#makefile-中的-clean" class="headerlink" title="makefile 中的 clean"></a>makefile 中的 clean</h5><p>make clean 命令是用来清除目录下临时文件的，执行 clean 这个目标时，不需要任何依赖项，也就意味着，如果目录下有一个文件名为 clean 的话，执行 make clean 命令时会判断这个目标所依赖的内容是否有变化，如有变化则重新生成，无变化则跳过，而恰恰我们这个 clean 没写依赖规则！这将导致 clean 无论如何都不会被执行。解决这个问题的办法就是将 clean 方法声明为一个伪目标，做就就是让 clean 无论如何都更新，同样我们生成的 all 目标也可能会出现这种情况，所以我们将它们两个都声明为 <strong>伪目标</strong>，方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clean:</span><br><span class="line">    -rm -rf $(obj) main app </span><br><span class="line"></span><br><span class="line">.PHONY:clean all</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 104: Help</title>
    <url>/2019/07/05/Makefile-104-Help/</url>
    <content><![CDATA[<p>help</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  example_stages cat Makefile</span><br><span class="line">.DEFAULT_GOAL := <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>:	<span class="comment">## show this help</span></span><br><span class="line">	@fgrep -h <span class="string">"##"</span> $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e <span class="string">'s/\\$$//'</span> | sed -e <span class="string">'s/##//'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stage1:  <span class="comment">## This message will show up when typing 'make help'</span></span><br><span class="line">	@<span class="built_in">echo</span> I am stage1</span><br><span class="line"></span><br><span class="line">stage2:</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"I am stage2"</span></span><br><span class="line">➜  example_stages make <span class="built_in">help</span></span><br><span class="line"><span class="built_in">help</span>:	 show this <span class="built_in">help</span></span><br><span class="line">stage1:   This message will show up when typing <span class="string">'make help'</span></span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   make <span class="built_in">help</span></span><br><span class="line"><span class="built_in">help</span>:	 show this <span class="built_in">help</span></span><br><span class="line">stage1:   This message will show up when typing <span class="string">'make help'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>PPT Tools</title>
    <url>/2019/08/25/PPT-Tools/</url>
    <content><![CDATA[<p>TL;DR<br>  一个好的PPT，全靠自己一块一块地“搬砖”当然可以制作的很精良，但时间也就流逝了许多，介绍一些可能用到的工具，简化这些制作的步骤。</p>
<ul>
<li>Coolors 网站配色 <a href="https://coolors.co/" target="_blank" rel="noopener">https://coolors.co/</a></li>
<li>Lorem Ipsum 假文生成器  <a href="https://www.lipsum.com/feed/html" target="_blank" rel="noopener">https://www.lipsum.com/feed/html</a></li>
<li>QR Code 產生器 <a href="https://qr.ioi.tw/zh/" target="_blank" rel="noopener">https://qr.ioi.tw/zh/</a></li>
<li>图片转文字<ul>
<li><a href="http://www.i2ocr.com/" target="_blank" rel="noopener">http://www.i2ocr.com/</a>  (英文)</li>
<li><a href="http://www.pdfdo.com/image-to-txt.aspx" target="_blank" rel="noopener">http://www.pdfdo.com/image-to-txt.aspx</a> （中文）</li>
</ul>
</li>
<li><p>词云图工具 </p>
<ul>
<li><a href="https://wordart.com/create" target="_blank" rel="noopener">https://wordart.com/create</a> （中文要用Noto Sans S Chinese）</li>
<li><a href="https://www.weiciyun.com/create.html" target="_blank" rel="noopener">https://www.weiciyun.com/create.html</a> （国产，还要登录）</li>
</ul>
</li>
<li><p>各种转换 <a href="https://convertio.co/" target="_blank" rel="noopener">https://convertio.co/</a></p>
</li>
<li>Icon 小图标网站<ul>
<li><a href="https://www.flaticon.com/" target="_blank" rel="noopener">https://www.flaticon.com/</a></li>
<li><a href="https://remixicon.com/" target="_blank" rel="noopener">https://remixicon.com/</a></li>
<li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></li>
</ul>
</li>
<li>智能识别线条，画图工具  <a href="https://www.autodraw.com/" target="_blank" rel="noopener">https://www.autodraw.com/</a></li>
<li>在线消除背景  <a href="https://www.remove.bg/" target="_blank" rel="noopener">https://www.remove.bg/</a></li>
<li>免费背景音乐  <a href="https://www.youtube.com/audiolibrary/music?nv=1" target="_blank" rel="noopener">https://www.youtube.com/audiolibrary/music?nv=1</a></li>
<li>炫酷的几何图形  <a href="http://weavesilk.com/" target="_blank" rel="noopener">http://weavesilk.com/</a></li>
<li><p>炫酷图形工具集合 <a href="https://wangyasai.github.io/designtools.html" target="_blank" rel="noopener">https://wangyasai.github.io/designtools.html</a> （包含黑客背景、speed line等）</p>
<ul>
<li><a href="https://github.com/vkarampinis/awesome-icons" target="_blank" rel="noopener">https://github.com/vkarampinis/awesome-icons</a> 各种 + 在线编辑svg格式，拖动、改变颜色等 <a href="https://svg.wxeditor.com/" target="_blank" rel="noopener">https://svg.wxeditor.com/</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>Icons made by Smashicons、iconixar、Vitaly Gorbachev、Vectors Market from <a href="http://www.flaticon.com" target="_blank" rel="noopener">www.flaticon.com</a></p>
</blockquote>
<p><a href="http://smallpdf.com/cn" target="_blank" rel="noopener">http://smallpdf.com/cn</a></p>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>PPT</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 105: syntax</title>
    <url>/2019/07/05/Makefile-105-syntax/</url>
    <content><![CDATA[<h5 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h5><p>井号（#）在Makefile中表示注释。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line">result.txt: source.txt</span><br><span class="line">    <span class="comment"># 这是注释</span></span><br><span class="line">    cp source.txt result.txt <span class="comment"># 这也是注释</span></span><br></pre></td></tr></table></figure>
<h5 id="5-2-回声（echoing）"><a href="#5-2-回声（echoing）" class="headerlink" title="5.2 回声（echoing）"></a>5.2 回声（echoing）</h5><p><code>@</code> suppress the normal ‘echo’ of the command that is executed.<br>正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>:</span><br><span class="line">    <span class="comment"># 这是测试</span></span><br><span class="line">执行上面的规则，会得到下面的结果。</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 这是测试</span></span><br></pre></td></tr></table></figure>
<p>在命令的前面加上@，就可以关闭回声。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>:</span><br><span class="line">    @<span class="comment"># 这是测试</span></span><br></pre></td></tr></table></figure></p>
<h5 id="5-3-减号"><a href="#5-3-减号" class="headerlink" title="5.3 减号-"></a>5.3 减号-</h5><p><code>-</code> means ignore the exit status of the command that is executed (normally, a non-zero exit status would stop that part of htat build) </p>
<p>通常情况下，Makefile在执行到某一条命令时，如果返回值不正常，就会推出当前make进程，通常结合 rm ,mkdir 命令使用，（空文件或者文件不存在都会返回错误）</p>
<p>这个符号的目的就是如果这条命令执行失败了继续执行，不影响后续命令的执行。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">➜   cat Makefile</span><br><span class="line"></span><br><span class="line">all: stage1 stage2</span><br><span class="line"></span><br><span class="line">stage1: ;@<span class="built_in">echo</span> <span class="string">"run stage1....."</span>;</span><br><span class="line">	@<span class="built_in">echo</span> <span class="string">"I am stage1"</span></span><br><span class="line">	-cat  xxx</span><br><span class="line">stage2:</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"I am stage2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">➜   make</span><br><span class="line">run stage1.....</span><br><span class="line">I am stage1</span><br><span class="line">cat xxx</span><br><span class="line">cat: xxx: No such file or directory</span><br><span class="line">make: [stage1] Error 1 (ignored)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I am stage2"</span></span><br><span class="line">I am stage2</span><br></pre></td></tr></table></figure></p>
<h5 id="5-4-加号"><a href="#5-4-加号" class="headerlink" title="5.4 加号+"></a>5.4 加号+</h5><p><code>+</code> means execute this comand under make -n (when commands are not normally executed)<br>对于命令行前面加上加号+的含义，表明在使用 make -n 命令的时候，其他行都只是显示命令而不执行，只有+ 行的才会被执行。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Ping Or fping</title>
    <url>/2019/05/28/Ping-Or-fping/</url>
    <content><![CDATA[<p>ping 命令我们比较常用，但是这里要介绍下 fping 命令。 fping 比 ping 拥有更多的特性。fping 默认没有包含在Linux发行版中。</p>
<blockquote>
<p>ping 命令使用Internet控制协议（Internet Control Message Protocol,ICMP）中的echo 分组检验网络上两台主机之间的连通性。</p>
</blockquote>
<p>e.g.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> 192.168.0.&#123;1..255&#125; ;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    ping <span class="variable">$ip</span> -c 2 &amp;&gt; /dev/null ;</span><br><span class="line"></span><br><span class="line">    uf [ $? -eq 0 ];</span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$ip</span> is alive</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>工作原理：</p>
<ul>
<li><code>&amp;&gt; /dev/null</code> 用于将 stderr stdout 重定向到 <code>/dev/nul</code> ,使终端不会出现任何输出</li>
<li>脚本用 <code>$?</code> 获取退出状态。如果顺利退出，退出状态为0，否则为非0值。</li>
</ul>
<h5 id="fping"><a href="#fping" class="headerlink" title="fping"></a>fping</h5><p>fping 可以为多个IP地址生成 ICMP 分组，然后等待回应。其运行速度要比上面的脚本快得多。</p>
<p>选项如下：</p>
<ul>
<li>选项 <code>-a</code> 指定显示出所有活动主机的IP地址；</li>
<li>选项 <code>-u</code> 指定显示出所有不可达的主机地址；</li>
<li>选项 <code>-g</code> 指定从 “IP地址/子网掩码；记法或者 “IP地址范围”记法中生成一组地址</li>
</ul>
<p>e.g.</p>
<p><code>fping -a 192.168.0.1/24 -g</code></p>
<p><code>fping -a 192.168.0.1 192.168.1.255 -g</code></p>
<p><code>fping -a 192.168.0.1  192.168.0.5 192.168.0.6</code></p>
<p><code>fping -a &lt; ip.list</code> 从列表文件 sdtin 中接收</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 106: Functions</title>
    <url>/2019/07/05/Makefile-106-Functions/</url>
    <content><![CDATA[<p>（1）shell 函数</p>
<p>（2）wildcard 函数</p>
<p>（3）subst 函数</p>
<p>（4）patsubst函数</p>
<p>（5）替换后缀名</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Q Movie List</title>
    <url>/2019/05/12/Q-Movie-List/</url>
    <content><![CDATA[<p>Q Movie List </p>
<h3 id="1-《夜以继日》-2018"><a href="#1-《夜以继日》-2018" class="headerlink" title="1.《夜以继日》(2018)"></a>1.《夜以继日》(2018)</h3><p>原名：Asako I &amp; II<br>导演：滨口龙介<br>主演: 东出昌大 / 唐田英里佳</p>
<p><img src="/images/movie_Asako_I_II_01.png" alt="Asako_I_II"></p>
<center> 夜以继日 男女主 </center>

<p>两个相貌相同的男人，一个拥有着迷人的魅力，随性的坏男孩；一个是朴实无华，处处为别人考虑的体贴男孩。恋爱中的理想和现实的选择被表现淋漓尽致，深入人心。没有对错，明白什么是生活，什么是可贵的。</p>
<blockquote>
<p>日本电影总把三观不太正的想法表现得很有道理的样子 😓</p>
</blockquote>
<h3 id="2-《骡子》-2018"><a href="#2-《骡子》-2018" class="headerlink" title="2. 《骡子》(2018)"></a>2. 《骡子》(2018)</h3><p>原名：The Mule‎<br>导演：克林特·伊斯特伍德<br>主演： 克林特·伊斯特伍德</p>
<p><img src="/images/movie_mule_01.png" alt="Mule"></p>
<center> 男主在公路上 </center><br>男主与妻子去世前的对话：<br><br>&gt; Mary: You were the love of my life, and the pain of my life. I need you to know, it’s all the world to me that you’re here.<br>&gt; <strong>Earl</strong>: I love you, Mary.<br>&gt; Mary: More today than yesterday?<br>&gt; <strong>Earl</strong>: But not as much as tomorrow.<br><br>自己的生活还是家庭？男主一生大部分时间都用在自己的黄花菜上，或者自己的老兵俱乐部等，家人对他无不责备。但是最后男主在妻子的最后一次请求中放下手中的活儿（运送毒品），选择回到妻子身边，也得到了女儿的原谅。<br><br>### 3. 《来的都是客》(1990)<br>导演：马绍惠<br>主演： 赵本山、巩汉林<br><br><img src="/images/movie_guest.png" alt="Whoever Comes Is a Guest"><br><center> 90年代，年轻的两位男主</center>

<p>上世纪90年代的一部<strong>喜剧</strong>、剧情片，反讽当时的吃喝风。故事情节流畅、很贴近生活。我最早知道<strong>赵本山</strong>是春晚的小品上，但没有想到过他出演了很多电影，而且是他年轻力壮的时候，当年的赵本山脸上还没有褶子，演技也在线。</p>
<blockquote>
<p>适合长辈观看，放人开怀大笑、精神放松，把我妈逗乐了。</p>
</blockquote>
<h3 id="4-《回到被爱的每一天》-2015"><a href="#4-《回到被爱的每一天》-2015" class="headerlink" title="4. 《回到被爱的每一天》 (2015)"></a>4. 《回到被爱的每一天》 (2015)</h3><p>导演、编剧: 何平<br>主演: 王佳佳、张译 </p>
<p><img src="/images/movie_The_Promised_Land.png?30" alt="The Promised Land"></p>
<center> 海报 </center>

<p>一部较文艺、朴素的电影，没有大起大落，只是慢慢的讲述一个故事，看的时候要有耐心。电影的色调，搭配拍摄地的风景，使画面看起来有一种平静的美。大城市、小家乡，都是年轻人的选择，但什么样的选择更好只有自己的内心才能感觉得到。在商业电影盛行的前几年，这样纯粹的电影算是难得一见的吧。</p>
<h3 id="5-《只有芸知道》（2019）"><a href="#5-《只有芸知道》（2019）" class="headerlink" title="5. 《只有芸知道》（2019）"></a>5. 《只有芸知道》（2019）</h3><p>导演: 冯小刚<br>主演: 黄轩,杨采钰,徐帆</p>
<p><img src="/images/movie_only_cloud_knows.png?30" alt="only cloud knows "></p>
<center> 简单的新婚 </center>

<p>爱情片，人物不多，风景很美，一件件往事慢慢回忆给我们，两个人在异国他乡找到彼此，又相伴十几年，都愿意为对方付出。记录一句台词，“有了房子，有了生意，就是给她最大的安全感。”<br>“其实房子和生意都不能给我安全感，只有你可以。” “我想和Simon换个活法”</p>
<p>林太的武汉话地道有味，也是在少见的异国他乡爱情片中(印象中北京话、四川话更多)。而此次的疫情恐怕让全中国都熟悉了一下武汉话，也让全世界都了解了武汉这个地名。</p>
<p>才发现这是2019年的电影，但似乎市场上影响不大，可能是影院排片较少，也幸好影片中商业化较少。另外，黄轩的演技值得肯定，以前一直觉得他眼神有问题，但是这部电影挺好的。</p>
<h3 id="6-《丈夫得了抑郁症》（2011）"><a href="#6-《丈夫得了抑郁症》（2011）" class="headerlink" title="6. 《丈夫得了抑郁症》（2011）"></a>6. 《丈夫得了抑郁症》（2011）</h3><p>导演: 佐佐部清<br>主演: 宫崎葵,堺雅人</p>
<p><img src="https://s1.ax1x.com/2020/04/04/G0uDJA.png" alt="G0uDJA.png"></p>
<center> 因为抑郁症，男主感到很自责 </center>

<p>一场抑郁症，伴随是中长期的，身陷其中的男主处于一中特殊的痛苦、无力的生活中。随着时间的推移，作为妻子的女主也终于认识到生活的巨大改变。同时，自身也承担了更多事情：做饭、打扫、买菜、努力工作等等。男主从最开始为了妻子而治病，改变为为了自己而治病。</p>
<p>女主厚着脸皮请求编辑给予工作机会，也同时说出了丈夫得了抑郁症的事情。而变得释怀，不介意他人的想法。</p>
<p>最后两人在“同窗会”上的一段发言算是一年的总结，也让两人对婚姻有了更深的认识和理解。</p>
<p><strong>生活甜蜜幸福的时候、职场得意的时候，不妨也踩一下刹车，或者停车，看一下反面类型的电影，给予自己冷静下来的机会，审时度势，未雨绸缪。</strong></p>
<p>当然，电影中有很多地方并不值得严谨地推敲，现实中这样美好的结局恐怕凤毛菱角。但个人觉得不影响电影想表达的内容，以及给人以正能量的暗示。</p>
<p>有很多台词还是值得回味的，有点儿生活哲学、人生哲学的样子，比如<br>“能一直完好无所便是价值所在”<br>“如果努力很痛苦，那就别努力了”<br>“人不努力也是可以的”<br>“不去想忧郁症的原因，而是想它的意义。”</p>
<p>其他话题：<strong>婚礼同学会</strong>，这个同学会挺有意思的，就是在同一个教堂结婚的夫妇组成的同学；<strong>失业保险</strong></p>
]]></content>
      <tags>
        <tag>Q List</tag>
      </tags>
  </entry>
  <entry>
    <title>RCA(根本原因分析)</title>
    <url>/2019/10/08/RCA-%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>  根本原因分析（Root cause analysis,RCA）方法是明确事件或几近错失的决定性“根本”原因，并采取适当的措施避免问题再次发生。这是一个迭代的过程，会一直持续，直到找出所有组织要素，或者知道已经处理完所有数据。</p>
<blockquote>
<p>《Effective DevOps》(中文版) P65</p>
</blockquote>
<h3 id="方法一：5-Why"><a href="#方法一：5-Why" class="headerlink" title="方法一：5 Why"></a>方法一：5 Why</h3><p>  5why分析法是指对同一个问题，进行连续的提问，可能是3次，可能是5次，也可能是10次，直到能发现最根本的原因为止。</p>
<p><strong>5 why详细应用步骤</strong></p>
<p>一、把握现状</p>
<ul>
<li>1.识别问题。 问：我知道什么？</li>
<li>2.澄清问题。 问：实际发生了什么？</li>
<li>3.分解问题。 问：关于这个问题，我还应该知道什么？</li>
<li>4.查找原因要点。 问：我们需要知道什么以解决问题？</li>
<li>5.掌握问题倾向。 问：什么时间？多大频次？</li>
</ul>
<p>二、原因调查</p>
<ul>
<li>6.识别和确认异常事件的直接原因。 问：这个问题为什么会发生？</li>
<li>7.使用5why调查法来建立一个通向根本原因的关系链 问：为什么xxx会发生？</li>
</ul>
<p>三、问题纠正（验证有效性）</p>
<ul>
<li>8.采取明确措施，验证方案是否有效。 问： 方案是否有效，情况如何？</li>
</ul>
<p><strong>5why应用要点</strong>  </p>
<ul>
<li>推论要客观、理性；</li>
<li>避免围绕问题本身，避免责任推卸；</li>
<li>注意层次之间的关系，不要跳步；</li>
<li>分析要充分，以便找出根本原因；</li>
<li>要对分析后的方案确认，并通过现场分析观察，然后改善；</li>
</ul>
<p><strong><a href="https://zhuanlan.zhihu.com/p/28506456" target="_blank" rel="noopener">5why案例</a></strong></p>
<h3 id="方法二：鱼骨图"><a href="#方法二：鱼骨图" class="headerlink" title="方法二：鱼骨图"></a>方法二：鱼骨图</h3><p><strong>什么是鱼骨图</strong></p>
<p>  鱼骨图又名“因果分析法”，是由日本管理大师石川馨先生所发展出来的，因此又被称为“石川图”。鱼骨图是一种透过现象看本质，从而发现问题“根本原因”的分析方法。这种因果图可以帮助团队以可视化的方式分析原因，并将原因归类，找出差异来源，发现不同来源之间的关系，从而对过程行为有深层次的了解。分为问题型、原因型及对策性型鱼骨分析等三种，具有简捷、实用、直观等特点。最初，鱼骨图被用于质量管理领域。</p>
<p><strong>如何制作鱼骨图</strong></p>
<p>制作鱼骨图分为两个步骤： 分析问题原因/结构，绘制鱼骨图</p>
<h4 id="Step1-分析问题原因-结构"><a href="#Step1-分析问题原因-结构" class="headerlink" title="Step1: 分析问题原因/结构"></a>Step1: 分析问题原因/结构</h4><table>
<thead>
<tr>
<th style="text-align:left">No</th>
<th style="text-align:left">Context</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">步骤</td>
<td style="text-align:left">a. 针对问题点选择层别方法（如人机料法环等） <br>b.通过头脑风暴，分别对各类别找出所有可能因素  <br>c.将找出的各要素进行归类、整理，明确其从属关系 <br> d. 分析选取重要因素 <br>e. 检查各要素的描述方法，确保语法简明、意思明确</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">要点</td>
<td style="text-align:left">a. 确定大要因（大骨）<br>b. 大因素必须用中性词描述（不说明好坏），中、小因素必须使用价值判断（如…不良）<br>c.头脑风暴时，尽可能多的找出所有可能原因，尽量客观描述 <br>d. 中因素跟特性值，小因素跟中因素有直接的原因-问题关系，小因素应该分析至可以直接下对策 <br>e. 如果某种原因可同时归属于两种或两种以上因素，庆关联性最强者最准 <br>f. 选取重要因素时，不要超过7项，且应该标识在最末端</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="Step2-绘制鱼骨图"><a href="#Step2-绘制鱼骨图" class="headerlink" title="Step2: 绘制鱼骨图"></a>Step2: 绘制鱼骨图</h4><ul>
<li>1．由问题的负责人召集与问题有关的人员组成一个工作组(work group)，该组成员必须对问题有一定深度的了解。</li>
<li>2．问题的负责人将拟找出原因的问题写在黑板或白纸右边的一个三角形的框内，并在其尾部引出一条水平直线，该线称为鱼脊。</li>
<li>3．工作组成员在鱼脊上画出与鱼脊成45°角的直线，并在其上标出引起问题的主要原因，这些成45°角的直线称为大骨。</li>
<li>4．对引起问题的原因进一步细化，画出中骨、小骨……，尽可能列出所有原因</li>
<li>5．对鱼骨图进行优化整理。</li>
<li>6．根据鱼骨图进行讨论。</li>
</ul>
<p>如何使用？？</p>
<p><strong><a href="https://wiki.mbalib.com/wiki/%E9%B1%BC%E9%AA%A8%E5%9B%BE" target="_blank" rel="noopener">鱼骨案例</a></strong></p>
<p>ref: <a href="https://zh.wikipedia.org/wiki/%E7%9F%B3%E5%B7%9D%E5%9B%BE" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%9F%B3%E5%B7%9D%E5%9B%BE</a></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Scan Docker Images for Vulnerabilities</title>
    <url>/2019/12/11/Scan-Docker-Images-for-Vulnerabilities/</url>
    <content><![CDATA[<ul>
<li><p>可以扫描哪些方面，哪些方面检查不出来</p>
</li>
<li><p>有哪些工具，各自特点</p>
</li>
<li><p>工具开源/收费</p>
</li>
<li><p>是否方便与pipeline集成</p>
</li>
<li><p>报告形式</p>
</li>
<li><p>是否需要单独的服务端、数据库</p>
</li>
</ul>
<h3 id="Tool-1-trivy"><a href="#Tool-1-trivy" class="headerlink" title="Tool 1: trivy"></a>Tool 1: <a href="https://github.com/aquasecurity/trivy" target="_blank" rel="noopener">trivy</a></h3><p>output:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   trivy python:alpine</span><br><span class="line">2019-12-12T09:40:48.656+0800	INFO	Detecting Alpine vulnerabilities...</span><br><span class="line"></span><br><span class="line">python:alpine (alpine 3.10.2)</span><br><span class="line">=============================</span><br><span class="line">Total: 9 (UNKNOWN: 0, LOW: 2, MEDIUM: 7, HIGH: 0, CRITICAL: 0)</span><br><span class="line"></span><br><span class="line">+-----------+------------------+----------+-------------------+--------------------------------+</span><br><span class="line">|  LIBRARY  | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |      TITLE    |</span><br><span class="line">+-----------+------------------+----------+-------------------+---------   +-------------------+</span><br><span class="line">| e2fsprogs | CVE-2019-5094    | MEDIUM   | 1.45.2-r0| 1.45.2-r1 | e2fsprogs: crafted             |</span><br><span class="line">|           |                  |          |                   |               | ext4 partition leads to        |</span><br><span class="line">|           |                  |          |                   |               | out-of-bounds write            |</span><br><span class="line">+-----------+------------------+          +-------------------+---------------+--------------------------------+</span><br><span class="line">| expat     | CVE-2019-15903   |          | 2.2.7-r0| 2.2.7-r1  | expat: heap-based buffer       |</span><br><span class="line">|           |                  |          |                   |               | over-read via crafted XML      |</span><br><span class="line">|           |                  |          |                   |               | input                          |</span><br><span class="line">+-----------+------------------+          +-------------------+---------------+--------------------------------+</span><br><span class="line">| libgcrypt | CVE-2019-13627   |          | 1.8.4-r2| 1.8.5-r0  | libgcrypt: ECDSA timing        |</span><br><span class="line">|           |                  |          |                   |               | attack <span class="keyword">in</span> the libgcrypt20      |</span><br><span class="line">|           |                  |          |                   |               | cryptographic library          |</span><br><span class="line">+-----------+------------------+          +-------------------+--------------</span><br><span class="line">省略100行</span><br></pre></td></tr></table></figure></p>
<h3 id="Tool-2-Anchore"><a href="#Tool-2-Anchore" class="headerlink" title="Tool 2: Anchore"></a>Tool 2: <a href="https://github.com/anchore/anchore-engine" target="_blank" rel="noopener">Anchore</a></h3><p>Anchore consists of a commercial edition (Anchore Enterprise) and an open-source edition (Anchor Engine).</p>
<h3 id="Tool-3-open-scap"><a href="#Tool-3-open-scap" class="headerlink" title="Tool 3: open-scap"></a>Tool 3: open-scap</h3><h3 id="Tool-4-Dagda"><a href="#Tool-4-Dagda" class="headerlink" title="Tool 4: Dagda"></a>Tool 4: <a href="https://github.com/eliasgranderubio/dagda" target="_blank" rel="noopener">Dagda</a></h3><h3 id="Tool-5-Clair"><a href="#Tool-5-Clair" class="headerlink" title="Tool 5: Clair"></a>Tool 5: <a href="https://github.com/quay/clair" target="_blank" rel="noopener">Clair</a></h3><p>ref:</p>
<ul>
<li><a href="https://www.scality.com/solved/5-free-tools-to-navigate-through-docker-containers-security/" target="_blank" rel="noopener">https://www.scality.com/solved/5-free-tools-to-navigate-through-docker-containers-security/</a></li>
<li><a href="https://resources.whitesourcesoftware.com/blog-whitesource/docker-image-security-scanning" target="_blank" rel="noopener">https://resources.whitesourcesoftware.com/blog-whitesource/docker-image-security-scanning</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Script Standards</title>
    <url>/2019/05/29/Shell-Script-Standards/</url>
    <content><![CDATA[<h5 id="Part1-命名约定"><a href="#Part1-命名约定" class="headerlink" title="Part1: 命名约定"></a>Part1: 命名约定</h5><ul>
<li>本文档的命名约定是系统配置文件、脚本文件；</li>
<li>文件名、变量名、函数名不超过20个字符；</li>
<li>命名只能使用英文字母，数字和下划线，只有一个英文单词时使用全拼，有多个单词时，使用下划线分隔，长度较长时，可以取单词前3～4个字母。</li>
<li>文件名全部以小写命名，不能大小写混用（通过U盘交换文件时，大小写可能会丢失，即：大写文件名可能会全部变成小写文件名）；</li>
<li>避免使用Linux的保留字如true、关键字如PWD等（见附表）；</li>
<li>从配置文件导出配置时，要注意过滤空行和注释</li>
</ul>
<h5 id="Part2-代码开头约定"><a href="#Part2-代码开头约定" class="headerlink" title="Part2: 代码开头约定"></a>Part2: 代码开头约定</h5><ul>
<li>第一行一般为调用使用的语言 </li>
<li>下面要有这个程序名，避免更改文件名为无法找到正确的文件</li>
<li>版本号</li>
<li>更改后的时间</li>
<li>作者相关信息</li>
<li>该程序的作用，及注意事项</li>
<li>版权与是否开放共享GNU说明</li>
<li>最后是各版本的更新简要说明</li>
</ul>
<p>e.g.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Filename:    check_mem.sh</span></span><br><span class="line"><span class="comment"># Revision:    1.1</span></span><br><span class="line"><span class="comment"># Date:        2019/02/10</span></span><br><span class="line"><span class="comment"># Author:      xiaoming</span></span><br><span class="line"><span class="comment"># Email:       xiaoming#gmail.com</span></span><br><span class="line"><span class="comment"># Description: Plugin to monitor the memory of the system</span></span><br><span class="line"><span class="comment"># Notes:       This plugin uses the "" command</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Copyright:   2009 (c) xiaoming</span></span><br><span class="line"><span class="comment"># License:     GPL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This program is free software; you can redistribute it and/or</span></span><br><span class="line"><span class="comment"># modify it under the terms of the GNU General Public License</span></span><br><span class="line"><span class="comment"># as published by the Free Software Foundation; either version 2</span></span><br><span class="line"><span class="comment"># of the License, or (at your option) any later version.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty</span></span><br><span class="line"><span class="comment"># of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment"># GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># you should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment"># along with this program (or with Nagios);</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Credits go to Ethan Galstad for coding Nagios</span></span><br><span class="line"><span class="comment"># If any changes are made to this script, please mail me a copy of the changes</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#Version 1.0</span></span><br><span class="line"><span class="comment">#The first one , can monitor the system memory</span></span><br><span class="line"><span class="comment">#Version 1.1</span></span><br><span class="line"><span class="comment">#Modify the method of the script ,more fast</span></span><br></pre></td></tr></table></figure></p>
<h5 id="Part3-环境变量"><a href="#Part3-环境变量" class="headerlink" title="Part3: 环境变量"></a>Part3: 环境变量</h5><ul>
<li>变量：全部是大写字母</li>
<li>变量引用：全部以变量名加双引号引用，如”$TERMTYPE”，或“${TERMTYPE}”，如果变量类型是数值型不引用，如:</li>
<li>如果需要从配置文件导出变量，则在变量前加一大写字母，以识别导出变量与自定义环境变量的区别，如：</li>
<li>变量值的引用尽量以$开头，如$(ls inst_.sh)，避免使用<code>ls inst_。sh</code></li>
<li>循环控制变量可以命名为单个字母， 比如 i、j等。 也可以是更有意义的名称， 比如 UserIndex。</li>
<li>环境变量和全局变量 在脚本开头定义。</li>
<li>函数中使用较多的文件，以环境变量的形式在文件开头定义，仅函数中使用的变量在函数开头定义</li>
</ul>
<h5 id="Part4-脚本的基本结构"><a href="#Part4-脚本的基本结构" class="headerlink" title="Part4: 脚本的基本结构"></a>Part4: 脚本的基本结构</h5><p>一个脚本的基本结构是这样的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!SHEBANG</span></span><br><span class="line"> </span><br><span class="line">CONFIGURATION_VARIABLES</span><br><span class="line"> </span><br><span class="line">FUNCTION_DEFINITIONS</span><br><span class="line"> </span><br><span class="line">MAIN_CODE</span><br><span class="line">Shebang</span><br></pre></td></tr></table></figure>
<p><strong>More Ref:</strong></p>
<blockquote>
<ul>
<li><a href="https://blog.csdn.net/wirelessqa/article/details/18863403" target="_blank" rel="noopener">https://blog.csdn.net/wirelessqa/article/details/18863403</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Print text between specified lines or patterns</title>
    <url>/2019/06/14/Shell-Print-text-between-specified-lines-or-patterns/</url>
    <content><![CDATA[<p>awk,grep,sed,head,tail 都可以根据条件打印部分行。最简单的方法是使用 grep 打印匹配模式的行。不过，最全能的工具还是 awk.</p>
<h4 id="Example-1-打印从-M-行到-N-行之间的文本"><a href="#Example-1-打印从-M-行到-N-行之间的文本" class="headerlink" title="Example 1: 打印从 M 行到 N 行之间的文本"></a>Example 1: 打印从 M 行到 N 行之间的文本</h4><p><code>$ awk &#39;NR==M,NR==N&#39; filename</code></p>
<p>也可以从stdin读取输入：<br><code>cat filename | awk &#39;NR==M, NR==N&#39;</code></p>
<h4 id="Example-2-打印位于模式-start-pattern-与-end-pattern-之间的文本"><a href="#Example-2-打印位于模式-start-pattern-与-end-pattern-之间的文本" class="headerlink" title="Example 2: 打印位于模式 start_pattern 与 end_pattern 之间的文本"></a>Example 2: 打印位于模式 start_pattern 与 end_pattern 之间的文本</h4><p><code>awk &#39;/start_pattern/,/end_pattern/&#39; filename</code></p>
<p>awk中使用的模式为正则表达式</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell output/Terminal  color</title>
    <url>/2019/04/28/Shell-output-Terminal-color/</url>
    <content><![CDATA[<h2 id="change-dispaly-color-on-the-terminal"><a href="#change-dispaly-color-on-the-terminal" class="headerlink" title="change dispaly color on the terminal"></a>change dispaly color on the terminal</h2><p>The  tput  utility uses the terminfo database to make the values of terminal-depen-dent capabilities and information available to the shell (see sh(1)), to initialize or reset the terminal, or return the long name of the requested terminal type.</p>
<h4 id="tput-Color-Capabilities"><a href="#tput-Color-Capabilities" class="headerlink" title="tput Color Capabilities:"></a>tput Color Capabilities:</h4><ul>
<li><code>tput setab [0-7]</code> – Set a background color using ANSI escape</li>
<li><code>tput setb [0-7]</code> – Set a background color</li>
<li><code>tput setaf [0-7]</code> – Set a foreground color using ANSI escape</li>
<li><code>tput setf [0-7]</code> – Set a foreground color</li>
</ul>
<h4 id="Color-Code-for-tput"><a href="#Color-Code-for-tput" class="headerlink" title="Color Code for tput:"></a>Color Code for tput:</h4><ul>
<li>0 – Black</li>
<li>1 – Red</li>
<li>2 – Green</li>
<li>3 – Yellow</li>
<li>4 – Blue</li>
<li>5 – Magenta</li>
<li>6 – Cyan</li>
<li>7 – White</li>
</ul>
<p>bash script example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">reset=$(tput sgr0)</span><br><span class="line"></span><br><span class="line">green=$(tput setaf 2 )</span><br><span class="line">blue=$(tput setaf 25)</span><br><span class="line">red=$(tput setaf 1;tput bold)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">info</span></span>() &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"<span class="variable">$&#123;blue&#125;</span>➜ %s<span class="variable">$&#123;reset&#125;</span>\n"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">error</span></span>() &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"<span class="variable">$&#123;red&#125;</span>× %s<span class="variable">$&#123;reset&#125;</span>\n"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">success</span></span>() &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"<span class="variable">$&#123;green&#125;</span>✔ %s<span class="variable">$&#123;reset&#125;</span>\n"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">infoWithTime</span></span>()&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"<span class="variable">$&#123;blue&#125;</span>➜ %s<span class="variable">$&#123;reset&#125;</span>\n"</span> <span class="string">"<span class="variable">$@</span> | now: `date +'%F %T'`"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info <span class="string">"setup ,,info......"</span></span><br><span class="line"></span><br><span class="line">error <span class="string">"haha,error..."</span></span><br><span class="line"></span><br><span class="line">success <span class="string">"old color"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> $(tput setaf 2;tput bold)<span class="string">'color show\n'</span> $(tput sgr0)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> $(tput setf 2;tput bold)<span class="string">'color show\n'</span> $(tput sgr0)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell count time</title>
    <url>/2019/06/17/Shell-count-time/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">start=$(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="comment">#type your command, like: sleep 50</span></span><br><span class="line">sleep 50</span><br><span class="line"></span><br><span class="line">end=$(date +%s)</span><br><span class="line"></span><br><span class="line">diff=$((end - start))</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;32m take time is: <span class="variable">$diff</span> \e[m"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> Count:</span><br><span class="line">tput sc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> `seq 0 40`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  tput rc</span><br><span class="line">  tput ed</span><br><span class="line">  <span class="built_in">echo</span> -n <span class="variable">$count</span></span><br><span class="line">  sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>用 tput sc 存储光标位置。在每次循环中，通过 tput rc 恢复之前的存储的光标位置，在终端中打印出新的 count 值，然后使用 tputs ed 清除从当前位置到行尾之间的所有内容。行被清空之后，脚本就可以显示出新的值。sleep  可以使脚本在每次循环迭代之间延迟1秒钟。</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell toolbox</title>
    <url>/2020/03/20/Shell-toolbox/</url>
    <content><![CDATA[<h3 id="1-crontab"><a href="#1-crontab" class="headerlink" title="1 crontab"></a>1 <a href="https://crontab.guru/examples.html" target="_blank" rel="noopener">crontab</a></h3><p>教你怎么写定时任务的网站，并给出了很多示例，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#“At every 2nd minute.”</span></span><br><span class="line">*/2 * * * *</span><br><span class="line"><span class="comment"># At 22:00 on every day-of-week from Monday through Friday</span></span><br><span class="line">0 22 * * 1-5</span><br></pre></td></tr></table></figure>
<p>不要以为会写crontab就可以了，建议有空以下内容了解下：</p>
<ul>
<li><a href="https://crontab.guru/tips.html" target="_blank" rel="noopener">tips小建议</a></li>
<li><a href="https://www.endpoint.com/blog/2008/12/08/best-practices-for-cron" target="_blank" rel="noopener">最佳实践</a> </li>
<li><a href="https://cronitor.io/docs/cron-troubleshooting-guide?utm_source=crontabguru&amp;utm_campaign=cron_troubleshooting" target="_blank" rel="noopener">问题定位</a></li>
<li><strong>mcron</strong>: <em>Another alternative for complicated schedules</em></li>
</ul>
<blockquote>
<p>最后，有兴趣可以看看 Cron Job Monitoring 的工具 <a href="https://cronitor.io/index" target="_blank" rel="noopener">cronitor</a>,不过貌似是收费的。看介绍，可用于 Cron Job, Scheduled Event（AWS),Task Scheduler, Kubernetes Cron Job, Java Cron Job, Jenkins Job多类型的监控。</p>
</blockquote>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Small Tools [1]: youtube-dl</title>
    <url>/2019/05/22/Small-Tools-1-youtube-dl/</url>
    <content><![CDATA[<h2 id="youtube-dl"><a href="#youtube-dl" class="headerlink" title="youtube-dl"></a>youtube-dl</h2><p><strong>youtube-dl</strong> 是一个命令行视频下载利器，不仅仅可以下载YouTube的内容，也可以下载其他的视频网站内容</p>
<h5 id="1-Install-（安装）"><a href="#1-Install-（安装）" class="headerlink" title="1.Install （安装）"></a>1.Install （安装）</h5><p>mac 或 linux 上<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl</span><br><span class="line">sudo chmod a+rx /usr/local/bin/youtube-dl</span><br></pre></td></tr></table></figure></p>
<h5 id="2-Usage-（用法）"><a href="#2-Usage-（用法）" class="headerlink" title="2.Usage （用法）"></a>2.Usage （用法）</h5><ul>
<li><p>General usage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ youtube-dl https://www.youtube.com/watch\?v\=rNh_e6ZA8CI</span><br><span class="line">[youtube] rNh_e6ZA8CI: Downloading webpage</span><br><span class="line">[youtube] rNh_e6ZA8CI: Downloading video info webpage</span><br><span class="line">[download] Destination: 采用最慢起跑方式! 中国飞人起跑不好只排第四, 但后程爆发以0.03秒险胜夺冠-rNh_e6ZA8CI.mp4</span><br><span class="line">[download] 100% of 13.00MiB <span class="keyword">in</span> 00:43</span><br><span class="line"></span><br><span class="line"><span class="comment">### 下载到指定目录，并重命名</span></span><br><span class="line">youtube-dl https://www.youtube.com/watch\?v\=rNh_e6ZA8CI -o ./youtube-download/running_vedio.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>Only Download Audio (下载youtube的音频)  </p>
</li>
</ul>
<blockquote>
<p>（最近发现youtube有些节目，只用听得，比如 读书类、英语类）,用<code>-f</code> 参数指定格式</p>
</blockquote>
<p><code>youtube-dl -f 140 https://www.youtube.com/watch\?v\=9rRrsx1jgYc</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">youtube-dl -F &lt;your_link&gt;</span><br><span class="line"><span class="comment">### -F, --list-formats    List all available formats of requested videos</span></span><br></pre></td></tr></table></figure></p>
<hr>  

<h3 id="新增一个类似工具"><a href="#新增一个类似工具" class="headerlink" title="新增一个类似工具"></a>新增一个类似工具</h3><p>最近发现新的工具 <code>you-get</code><br>对国内支持比较好，国内视频下载速度极快（比youtube-dl快很多倍），使用方便，语法简单。</p>
<p>比如：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载网易云音乐的mv</span></span><br><span class="line">you-get https://music.163.com/\<span class="comment">#/mv\?id\=5307835</span></span><br><span class="line"><span class="comment"># 然后提取音频</span></span><br><span class="line">ffmpeg -i 祝你一路顺风\ -\ 吴奇隆.mp4 -vn 祝你一路顺风\ -\ 吴奇隆.mp3</span><br></pre></td></tr></table></figure></p>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="http://ytdl-org" target="_blank" rel="noopener">http://ytdl-org</a> (官网)</li>
<li><a href="https://github.com/ytdl-org/youtube-dl/blob/master/README.md#readme" target="_blank" rel="noopener">https://github.com/ytdl-org/youtube-dl/blob/master/README.md#readme</a> （github）</li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform 100: Introduction &amp; Install</title>
    <url>/2019/08/27/Terraform-100-Introduction-Install/</url>
    <content><![CDATA[<h3 id="What-is-Terraform"><a href="#What-is-Terraform" class="headerlink" title="What is Terraform?"></a>What is Terraform?</h3><p>Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.</p>
<p>The key features of Terraform are:</p>
<ul>
<li>Infrastructure as Code</li>
<li>Execution Plans</li>
<li>Resource Graph</li>
<li>Change Automation</li>
</ul>
<h3 id="tfenv"><a href="#tfenv" class="headerlink" title="tfenv"></a>tfenv</h3><p><strong>tfenv</strong>: Terraform version manager</p>
<p><a href="https://github.com/tfutils/tfenv" target="_blank" rel="noopener">tfenv github</a></p>
<ul>
<li><h5 id="install-tfenv"><a href="#install-tfenv" class="headerlink" title="install tfenv"></a>install tfenv</h5><p>Install via Homebrew<br><code>$ brew install tfenv</code></p>
</li>
<li><h5 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tfenv install 0.7.0</span><br><span class="line">$ tfenv install latest</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use a specific version</span></span><br><span class="line">$ tfenv use 0.7.0</span><br><span class="line">$ tfenv use latest</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#uninstall</span></span><br><span class="line">$ tfenv uninstall 0.7.0</span><br><span class="line">$ tfenv uninstall latest</span><br></pre></td></tr></table></figure>
<h5 id="terraform-version"><a href="#terraform-version" class="headerlink" title=".terraform-version"></a>.terraform-version</h5><p>If you put .terraform-version file on your project root, or in your home directory, tfenv detects it and use the version written in it. </p>
<blockquote>
<p>I have installed two different version on my mac.</p>
</blockquote>
<p>Ihen I set version to <code>v0.12.4</code> in <code>.terraform-version</code> file<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➜   terraform --version</span><br><span class="line">Terraform v0.12.4</span><br><span class="line">+ provider.aws v2.25.0</span><br><span class="line">+ provider.random v2.2.0</span><br><span class="line">+ provider.template v2.1.2</span><br></pre></td></tr></table></figure></p>
<p>Then I change the verson to <strong><code>v0.12.5</code></strong> in <code>.terraform-version</code> file<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➜   terraform --version</span><br><span class="line">Terraform v0.12.5</span><br><span class="line">+ provider.aws v2.25.0</span><br><span class="line">+ provider.random v2.2.0</span><br><span class="line">+ provider.template v2.1.2</span><br><span class="line"></span><br><span class="line">Your version of Terraform is out of date! The latest version</span><br><span class="line">is 0.12.7. You can update by downloading from www.terraform.io/downloads.html</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Terraform</category>
      </categories>
      <tags>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>Small Tools [2]: ffmpeg -- Video conversion tool.</title>
    <url>/2019/05/23/Small-Tools-2-ffmpeg-Video-conversion-tool/</url>
    <content><![CDATA[<h2 id="yffmpeg"><a href="#yffmpeg" class="headerlink" title="yffmpeg"></a>yffmpeg</h2><h5 id="1-Install-（安装）"><a href="#1-Install-（安装）" class="headerlink" title="1.Install （安装）"></a>1.Install （安装）</h5><ul>
<li>macOS (wait a min)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2-Usage-（用法）"><a href="#2-Usage-（用法）" class="headerlink" title="2.Usage （用法）"></a>2.Usage （用法）</h5><ul>
<li>General usage</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i video.mp4 -vn sound.mp3</span><br></pre></td></tr></table></figure>
<ul>
<li>More usage<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg</span><br><span class="line"></span><br><span class="line">Video conversion tool.</span><br><span class="line"></span><br><span class="line">- Extract the sound from a video and save it as MP3:</span><br><span class="line">    ffmpeg -i video.mp4 -vn sound.mp3</span><br><span class="line"></span><br><span class="line">- Convert frames from a video or GIF into individual numbered images:</span><br><span class="line">    ffmpeg -i video.mpg|video.gif frame_%d.png</span><br><span class="line"></span><br><span class="line">- Combine numbered images (frame_1.jpg, frame_2.jpg, etc) into a video or GIF:</span><br><span class="line">    ffmpeg -i frame_%d.jpg -f image2 video.mpg|video.gif</span><br><span class="line"></span><br><span class="line">- Quickly extract a single frame from a video at time mm:ss and save it as a 128x128 resolution image:</span><br><span class="line">    ffmpeg -ss mm:ss -i video.mp4 -frames 1 -s 128x128 -f image2 image.png</span><br><span class="line"></span><br><span class="line">- Trim a video from a given start time mm:ss to an end time mm2:ss2 (omit the -to flag to trim till the end):</span><br><span class="line">    ffmpeg -ss mm:ss -to mm2:ss2 -i video.mp4 -codec copy output.mp4</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>More Ref:</strong>- <a href="https://ffmpeg.org" target="_blank" rel="noopener">https://ffmpeg.org</a> (官网)</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Test 01:Introduction</title>
    <url>/2019/11/08/Test-01-Introduction/</url>
    <content><![CDATA[<h3 id="1-测试金字塔"><a href="#1-测试金字塔" class="headerlink" title="1.测试金字塔"></a>1.测试金字塔</h3><p><img src="/images/test_pyramid.png" width="60%" height="60%"></p>
<p>被引用较多的关于测试的文章 -&gt; <a href="https://insights.thoughtworks.cn/practical-test-pyramid/" target="_blank" rel="noopener">测试金字塔实战</a></p>
<p>认识：  </p>
<ul>
<li>1、unit单元测试，速度快，且成本低（当然这里的成本低，是指可以前移测试早发现问题，缺陷修复代价来讲，但从目前如果开发要强制单元测试，成本其实并不低，影响因素也众多）</li>
<li>2、ui端到端测试，速度慢，且成本高（与上面解释类似）</li>
<li>3、Service集成和接口测试，处于二者中间，其实这块我认为是测试收益最大，且最容易有成果和成效的部分；</li>
<li>4、自动化测试金字塔模型还给我们的启示是，如果在进行ui测试时，发现缺陷，有可能是你的中间service层或是unit层有缺陷，我们应追朔本源，解决问题根据原因所在。</li>
</ul>
<blockquote>
<p>不要太拘泥于测试金字塔中单个层的名称。只是一个抽象概念</p>
</blockquote>
<h3 id="2-测试分类"><a href="#2-测试分类" class="headerlink" title="2.测试分类"></a>2.测试分类</h3><p>测试类型按照不同维度可以有很多种分类，比如说</p>
<ul>
<li>1.基于是否考虑软件内部结构和实现<ul>
<li>白盒测试</li>
<li>黑盒测试</li>
<li>灰盒测试</li>
</ul>
</li>
<li>2.基于是否执行程序<ul>
<li>静态测试</li>
<li>动态测试</li>
</ul>
</li>
<li>3.基于测试过程<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>冒烟测试</li>
<li>功能测试(系统测试)<ul>
<li>探索式测试</li>
<li>场景测试</li>
<li>流测试</li>
<li>域测试</li>
</ul>
</li>
<li>兼容性测试</li>
<li>回归测试</li>
<li>验收测试</li>
<li>性能测试<ul>
<li>压力测试</li>
<li>负载测试</li>
</ul>
</li>
<li>安全测试</li>
</ul>
</li>
</ul>
<p>大牛的测试文章<a href="https://danteyu.github.io/2017/10/21/teststrategy/" target="_blank" rel="noopener">这里</a>；还有微服务相关的测试，<a href="https://insights.thoughtworks.cn/microservices-testing-practice/" target="_blank" rel="noopener">微服务测试的思考与实践</a>;还有<strong>测试左移，测试右移</strong>。</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Test 02:Tools</title>
    <url>/2019/11/08/Test-02-Tools/</url>
    <content><![CDATA[<p><mark>测试种类与测试工具没有一对一的关系。</mark></p>
<p>项目原因最近在学习以下几个工具：</p>
<h3 id="1-Postman"><a href="#1-Postman" class="headerlink" title="1.Postman"></a>1.Postman</h3><p>可做api测试，newman</p>
<h3 id="2-Selenium"><a href="#2-Selenium" class="headerlink" title="2.Selenium"></a>2.Selenium</h3><p>Selenium is a suite of tools to automate web browsers across many platforms.</p>
<h3 id="3-Cucumber"><a href="#3-Cucumber" class="headerlink" title="3.Cucumber"></a>3.Cucumber</h3><p>Cucumber 是 BDD（behaviour-driven development） 模式下实现可执行规范（Executable Specifications）的开源工具，但是它的使命并不局限于做自动化验收测试，更加重要的在于其能够在团队成员之间构建统一的交流基础（feature 文件）、规范交流用语（Domain Specific Language）、提高各个利益相关方（Business Stakeholders）沟通效率和效果，从而达到提升产品质量、做成客户期望得到的产品这一最终目标。<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-cucumber01/index.html" target="_blank" rel="noopener">参考</a></p>
<ul>
<li><p>Features介绍  </p>
<p>feature(功能)，每一个feature文件都要开始于Feature(功能)，Feature之后的描述可以随便写，直到出现Scenario(场景)，一个feature中可以有多个 Scenario，每个Scenario包含（step）步骤列表，步骤使用Given、When、Then、But、And这些关键词，cucumber对这些关键词的处理是一样的，但是我们在使用的时候需要按照场景区分。</p>
</li>
<li><p>Step definitions介绍  </p>
<p>Cucumber中定义的每一个step(步骤)都需要有一个step definition对应，默认的话是使用Ruby来编写定义的脚本，支持通过正则表达式从step中传递参数。</p>
</li>
<li><p>Given When then(假如 当 那么)  </p>
<p>Cucumber的步骤中会包含Given、When、then这些词组，cucumber本身在技术实现上不区分这三个词组，但是在使用上推荐按照词组的意思来使用。</p>
<ul>
<li>Given-用例开始执行前的一个前置条件，类似与编写代码setup中的一些步骤</li>
<li>When-用例开始执行的一些关键操作步骤，类似点击元素等</li>
<li>Then-观察结果，就是平时用例中的验证步骤</li>
<li>And-一个步骤中如果存在多个Given操作，后面的Given可以用And替代</li>
<li>But-一个步骤中如果存在多个Then操作，第二个开始后面的Then可以用But替代</li>
</ul>
</li>
</ul>
<p><strong>工具情况统计</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Tool-Name</th>
<th>CLI</th>
<th>HTML-Report</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Postman</td>
<td><code>newman</code></td>
<td>有</td>
</tr>
<tr>
<td style="text-align:left">Selenium</td>
<td>结合<code>java</code>、<code>python</code>环境运行</td>
<td>有 <code>HTML TestRunner</code></td>
</tr>
<tr>
<td style="text-align:left">Cucumber</td>
<td><code>cucumber</code></td>
<td>有</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/44470871" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44470871</a></li>
<li><a href="https://www.cnblogs.com/tynam" target="_blank" rel="noopener">某个博客</a></li>
<li><a href="http://www.zhangyanc.club/blog/84" target="_blank" rel="noopener">http://www.zhangyanc.club/blog/84</a></li>
</ul>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>The Gig Economy Note</title>
    <url>/2019/12/24/The-Gig-Economy-Note/</url>
    <content><![CDATA[<p>零工经济是指一种经济价值，它来源于一种不断增长的趋势，即人们开始从事工作时间不定的工作，而这有别于以工作时间固定不变为特征的传统工作</p>
<p>共享经济和零工经济的主要区别在于，前者包括了涉及实体资产的服务或体验购买，而后者则是有时限的、由个人交付的服务</p>
<p>按需经济是零工经济的一个子集，它是指在需求触发下提供产品或服务的数字市场的经济活动</p>
<p>按需经济和零工经济的关键区别在于需求的即时性，而即时性取决于零工所需的技能水平和持续时间 </p>
<p><img src="/images/gig_economy_1.png" height="36%" width="36%"></p>
<p>有时，新鲜的视角是必需的，因为内部团队已经围绕一个问题工作太久了，他们无法再分辨出问题中微妙的部分。</p>
<p>在一些公司，由于没有人愿意打开“潘多拉的魔盒”，因此，困难的问题常常被忽略了。而一名中立的旁观者往往是打开魔盒的最佳选择。咨询师可以被视为不结盟者，因此他们的观点会更为客观。</p>
<ul>
<li><a href="https://www.fiverr.com/" target="_blank" rel="noopener">https://www.fiverr.com/</a></li>
<li><a href="https://www.upwork.com/" target="_blank" rel="noopener">https://www.upwork.com/</a></li>
</ul>
<h4 id="收费结构"><a href="#收费结构" class="headerlink" title="收费结构"></a>收费结构</h4><p>  设定收费的方式很多，通常分为四个大类：按<strong>小时收费</strong>、<strong>按项目收费</strong>、<strong>成交费</strong>、<strong>股权</strong>。</p>
<p>  按时收费是最常见的，提一下定价的 1%原则，即每个人的每日费用应该是他等效年收入的1%。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>about</title>
    <url>/2020/03/16/about/</url>
    <content><![CDATA[<blockquote>
<p>Ops, China Wuhan.</p>
</blockquote>
<p>现居: 武汉<br>GitHub: ～<br>QQ: 771963601<br>微信: ～</p>
]]></content>
  </entry>
  <entry>
    <title>Terraform : terraform console</title>
    <url>/2019/12/05/Terraform-terraform-console/</url>
    <content><![CDATA[<h5 id="1-evaluating-expressions"><a href="#1-evaluating-expressions" class="headerlink" title="1.evaluating expressions"></a>1.evaluating expressions</h5><p>The terraform console command provides an interactive console for evaluating expressions.</p>
<p>For example:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interactive console</span></span><br><span class="line">➜ terraform console</span><br><span class="line">&gt; element(list(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>),1)</span><br><span class="line">two</span><br><span class="line"></span><br><span class="line"><span class="comment"># non-interactive scripts</span></span><br><span class="line">➜ <span class="built_in">echo</span> <span class="string">"list("</span>1<span class="string">","</span>2<span class="string">")"</span> | terraform console</span><br><span class="line">[</span><br><span class="line">  1,</span><br><span class="line">  2,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ terraform console</span><br><span class="line">&gt; aws_instance_demo.public_ip</span><br><span class="line">54.152.62.34</span><br></pre></td></tr></table></figure>
<h5 id="2-test-Terraform-built-in-functions-locally"><a href="#2-test-Terraform-built-in-functions-locally" class="headerlink" title="2.test Terraform built-in functions locally"></a>2.test Terraform built-in functions locally</h5><p>  <a href="http://artemstar.com/2018/03/03/terraform-test-functions/" target="_blank" rel="noopener">test Terraform built-in functions locally</a></p>
<hr>
<p>More ref:<br><a href="https://www.terraform.io/docs/commands/console.html" target="_blank" rel="noopener">https://www.terraform.io/docs/commands/console.html</a><br><a href="http://artemstar.com/2018/03/03/terraform-test-functions/" target="_blank" rel="noopener">http://artemstar.com/2018/03/03/terraform-test-functions/</a></p>
]]></content>
      <categories>
        <category>Terraform</category>
      </categories>
      <tags>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>adminMongo: a cross platform user interface (GUI) to connect MongoDB</title>
    <url>/2019/07/15/adminMongo-a-cross-platform-user-interface-GUI-to-connect-MongoDB/</url>
    <content><![CDATA[<p><strong>Github address</strong>:<br><a href="https://github.com/mrvautin/adminMongo" target="_blank" rel="noopener">https://github.com/mrvautin/adminMongo</a></p>
<p><strong>dockerhub</strong>:<br><a href="https://hub.docker.com/r/mrvautin/adminmongo" target="_blank" rel="noopener">https://hub.docker.com/r/mrvautin/adminmongo</a></p>
<p>example:</p>
<p><img src="/images/adminMongo_image_01.png" alt="adminMongo_image_01"></p>
<p>Give a name to the connection and use the following connection string: ‘mongodb://root:example@mongo’.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>bash : set command</title>
    <url>/2019/05/07/bash-set-command/</url>
    <content><![CDATA[<h2 id="set-命令教程"><a href="#set-命令教程" class="headerlink" title="set 命令教程"></a>set 命令教程</h2><p><strong>set</strong> 命令用来修改 Shell 环境的运行参数，也就是可以定制环境</p>
<p>介绍常用的参数</p>
<h4 id="1-set-u"><a href="#1-set-u" class="headerlink" title="1. set -u"></a>1. <code>set -u</code></h4><p>执行脚本的时候，如果遇到不存在的变量，Bash 默认忽略它。</p>
<p><code>set -u</code> = <code>set -o nounset</code></p>
<h4 id="2-set-x"><a href="#2-set-x" class="headerlink" title="2. set -x"></a>2. <code>set -x</code></h4><p>默认情况下，脚本执行后，屏幕只显示运行结果，没有其他内容。如果多个命令连续执行，它们的运行结果就会连续输出。有时会分不清，某一段内容是什么命令产生的。</p>
<p><code>set -x</code> = <code>set -o xtrace</code></p>
<h4 id="3-set-e"><a href="#3-set-e" class="headerlink" title="3. set -e"></a>3. <code>set -e</code></h4><p>使得脚本只要发生错误，就终止执行。<br><code>set -e</code> = <code>set -o errexit</code></p>
<h4 id="4-set-o-pipefail"><a href="#4-set-o-pipefail" class="headerlink" title="4. set -o pipefail"></a>4. <code>set -o pipefail</code></h4><p>set -e有一个例外情况，就是不适用于管道命令。</p>
<p>所谓管道命令，就是多个子命令通过管道运算符（|）组合成为一个大的命令。Bash 会把最后一个子命令的返回值，作为整个命令的返回值。也就是说，只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，set -e就失效了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">foo | <span class="built_in">echo</span> a</span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure>
<p><code>echo bar</code>没有执行 ,否则在不用  <code>pipefail</code> 的情况下，会继续执行  <code>echo bar</code></p>
<h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><p>set命令的上面这四个参数，一般都放在一起使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 写法一</span></span><br><span class="line">set -euxo pipefail</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写法二</span></span><br><span class="line">set -eux</span><br><span class="line">set -o pipefail</span><br></pre></td></tr></table></figure>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html" target="_blank" rel="noopener">https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/11/bash-set.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;devops&#39; 还是 &#39;DevOps&#39;?</title>
    <url>/2019/10/08/devops-%E8%BF%98%E6%98%AF-DevOps/</url>
    <content><![CDATA[<h3 id="1-什么是-devops-还是-DevOps"><a href="#1-什么是-devops-还是-DevOps" class="headerlink" title="1. 什么是 devops,还是 DevOps"></a>1. 什么是 devops,还是 DevOps</h3><p>  最近在阅读 《Effective DevOps》（中文版） 时看到一些有趣的内容，如标题所问到的 – <u>devops 还是 DevOps?</u> (P6)。<br>  接触这个概念已经2年左右，自身的职位名称也是这个单词，但从来也没有思考过这个问题，而该书的作者在前言中提出来了，不得不说思维之严谨。不妨读者自身也想一想，到底那个更合适，为什么？</p>
<blockquote>
<p>摘自《Effective DevOps》（中文版）P6</p>
</blockquote>
<p>  对于 “devops”这个词的字母是否大写我们还有很多讨论。一个简单的在线调查显示，大多数人都支持“DevOps”。我们还发现组织比较关注“Dev”和“Ops”,以至于出现了 “DevSecOps”和“DevQAOps”,因为“DevOps”隐含地只包括 “Dev” 和 “Ops”。<br>  所以最后我们选择了“devops”,这对应原来的推特上的标签，用来联系希望改善协作的人，他们希望谈话时不再区分“你们”和“我们”，而应该更多地讨论如何利用可持续的工作实践来支持企业发展。<br>  成功的项目需要有适当的输入、努力、见解以及整个组织中人们之间的协作，你的组织中存在的问题可能不只限于开发人员和运维团队。我们在这本书中有意选择使用小写的 “devops” 来反映我们的观点，这只是有一种包容，并没有其他的意思。</p>
<h3 id="2-常见的devops误区-（P56）-devops不是什么"><a href="#2-常见的devops误区-（P56）-devops不是什么" class="headerlink" title="2.常见的devops误区 （P56）/devops不是什么"></a>2.常见的devops误区 （P56）/devops不是什么</h3><p>devops只与开发人员和系统管理员有关<br>devops是一个团队<br>devops是一个职位<br>devops表示由一半的人完成全部工作<br>devops只是关于工具<br>devops只是关于自动化<br>实现devops有一种“正确方法”（或“错误方法”）<br>…</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>devops 更多的是一种文化，哲学上的概念，说白了就是<strong>无法言传，只可意会</strong></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>devops 4大支柱</title>
    <url>/2019/10/17/devops-4%E5%A4%A7%E6%94%AF%E6%9F%B1/</url>
    <content><![CDATA[<h3 id="一、个人感想"><a href="#一、个人感想" class="headerlink" title="一、个人感想"></a>一、个人感想</h3><p>  书中的标题看起来总是“高大上”的，但说出来的都是一些无形的东西，要理解这类理念需要时间的积累。这里先摘抄几句，一起“品味”一下。其中许多文化、方法论与现在的外企公司比较吻合，相对理解起来容易些; 书中涉及到了很多细节，比如 <em>招聘和面试（p250）</em>, <em>当责文化(p269)</em>、<em>显性文化(p270)</em> 、<em>报酬（p241）</em>等，都值得去了解和追寻。</p>
<ul>
<li><p>“Patrick Debois说过，devops是一个 <strong>人类问题</strong> ，这说明每个组织都有该组织中的人特有的一种devops文化。”（p67）</p>
</li>
<li><p>“要实现成功的devops变革，有效的工具使用当然是必要的，但这些还不够…..实际上，解决组织中出现的人际冲突和团队之间的冲突对于培养持久的关系并最终形成一个 <strong>devops环境</strong> 至关重要。”（p67）</p>
</li>
<li><p>“基于有效实现devops的4大支柱，可以解决影响软件开发的 <strong>文化</strong> 和 <strong>技术问题</strong>。”（p69）</p>
</li>
<li><p>“工具的价值和成本是不一样的。… 即使是几乎所有人都认为很重要的工具（如配置管理或源码控制工具）也有不同，有些可能对某个特定的环境更为使用。<br>根据经验、知识和流程的不同，工具也有变化。  工具必须适应环境的上下文。如果没有上下文，最好的工具就无从谈起，而上下文是不断变化的。” （p189）</p>
</li>
<li><p>“工具不能与有效实现devops的另外3各支柱完全分离。最终工具还是要由人来使用…工具不仅影响我们如何工作和交互，也会受其影响…”（p220）</p>
</li>
</ul>
<h3 id="二、基本套路"><a href="#二、基本套路" class="headerlink" title="二、基本套路"></a>二、基本套路</h3><p>4个章节基本套路如下</p>
<ol>
<li><p>解释 XX,定义 XX，附带研究一个案例</p>
</li>
<li><p>说明<strong>误区</strong> 告诉我们什么样的情形我们理解错误</p>
</li>
<li><p>说明<strong>错误排查</strong> 告诉我们如何处理困境，并根据情况解决问题</p>
</li>
</ol>
<h3 id="三、脑图"><a href="#三、脑图" class="headerlink" title="三、脑图"></a>三、脑图</h3><p>见下方<br><img src="/images/devops_4pillars.png" alt="devops 4 pillars"></p>
<p>原始地址：<a href="https://mubu.com/docfgrtOS4mn0" target="_blank" rel="noopener">https://mubu.com/docfgrtOS4mn0</a></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>docker build ignore .dockerignore</title>
    <url>/2019/08/22/docker-build-ignore-dockerignore/</url>
    <content><![CDATA[<p>Demo project:<br><a href="https://github.com/qinrui777/api-test-demo" target="_blank" rel="noopener">https://github.com/qinrui777/api-test-demo</a></p>
<p>please run command to get a jar : <code>./gradlew -x jar build</code></p>
<ul>
<li><p>before (加.dockerignore 之前)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  api-test-demo git:(master) ✗ docker  build -t api-demo:no-ignore .</span><br><span class="line">Sending build context to Docker daemon  109.7MB</span><br><span class="line">Step 1/3 : FROM openjdk:8-jdk-alpine</span><br><span class="line"> ---&gt; 97bc1352afde</span><br><span class="line">Step 2/3 : ADD build/libs/api-demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line"> ---&gt; 7f709f7b4381</span><br><span class="line">Step 3/3 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> e43285b4802f</span><br><span class="line">Removing intermediate container e43285b4802f</span><br><span class="line"> ---&gt; 62d9f7b72b38</span><br><span class="line">Successfully built 62d9f7b72b38</span><br><span class="line">Successfully tagged api-demo:no-ignore</span><br></pre></td></tr></table></figure>
</li>
<li><p>add <code>.dockerignore</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  api-test-demo git:(master) ✗ cat .dockerignore</span><br><span class="line">.git</span><br><span class="line">.DS_Store</span><br><span class="line">.gitignore</span><br><span class="line">README.md</span><br><span class="line">Jenkinsfile</span><br><span class="line">Dockerfile</span><br><span class="line">/images/*</span><br><span class="line">/src/*</span><br><span class="line">/jenkins/*</span><br></pre></td></tr></table></figure>
</li>
<li><p>after  (加.dockerignore 之后)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  api-test-demo git:(master) ✗ docker  build -t api-demo:have-ignore .</span><br><span class="line">Sending build context to Docker daemon  17.33MB</span><br><span class="line">Step 1/3 : FROM openjdk:8-jdk-alpine</span><br><span class="line"> ---&gt; 97bc1352afde</span><br><span class="line">Step 2/3 : ADD build/libs/api-demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 7f709f7b4381</span><br><span class="line">Step 3/3 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 62d9f7b72b38</span><br><span class="line">Successfully built 62d9f7b72b38</span><br><span class="line">Successfully tagged api-demo:have-ignore</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 镜像逆向工程得到Dockerfile</title>
    <url>/2019/07/25/docker-%E9%95%9C%E5%83%8F%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%BE%97%E5%88%B0Dockerfile/</url>
    <content><![CDATA[<p>可能有时候你得到了一个从Dockerfile创建的镜像文件，但是原始的Dockerfile丢失了。你想从这个镜像文件的构建历史记录中，逆向分析出原始的Dockerfile而省去寻找此文件的漫长过程。</p>
<p>虽然不可能在所有的情况下将一个Docker镜像完全得进行逆向工程，但如果此镜像是通过Dockerfile构建的，很有可能分析出此镜像是通过了什么命令得到的。我们以下面的Dockerfile为例，构建一个镜像，然后运行一个简单的shell脚本来演示如何分析镜像的构建历史记录，最后来看一个简洁的容器化的解决方案，来得出原始的Dockerfile。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM busybox</span><br><span class="line">MAINTAINER ian.miell@gmail.com</span><br><span class="line">ENV myenvname myenvvalue</span><br><span class="line">LABEL mylabelname mylabelvalue</span><br><span class="line">WORKDIR /opt</span><br><span class="line">RUN mkdir -p copied</span><br><span class="line">COPY Dockerfile copied/Dockerfile</span><br><span class="line">RUN mkdir -p added</span><br><span class="line">ADD Dockerfile added/Dockerfile</span><br><span class="line">RUN touch /tmp/afile</span><br><span class="line">ADD Dockerfile /</span><br><span class="line">EXPOSE 80</span><br><span class="line">VOLUME /data</span><br><span class="line">ONBUILD touch /tmp/built</span><br><span class="line">ENTRYPOINT /bin/bash</span><br><span class="line">CMD -r</span><br></pre></td></tr></table></figure>
<p>首先要构建这个示例镜像，镜像命名为reverseme：</p>
<p><code>$ docker build -t reverseme .</code></p>
<h5 id="SHELL解决方案"><a href="#SHELL解决方案" class="headerlink" title="SHELL解决方案"></a>SHELL解决方案</h5><p>这个基于shell的实现主要在这里用来演示逆向工程的思路与方法，它与下面的容器化解决方案相比还不是十分完整。此方案使用了docker inspect命令来提取出镜像的metadata。</p>
<p>此shell脚本中使用了jq程序，一个可以查询和操作JSON数据的工具。为了运行此脚本，需要安装jq程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> reverseme | \</span><br><span class="line">awk <span class="string">'&#123;print $1&#125;'</span> | \</span><br><span class="line">grep -v IMAGE | grep -v missing | \</span><br><span class="line">tac | \</span><br><span class="line">sed <span class="string">"s/\(.*\)/docker inspect \1 | \</span></span><br><span class="line"><span class="string">jq -r \'.[0].ContainerConfig.Cmd[2] | tostring\'/"</span> | \</span><br><span class="line">sh | \</span><br><span class="line">sed <span class="string">'s/^#(nop) //'</span></span><br></pre></td></tr></table></figure>
<p>上述代码第1行得到了组成指定镜像的层；第2行从docker history输出得到了各层的image ID；第3行排除标题行（带有“IMAGE”的那一行）及IMAGE的 ID为missing的那一行；第4行将镜像ID倒序输出，使其符合Dockerfile的顺序（“tac”是“cat”的倒序）；第5、6行使用前面命令输出的image ID构建一个docker inspect命令，它输出Docker layer metadata。而此metadata通过管道输入到jq命令中，jq命令过滤metadata，获取当时构建此镜像时Dockerfile中使用的命令。第7行运行前面通过sed构建的整个docker inspect管道链。第8行剥离不能更改文件系统的指令——那些以“#(nop)”作为前缀的指令。<br>最后得到的输出结果类似于如下这样：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.....</span><br><span class="line">CMD [<span class="string">"sh"</span>]</span><br><span class="line">MAINTAINER ian.miell@gmail.com</span><br><span class="line">ENV myenvname=myenvvalue</span><br><span class="line">LABEL mylabelname=mylabelvalue</span><br><span class="line">WORKDIR /opt</span><br><span class="line">mkdir -p copied</span><br><span class="line">COPY file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 <span class="keyword">in</span> copied/Dockerfile</span><br><span class="line">mkdir -p added</span><br><span class="line">ADD file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 <span class="keyword">in</span> added/Dockerfile</span><br><span class="line">touch /tmp/afile</span><br><span class="line">ADD file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 <span class="keyword">in</span> /</span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line">VOLUME [/data]</span><br><span class="line">ONBUILD touch /tmp/built</span><br><span class="line">ENTRYPOINT [<span class="string">"/bin/sh"</span> <span class="string">"-c"</span> <span class="string">"/bin/bash"</span>]</span><br><span class="line">CMD [<span class="string">"/bin/sh"</span> <span class="string">"-c"</span> <span class="string">"-r"</span>]</span><br></pre></td></tr></table></figure></p>
<p>上面的输出与初始的Dockerfile有些类似了，但还有些区别。FROM指令被替换成了上述CMD指令，丢失了使用的基础镜像BusyBox的信息。ADD和COPY命令没有使用原本的文件名而是使用的校验和（checksum），文件被拷贝到的位置保存了下来。最后，CMD和ENTRYPOINT命令变成了方括号的数组形式。<br>由于缺少构建上下文，使得ADD和COPY命令不能使用，上面逆向工程恢复的Dockerfile并不能不加修改就运行。你需要找出什么文件被添加到构建上下文中。对于前面那个例子来说，你可以启动镜像，进入容器的/opt/copied目录和/opt/added目录，将文件提取出来加入到你的新的构建上下文中。</p>
<h5 id="容器解决方案"><a href="#容器解决方案" class="headerlink" title="容器解决方案"></a>容器解决方案</h5><p>使用前面的方案得到你感兴趣镜像的信息，是一个有用并且具有指导意义的方法，然而有更加干净的方法来得到同样的结果——使用centurylink/dockerfile-from-image镜像，同时这种方法更容易维护。而且，此方案提供了与原始Dockerfile类似的FROM命令的信息（如果它可以提供的话）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">&gt;   dockerinpractice/dockerfile-from-image reverseme</span><br><span class="line">FROM busybox:latest</span><br><span class="line">MAINTAINER ian.miell@gmail.com</span><br><span class="line">ENV myenvname=myenvvalue</span><br><span class="line">LABEL mylabelname=mylabelvalue</span><br><span class="line">WORKDIR /opt</span><br><span class="line">RUN mkdir -p copied</span><br><span class="line">COPY file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 <span class="keyword">in</span> copied/Dockerfile</span><br><span class="line">RUN mkdir -p added</span><br><span class="line">ADD file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 <span class="keyword">in</span> added/Dockerfile</span><br><span class="line">RUN touch /tmp/afile</span><br><span class="line">ADD file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 <span class="keyword">in</span> /</span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line">VOLUME [/data]</span><br><span class="line">ONBUILD touch /tmp/built</span><br><span class="line">ENTRYPOINT [<span class="string">"/bin/sh"</span> <span class="string">"-c"</span> <span class="string">"/bin/bash"</span>]</span><br><span class="line">CMD [<span class="string">"/bin/sh"</span> <span class="string">"-c"</span> <span class="string">"-r"</span>]</span><br></pre></td></tr></table></figure>
<p>此技术只适用于基于Dockerfile创建的镜像——如果镜像是通过手工创建然后commit的，镜像间的区别不能体现在镜像的metadata里。</p>
<p><strong>然而发现有bug</strong>,可参考 <a href="https://github.com/lukapeschke/dockerfile-from-image" target="_blank" rel="noopener">https://github.com/lukapeschke/dockerfile-from-image</a>, 只支持用 image_id ，不能用 image name<br>主要使用方法如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## build the image</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lukapeschke/dockerfile-from-image.git</span><br><span class="line"><span class="built_in">cd</span> dockerfile-from-image</span><br><span class="line">docker build -t lukapeschke/dfa .</span><br><span class="line"></span><br><span class="line"><span class="comment">## To get a Dockerfile from an existing image:</span></span><br><span class="line">docker run --rm -v <span class="string">'/var/run/docker.sock:/var/run/docker.sock'</span> lukapeschke/dfa &lt;IMAGE_ID&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>出自 《Docker IN PRACTICE》一书</p>
</blockquote>
<p><strong>More Ref:</strong><br><a href="https://andyyoung01.github.io/2016/08/23/%E4%BB%8E%E9%95%9C%E5%83%8F%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%87%BADockerfile/" target="_blank" rel="noopener">https://andyyoung01.github.io/2016/08/23/%E4%BB%8E%E9%95%9C%E5%83%8F%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%87%BADockerfile/</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 镜像的扁平化</title>
    <url>/2019/07/25/docker-%E9%95%9C%E5%83%8F%E7%9A%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>Dockerfile 的设计以及它们产出 Docker 镜像的结果便是，最终镜像里包含了 Dockerfile 里每一步的数据状态。在构建镜像的过程中，可能需要复制私密信息来确保构建工作可以顺利进行。这些所谓的私密信息可能是 ssH 密钥、证书或者密码文件等。在提交镜像前删除这些私密信息的话可能不会提供任何实质性的保护，因为它们将出现在最终镜像的更高分层里，而恶意用户则可以轻松地从镜像中提取它们。解决这一问题的其中一个办法便是将得到的镜像扁平化。</p>
</blockquote>
<p><strong>问题</strong><br>想要从镜像的分层历史中移除私密信息。</p>
<p><strong>解决方案</strong><br>基于该镜像创建一个容器，将它导出再导人，然后给它打上最初镜像田的标签。</p>
<p><strong>讨论</strong><br>为了演示这种做法的可用场景，让我们在一个新目录里创建一个简单的 Dockerfile ，该目录下藏着一个大秘密。运行 mkdir secrets “ cd Secrets ，然后在该目录里创建一个包含如下内容的 Dockerfile :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM busybox</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"My Big secret"</span> &gt;&gt; /tmp/secret_key</span><br><span class="line">RUN cat /tmp/secret_key</span><br><span class="line">RUn rm /tmp/secret_key</span><br></pre></td></tr></table></figure>
<p>运行  <code>docker build -t mysecret .</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   docker build -t mysecret .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM busybox</span><br><span class="line"> ---&gt; 8c811b4aec35</span><br><span class="line">Step 2/4 : RUN <span class="built_in">echo</span> <span class="string">"My Big secret"</span> &gt;&gt; /tmp/secret_key</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 2b6f94ac0148</span><br><span class="line">Removing intermediate container 2b6f94ac0148</span><br><span class="line"> ---&gt; a9ecbe44119c</span><br><span class="line">Step 3/4 : RUN cat /tmp/secret_key</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> b515370b1b88</span><br><span class="line">My Big secret</span><br><span class="line">Removing intermediate container b515370b1b88</span><br><span class="line"> ---&gt; 8a890a1ace7c</span><br><span class="line">Step 4/4 : RUn rm /tmp/secret_key</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c9910e46efc2</span><br><span class="line">Removing intermediate container c9910e46efc2</span><br><span class="line"> ---&gt; 6010dbf70359</span><br><span class="line">Successfully built 6010dbf70359</span><br><span class="line">Successfully tagged mysecret:latest</span><br></pre></td></tr></table></figure></p>
<p>可以使用docker history 命令检查得到的Docker镜像的分层.如果该镜像上传到公有仓库，被他人下载，在没有原始 Dockerfile 到情况下，可以轻松获取私密信息。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   docker <span class="built_in">history</span> mysecret:latest</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">6010dbf70359        22 seconds ago      /bin/sh -c rm /tmp/secret_key                   0B</span><br><span class="line">8a890a1ace7c        23 seconds ago      /bin/sh -c cat /tmp/secret_key                  0B</span><br><span class="line">a9ecbe44119c        25 seconds ago      /bin/sh -c <span class="built_in">echo</span> <span class="string">"My Big secret"</span> &gt;&gt; /tmp/secr…   14B</span><br><span class="line">8c811b4aec35        14 months ago       /bin/sh -c <span class="comment">#(nop)  CMD ["sh"]                   0B</span></span><br><span class="line">&lt;missing&gt;           14 months ago       /bin/sh -c <span class="comment">#(nop) ADD file:5f0439d8328ab58c0…   1.15MB</span></span><br></pre></td></tr></table></figure></p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>将该镜像导出为一个简单运行的容器，然后再重新导入并给得到的镜像打上标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   docker run -d mysecret /bin/<span class="literal">true</span></span><br><span class="line">02cbd0f59623472acc4571c1b654cdca40730d036d7a96a7dbaacaaf264177aa</span><br><span class="line">➜   docker <span class="built_in">export</span> 02cbd0f5962 | docker import - mysecret</span><br><span class="line">sha256:080b122e43cb5d46efec5aa0b6abd0570e1abc52b3293f77b091bf22722c1168</span><br><span class="line">➜   docker <span class="built_in">history</span> mysecret</span><br><span class="line">IMAGE               CREATED             CREATED BY          SIZE                COMMENT</span><br><span class="line">080b122e43cb        9 seconds ago                           1.15MB              Imported from -</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo sytnax</title>
    <url>/2020/03/02/hexo-sytnax/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<p>@startuml<br>Bob -&gt; Alice : hello<br>@enduml</p>
<p><img src="/images/hexo_sytnax.png" alt="hexo sytnax"></p>
<p>目录categories和标签tags的说明:</p>
<blockquote>
<p>也不知道合不合适，目录包含标签，是一个大的范围，标签是具体的东西，属于其中，一个目录可包含多个标签。</p>
</blockquote>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a> ，具体过程也是参考链接完成安装、使用的。</p>
<h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>选用 <a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p>
<ul>
<li>不用注册账号</li>
<li>未注册最大5M,注册后最大10M。大小都够了，不行的话可以提前用 <a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a> 压缩一些</li>
<li>上传后提供多种格式供嵌入代码</li>
</ul>
<h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>使用<a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a>,其账号保持和github的账号一致，毕竟blog内容也在github上。用github用的邮箱注册一把，</p>
<blockquote>
<p>然后我当前的主题好像不支持</p>
</blockquote>
<p>该用Valine </p>
<blockquote>
<p>Valine是基于 LeanCloud 作为数据存储的</p>
</blockquote>
<ul>
<li><p>登录 <a href="https://console.leancloud.app/" target="_blank" rel="noopener">https://console.leancloud.app/</a> 注册 （用国际版，国内的版本似乎还要实名认证）</p>
</li>
<li><p>邮箱验证，手机验证</p>
</li>
<li><p>创建应用：<code>控制台 -&gt; 创建应用（开发版）</code></p>
</li>
<li><p>创建 Class: <strong>Counter</strong>，<strong>Comment</strong> (默认权限配置即可)</p>
</li>
<li><code>Settings-&gt; App keys</code> 获取<strong>AppID</strong>，<strong>AppKey</strong>。放到对应主题的 <code>_config.yml</code>中</li>
</ul>
<h3 id="链接中的括号"><a href="#链接中的括号" class="headerlink" title="链接中的括号"></a>链接中的括号</h3><p><strong>解决方法:</strong><br>%28 代替(, %29代替) 主要是后者会歧义链接部分的结束.，这是使用url符号码去代替ascii的符号，能够解决这个问题。</p>
<p><strong>例如：</strong><br>更多关于 Telegram 的介绍可以查看 [Wikipedia](<a href="https://en.wikipedia.org/wiki/Telegram_%28software%29）。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Telegram_%28software%29）。</a></p>
<h3 id="提示块"><a href="#提示块" class="headerlink" title="提示块"></a>提示块</h3><blockquote>
<p>目前主题貌似暂时不支持<br>[note]<br><strong>Note:</strong> This is a note.</p>
</blockquote>
<p>[warning]<br><strong>Warning:</strong> This is a warning.</p>
<blockquote>
<p>[warning] 我是warning类型引用</p>
</blockquote>
<hr>
<p>删除线</p>
<p><del>跑路指南哇</del></p>
<h3 id="文章框架"><a href="#文章框架" class="headerlink" title="文章框架"></a>文章框架</h3><p>同一类型的文章，比如技术类的，最好有一个框架用来提醒自己，把事情尽量写清楚；推荐看看<br><a href="https://github.com/do-community/do-article-templates" target="_blank" rel="noopener">文章框架</a></p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>highlight code on slide/ppt</title>
    <url>/2019/08/22/highlight-code-on-slide-ppt/</url>
    <content><![CDATA[<p><strong>only for mac</strong></p>
<p><strong>问题</strong><br>写ppt的时候代码如何呈现，能够看起来比较明显，更好是根据不同语言高亮</p>
<p><strong>解决方案</strong><br>highlight</p>
<ol>
<li><p>Install<br><code>brew install highlight</code></p>
</li>
<li><p>Use<br><code>hightlight -l -O rtf your_code.sh | pbcopy</code></p>
</li>
</ol>
<ul>
<li>hightlight –help 可以查看文档，</li>
<li>-l 显示行号，-O rtf为格式化输出 rtf 格式文本</li>
<li>pbcopy 是内置剪贴板</li>
</ul>
<p>到PPT里粘贴就行了，Keynote 和 PowerPoint 都可以使用.<br>example:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ cat output.sh</span><br><span class="line">docker <span class="built_in">exec</span> -it -u root tw-jenkins bash</span><br><span class="line"></span><br><span class="line">chmod 777 /var/run/docker.sock</span><br><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get -y install apt-transport-https \</span><br><span class="line">     ca-certificates \</span><br><span class="line">     curl \</span><br><span class="line">     gnupg2 \</span><br><span class="line">     software-properties-common &amp;&amp; \</span><br><span class="line">curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; <span class="built_in">echo</span> <span class="string">"<span class="variable">$ID</span>"</span>)/gpg &gt; /tmp/dkey; apt-key add /tmp/dkey &amp;&amp; \</span><br><span class="line">add-apt-repository \</span><br><span class="line">    <span class="string">"deb [arch=amd64] https://download.docker.com/linux/<span class="variable">$(. /etc/os-release; echo     "$ID")</span> \</span></span><br><span class="line"><span class="string">    <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">stable"</span> &amp;&amp; \</span><br><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get -y install docker-ce</span><br></pre></td></tr></table></figure></p>
<p><code>➜  ~ highlight -l -O rtf output.sh | pbcopy</code></p>
<p><img src="/images/highlight_demo01.png" alt="highlight_demo01.png"></p>
]]></content>
      <tags>
        <tag>PPT</tag>
      </tags>
  </entry>
  <entry>
    <title>http vs curl</title>
    <url>/2019/06/19/http-vs-curl/</url>
    <content><![CDATA[<blockquote>
<p>http不仅是个协议，还是一个命令。</p>
</blockquote>
<p>Httpie 是个 HTTP 的命令行客户端，http就是它的命令。</p>
<h4 id="1-Httpie-是什么"><a href="#1-Httpie-是什么" class="headerlink" title="1. Httpie 是什么"></a>1. Httpie 是什么</h4><p>Httpie （aych-tee-tee-pie）是一个 HTTP 的命令行客户端。其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。你可以用它很方便的用 http 的命令调试接口，最常用的应该就是 GET 和 POST 了。</p>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p>Linux上安装</p>
<ul>
<li><p>Debian, Ubuntu或Linux Mint<br><code>sudo apt-get install httpie</code></p>
</li>
<li><p>Fedora，CentOS/RHEL<br><code>sudo yum install httpie</code></p>
</li>
</ul>
<p>或者使用python的方式来安装<br><code>sudo  pip install --upgrade httpie</code></p>
<ul>
<li>Mac OSX<br><code>brew install httpie</code></li>
</ul>
<h4 id="3-http-command-能做什么"><a href="#3-http-command-能做什么" class="headerlink" title="3. http command 能做什么"></a>3. http command 能做什么</h4><blockquote>
<p>curl能做的，大部分都能做。</p>
</blockquote>
<p>HTTPie 基于 python 编写，内部使用了 Requests 和 Pygments 库。</p>
<p>HTTPie 的用法要比 cURL 直观很多，没有那么多选项，基本上心里怎么想就怎么写，默认输入和输出都是 json 格式 (而 cURL 必须要指定 -H “Content-Type: application/json”)。我们同样实现上面获取 token 的功能，效果如下:</p>
<ul>
<li>example 1:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  tmp http https://www.devops-tech.cn/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Age: 7</span><br><span class="line">Cache-Control: max-age=600</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 2510</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Wed, 19 Jun 2019 08:28:44 GMT</span><br><span class="line">ETag: W/<span class="string">"5d0848b1-2d66"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>others<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line"></span><br><span class="line">HTTPie: HTTP client, a user-friendly cURL replacement.</span><br><span class="line"></span><br><span class="line">- Download a URL to a file:</span><br><span class="line">    http -d example.org</span><br><span class="line"></span><br><span class="line">- Send form-encoded data:</span><br><span class="line">    http -f example.org name=<span class="string">'bob'</span> profile_picture@<span class="string">'bob.png'</span></span><br><span class="line"></span><br><span class="line">- Send JSON object:</span><br><span class="line">    http example.org name=<span class="string">'bob'</span></span><br><span class="line"></span><br><span class="line">- Specify an HTTP method:</span><br><span class="line">    http HEAD example.org</span><br><span class="line"></span><br><span class="line">- Include an extra header:</span><br><span class="line">    http example.org X-MyHeader:123</span><br><span class="line"></span><br><span class="line">- Pass a user name and password <span class="keyword">for</span> server authentication:</span><br><span class="line">    http -a username:password example.org</span><br><span class="line"></span><br><span class="line">- Specify raw request body via stdin:</span><br><span class="line">    cat data.txt | http PUT example.org</span><br></pre></td></tr></table></figure></p>
<h4 id="4-特点："><a href="#4-特点：" class="headerlink" title="4. 特点："></a>4. 特点：</h4><p>1、直观的语法<br>2、格式化和色彩化的终端输出<br>3、内置 JSON 支持<br>4、支持上传表单和文件<br>5、HTTPS、代理和认证支持<br>6、支持任意请求数据<br>7、自定义标题<br>8、持久性会话<br>9、类 Wget 下载<br>10、支持 Python 2.6, 2.7 和 3.x<br>11、支持 Linux, Mac OS X 和 Windows<br>12、插件<br>13、文档<br>14、测试覆盖率</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins date timezone update</title>
    <url>/2019/04/25/jenkins-date-timezone-update/</url>
    <content><![CDATA[<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>打开 【系统管理】-&gt;【脚本命令行】运行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">'org.apache.commons.jelly.tags.fmt.timeZone'</span>, <span class="string">'Asia/Shanghai'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/jenkins_run_image_01.png" alt="jenkins_run_image_01"></p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><pre><code class="java">JAVA_ARGS=<span class="string">"-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai -Dfile.encoding=UTF-8 -Djava.awt.headless=true"</span>
</code></pre>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl 常用命令</title>
    <url>/2019/10/21/kubectl-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="label操作"><a href="#label操作" class="headerlink" title="label操作"></a>label操作</h3><p>删除 label version=xx</p>
<p><code>kubectl label pod webui-746df859ff-z5fwt version-</code></p>
<p>添加 label<br><code>kubectl label pods labelex owner=michael</code></p>
<h3 id="deploy操作"><a href="#deploy操作" class="headerlink" title="deploy操作"></a>deploy操作</h3><p><code>kubectl create delpoy [deploy_name] --image=nginx</code></p>
<p><code>kubectl create deployment httpenv --image=iasonliu/httpenv</code></p>
<p>kubectl run [pod_name] –image=busybox</p>
<p>example:<br><code>kubectl run pingpong --image=alpine ping 1.1.1.1</code> or <code>kubectl run pingpong2 --image alpine ping 1.1.1.1</code></p>
<blockquote>
<p>当我们使用 kubectl run something启动deplyment的时候，label会是 run=something</p>
</blockquote>
<p><code>kubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1</code></p>
<h3 id="service操作"><a href="#service操作" class="headerlink" title="service操作"></a>service操作</h3><p>为webui创建service<br><code>kubectl expose deploy/webui --type=NodePort --port=80</code></p>
<h3 id="log操作"><a href="#log操作" class="headerlink" title="log操作"></a>log操作</h3><p>查看deploy日志<br><code>kubectl logs deploy/pingpong</code></p>
<p>查看pod日志<br><code>kubect logs [ pod_name]</code></p>
<hr>
<p>More Ref:</p>
<ul>
<li><a href="http://kubernetesbyexample.com/" target="_blank" rel="noopener">http://kubernetesbyexample.com/</a></li>
<li><a href="https://linuxacademy.com/blog/containers/kubernetes-cheat-sheet/" target="_blank" rel="noopener">https://linuxacademy.com/blog/containers/kubernetes-cheat-sheet/</a></li>
<li><a href="http://docs.kubernetes.org.cn/683.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/683.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>mktemp command</title>
    <url>/2019/05/07/mktemp-command/</url>
    <content><![CDATA[<p>最适合存储临时数据的位置是/tmp, <strong>mktemp</strong> 命令可以为临时文件或目录创建唯一的名字</p>
<p>Create a temporary file or directory.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mktemp</span><br><span class="line"></span><br><span class="line">Create a temporary file or directory.</span><br><span class="line"></span><br><span class="line">- Create an empty temporary file and return the absolute path to it:</span><br><span class="line">    mktemp</span><br><span class="line"></span><br><span class="line">- Create a temporary directory and return the absolute path to it:</span><br><span class="line">    mktemp -d</span><br><span class="line"></span><br><span class="line">- Create a temporary file with a specified suffix:</span><br><span class="line">    mktemp --suffix &quot;.txt&quot;</span><br></pre></td></tr></table></figure>
<h4 id="1-create-temporary-file-创建临时目录"><a href="#1-create-temporary-file-创建临时目录" class="headerlink" title="1.create temporary file (创建临时目录)"></a>1.create temporary file (创建临时目录)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filename</span>=`mktemp`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$filename</span></span><br><span class="line">/tmp/tmp.8xefliegnD9</span><br></pre></td></tr></table></figure>
<h4 id="2-create-temporary-directory-创建临时目录"><a href="#2-create-temporary-directory-创建临时目录" class="headerlink" title="2. create temporary directory (创建临时目录)"></a>2. create temporary directory (创建临时目录)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirname=`mktemp -d`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$dirname</span></span><br><span class="line">tmp.NJ8dhf6wk</span><br></pre></td></tr></table></figure>
<ul>
<li><p>If you just want to generate a filename and don’t want to create the actual file or directory, you can(如果仅仅是想生成文件名，不希望创建实际的文件或目录，可以):<br><code>mktemp -u</code></p>
</li>
<li><p>Create a temporary filename based on the tempplate(基于模板创建临时文件名)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  qr_blog mktemp study.XXX</span><br><span class="line">study.UWT</span><br><span class="line">➜  qr_blog mktemp study.XXX</span><br><span class="line">study.Usm</span><br><span class="line">➜  qr_blog mktemp study.XXX</span><br><span class="line">study.M6a</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Mac OS 与linux用法略有区别，请视情况使用</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrok demo</title>
    <url>/2019/07/22/ngrok-demo/</url>
    <content><![CDATA[<h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p><a href="https://dashboard.ngrok.com/get-started" target="_blank" rel="noopener">https://dashboard.ngrok.com/get-started</a><br><img src="/images/ngrok_demo_01.png" alt="ngrok_demo_01"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Downloads ./ngrok authtoken &lt;YOUR_AUTHTOKEN&gt;</span><br><span class="line">Authtoken saved to configuration file: /Users/xxx/.ngrok2/ngrok.yml</span><br></pre></td></tr></table></figure>
<h3 id="Demo-on-jenkins"><a href="#Demo-on-jenkins" class="headerlink" title="Demo on jenkins"></a>Demo on jenkins</h3><ol>
<li>启动本地的Jenkins服务，暴露端口 <strong>8081</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  jenkins_demo docker run -d --name jenkins4ngrok -p 8081:8080 jenkins/jenkins:latest</span><br><span class="line">c384aca32c27d2c2df58e76619bc63a758d5e7b358e59c5bf083cb739952c4c7</span><br><span class="line">➜  jenkins_demo docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">c384aca32c27        jenkins/jenkins:latest   <span class="string">"/sbin/tini -- /usr/…"</span>   2 seconds ago       Up 1 second         50000/tcp, 0.0.0.0:8081-&gt;8080/tcp   jenkins4ngrok</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Use ngrok, To start a HTTP tunnel on port 8081<br><code>➜  ./ngrok http 8081</code></li>
</ol>
<p><img src="/images/ngrok_demo_03.png" alt="ngrok_demo_03"></p>
<ol start="3">
<li>根据ngrok返回的，访问公网地址</li>
</ol>
<p>界面如下<br><img src="/images/ngrok_demo_02.png" alt="ngrok_demo_02"></p>
<p>More Ref:</p>
<ul>
<li><a href="https://ngrok.com/docs" target="_blank" rel="noopener">https://ngrok.com/docs</a></li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>packer intro</title>
    <url>/2019/08/30/packer-intro/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>packer</tag>
      </tags>
  </entry>
  <entry>
    <title>python module SimpleHTTPServer</title>
    <url>/2019/08/18/python-module-SimpleHTTPServer/</url>
    <content><![CDATA[<h3 id="what-is"><a href="#what-is" class="headerlink" title="what is"></a>what is</h3><p>The <strong>SimpleHTTPServer</strong> module can be used in the following manner in order to set up a very basic web server serving files <strong>relative</strong> to the current directory.</p>
<p>Warning SimpleHTTPServer is not recommended for production. It only implements basic security checks.</p>
<h4 id="Example-1-fetch-files-from-a-server"><a href="#Example-1-fetch-files-from-a-server" class="headerlink" title="Example 1: fetch files from a server"></a>Example 1: fetch files from a server</h4><ul>
<li><ol>
<li>Start <code>SimpleHTTPServer</code> on server node<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>   your_file_dir</span><br><span class="line">python -m SimpleHTTPServer &lt;PORT&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="2">
<li>Excute command on client node<br><code>wget &lt;SERVER_NODE_IP&gt;:&lt;PROT&gt;/relative path/test.sh</code></li>
</ol>
</li>
</ul>
<p><em>or</em> go to the browser and type this URL: <code>http://&lt;SERVER_NODE_IP&gt;:&lt;PROT&gt;</code> and see the output.</p>
<p><strong>✍TIP</strong><br>The SimpleHTTPServer module has been merged into http.server in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.<br><code>python3 -m http.server</code></p>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>shell shift用法</title>
    <url>/2019/10/22/shell-shift%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$0</td>
<td>命令本身</td>
</tr>
<tr>
<td style="text-align:left">$1,$2…</td>
<td>第1个参数、第2个参数……</td>
</tr>
<tr>
<td style="text-align:left">$#</td>
<td>参数的个数，不包括$0</td>
</tr>
<tr>
<td style="text-align:left">$@</td>
<td>以列表的形式返回参数列表，不包括$?</td>
<td>最后运行的命令结束代码</td>
</tr>
</tbody>
</table>
<p><strong>Example 1</strong></p>
<p>shift_test.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat shift_test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$#</span> != 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"prama is <span class="variable">$1</span>,prama size is <span class="variable">$#</span>"</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./shift_test.sh a b c</span></span><br><span class="line">prama is a,prama size is 3</span><br><span class="line">prama is b,prama size is 2</span><br><span class="line">prama is c,prama size is 1</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># cat img_downloader.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 3 ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> URL -d DIRECTORY"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$#</span> -gt 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  -d) <span class="built_in">shift</span>; directory=<span class="variable">$1</span>; <span class="built_in">shift</span> ;;</span><br><span class="line">  *) url=<span class="variable">$1</span>; <span class="built_in">shift</span>;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"directory is :<span class="variable">$directory</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"url is :<span class="variable">$url</span>"</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># ./img_downloader.sh -d images baidu.com</span></span><br><span class="line">directory is :images</span><br><span class="line">url is :baidu.com</span><br><span class="line"> <span class="comment"># ./img_downloader.sh baidu.com -d images</span></span><br><span class="line">directory is :images</span><br><span class="line">url is :baidu.com</span><br></pre></td></tr></table></figure></p>
<p>采用这种方法解析命令行参数的好处在于可以将 <em>-d</em> 置于命令行中的任意位置</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell 没有vim/vi 命令怎么办</title>
    <url>/2019/10/23/shell-%E6%B2%A1%E6%9C%89vim-vi-%E5%91%BD%E4%BB%A4%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<p>  由于经常在容器中有一些debug的操作，想要编辑文件，却又发现 <strong>一无所有</strong>（没有 vim/vi 编辑命令）。解决办法可能是去安装，但下载需要时间等待，且下载的工具使用也不是很频繁。所以换个思路，用其他基础的命令替代下。</p>
<h3 id="cat-EOF-常用方法"><a href="#cat-EOF-常用方法" class="headerlink" title="cat EOF 常用方法"></a>cat EOF 常用方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &lt;&lt;EOF &gt; cat_test.sh</span></span><br><span class="line">&gt; <span class="comment">#!/bin/bash</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"no vim/vi"</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"But ... cat"</span></span><br><span class="line">&gt; EOF</span><br></pre></td></tr></table></figure>
<p>可以用 <code>cat cat_test.sh</code> 核验下内容和格式是否正确；如果原文件存在且有内容，会直接 <strong>覆盖</strong> ☝</p>
<p><strong>追加</strong> 内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &lt;&lt;EOF &gt;&gt; cat_test.sh</span></span><br><span class="line">&gt; <span class="comment">#!/bin/bash</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"new add context"</span></span><br><span class="line">&gt; EOF</span><br></pre></td></tr></table></figure></p>
<h3 id="cat交互模式下的使用"><a href="#cat交互模式下的使用" class="headerlink" title="cat交互模式下的使用"></a>cat交互模式下的使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; cat_in.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"by cat."</span></span><br></pre></td></tr></table></figure>
<p>ctrl + d 结束输入</p>
<hr>
<p><strong>✍TIP</strong></p>
<ol>
<li><p>直接清空文件: <code>&gt;cat_test.sh</code></p>
</li>
<li><p>其实可以用其他字符来代替EOF，它也只是个标识符而已！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell 玩转sed，你不知道的用法</title>
    <url>/2019/10/23/shell-%E7%8E%A9%E8%BD%ACsed%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>sed 是 stream editor（流编辑器）的缩写</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">p</td>
<td>打印文本行(print)</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td>取消默认输出</td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td>删除(delete)</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td>字符串替换(substitude)</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td>追加新的文本(append)</td>
</tr>
</tbody>
</table>
<p>示例文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat example.conf</span></span><br><span class="line">username=this  username_2=this</span><br><span class="line">password=that</span><br><span class="line"></span><br><span class="line">url=this</span><br><span class="line"></span><br><span class="line">path=this</span><br></pre></td></tr></table></figure>
<h3 id="1-替换"><a href="#1-替换" class="headerlink" title="1.替换"></a>1.替换</h3><p>sed 命令会将 <code>s</code> 之后的字符视为命令分隔符，这允许我们更改默认的分隔符，如:<br><code>sed &#39;s:this:new:g&#39; example.conf</code><br><code>sed &#39;s|this|new|g&#39; example.conf</code><br>如果作为分隔符的字符出现在模式中，必须使用 <code>\</code>对其进行转义</p>
<p><code>sed &#39;s/this/new/&#39; example.conf</code>  替换 <strong>每行</strong>中 <strong>首次</strong> 匹配的内容</p>
<p>ouput:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username=new  username_2=this</span><br><span class="line">password=that</span><br><span class="line"></span><br><span class="line">url=new</span><br><span class="line"></span><br><span class="line">path=new</span><br></pre></td></tr></table></figure></p>
<p><code>sed &#39;s/this/new/g&#39; example.conf</code> g标记可以使sed执行全局替换</p>
<p><code>sed &#39;s/this/new/2g&#39; example.conf</code> #g可以使sed替换第N次出现的匹配</p>
<p>将1-4行的url换成address, s代表替换<br><code>sed &#39;1,4s/url/address/g&#39; example.conf</code></p>
<h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2.删除"></a>2.删除</h3><p><code>sed &#39;2,4d&#39; example.conf</code>  删除第2到4行  </p>
<p><code>sed -e &#39;/url/d&#39;  example.conf</code> 删除含”url”的行,输出到终端，实际没有替换文件</p>
<p><code>sed &#39;/appleapple/d;$d&#39; example.conf</code> 删除包含appleapple的行和最后一行($)  </p>
<p>移除空行<br><code>sed &#39;/^$/d&#39; file</code> 空行可以用 ^$ 进行匹配，最后的 /d 告诉sed不执行替换操作，而是直接删除匹配到的空行</p>
<hr>
<p><strong>✍TIP</strong></p>
<ol>
<li><p>首先使用不带 -i选项的sed命令，查看结果是否符合预期；再加入 -i选项将更改写入文件。</p>
</li>
<li><p><code>sed -i.bak &#39;s/abc/def&#39; file</code> 这时的sed不仅替换文件内容，还会创建一个名为file.bak的文件，其中包含着原始文件内容的副本;如果对一个文件多次执行，则xx.bak文件只会是上一个文件的副本</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux tutorial</title>
    <url>/2019/09/07/tmux-tutorial/</url>
    <content><![CDATA[<h3 id="1-tmux是什么"><a href="#1-tmux是什么" class="headerlink" title="1.tmux是什么"></a>1.tmux是什么</h3><pre><code>tmux (terminal multiplexer),是一个 BSD 协议发布的终端复用软件，用来在服务器端托管同时运行的 Shell.
</code></pre><p>效果如图：<br><img src="/images/image_tmux_01.png" alt="tmux_01"></p>
<center> tmux </center>

<p>几个重要概念：</p>
<ul>
<li>1.会话(session): 建立一个 tmux 工作区会话，会话可以长期驻留，重新连接服务器不会丢失，我们只需重新 tmux attach 到之前的工作区就可以恢复会话</li>
<li>2.窗口(window): 容纳多个窗格</li>
<li>3.窗格(pane): 可以在窗口中分成多个窗格</li>
</ul>
<p>主要解决以下问题：</p>
<ul>
<li>想同时打开多个目录不得不开很多终端标签来回切换</li>
<li>开了一个 vim 窗口之后，想切到其他目录不得不重新打开个一个终端窗口 ssh 到服务器</li>
<li>运行一个脚本，服务器断掉失联之后当前进程被服务器给无情地杀掉，不得不用 nohup 等方式让脚本在后台跑</li>
<li>…</li>
</ul>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install tmux       <span class="comment"># OSX</span></span><br><span class="line">pacman -S tmux          <span class="comment"># archlinux</span></span><br><span class="line">apt-get install tmux    <span class="comment"># Ubuntu</span></span><br><span class="line">yum install tmux        <span class="comment"># Centos</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#check tmux version</span></span><br><span class="line">➜  ~ tmux -V</span><br><span class="line">tmux 2.9a</span><br></pre></td></tr></table></figure>
<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><p>tmux的所有指令，都包含同一个前缀，默认为 <strong><code>Ctrl+b</code> </strong>，输入完前缀过后，<strong>控制台激活</strong>，命令按键才能生效。</p>
<ul>
<li>会话(session)<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建会话</span></span><br><span class="line">tmux new -s &lt;Session_Name&gt; <span class="comment"># tmux new-session -s &lt;Session_Name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出所有会话</span></span><br><span class="line">tmux ls  <span class="comment"># tmux list-session</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入会话</span></span><br><span class="line">tmux a -t &lt;Session_Name&gt; <span class="comment"># tmux attach -t , -t mean 'to' </span></span><br><span class="line"></span><br><span class="line"><span class="comment">###当且只有一个session时，可以直接输入命令 tmux a 或 tmux attach 进入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭会话</span></span><br><span class="line">tmux <span class="built_in">kill</span>-session -s &lt;Session_Name&gt; <span class="comment"># kill命令有kill-pane、kill-server、kill-session 和 kill-window共四种</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>快捷指令<br>(先按下 Tmux 前缀 <strong>ctrl+b</strong>,然后松开，继续按下面的字母)</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:new&lt;回车&gt;  启动新会话</span><br><span class="line">s           列出所有会话</span><br><span class="line">$           重命名当前会话</span><br><span class="line">d           暂时离开 deattach</span><br></pre></td></tr></table></figure>
<ul>
<li>窗口(window)<blockquote>
<p>快捷指令</p>
</blockquote>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">c  创建新窗口</span><br><span class="line">w  列出所有窗口</span><br><span class="line">n  后一个窗口 next</span><br><span class="line">p  前一个窗口 pervious</span><br><span class="line">f  查找窗口</span><br><span class="line">,  重命名当前窗口</span><br><span class="line">&amp;  关闭当前窗口</span><br><span class="line">数字0,1,2... 也可用来切换窗口</span><br></pre></td></tr></table></figure>
<ul>
<li>窗格(pane)<blockquote>
<p>快捷指令</p>
</blockquote>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">%  垂直分割</span><br><span class="line"><span class="string">"  水平分割</span></span><br><span class="line"><span class="string">上下左右 方向按键调整光标位置</span></span><br><span class="line"><span class="string">o  选择下一面板</span></span><br><span class="line"><span class="string">x  关闭窗格</span></span><br><span class="line"><span class="string">q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格</span></span><br><span class="line"><span class="string">&#123; 与上一个窗格交换位置</span></span><br><span class="line"><span class="string">&#125; 与下一个窗格交换位置</span></span><br><span class="line"><span class="string">z 切换窗格最大化/最小化</span></span><br></pre></td></tr></table></figure>
<p>其他：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">t  窗口中央显示一个数字时钟</span><br><span class="line">?  列出所有快捷键</span><br><span class="line">:  命令提示符</span><br></pre></td></tr></table></figure></p>
<p>基本配置：</p>
<ul>
<li><p>配置文件 <code>～/.tmux.conf</code> ,如修改 <em>默认的前缀快捷键</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ touch .tmux.conf</span><br><span class="line">$ cat .tmux.conf </span><br><span class="line"><span class="comment"># Change the prefix key to C-a</span></span><br><span class="line"><span class="built_in">set</span> -g prefix C<span class="_">-a</span>                          </span><br><span class="line">unbind C-b                                 </span><br><span class="line"><span class="built_in">bind</span> C<span class="_">-a</span> send-prefix</span><br></pre></td></tr></table></figure>
</li>
<li><p>生效配置 <code>tmux source-file ~/.tmux.conf</code> 或用动态载入配置的方法</p>
</li>
</ul>
<p>More ref:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=norO25P7xHg&amp;list=PLtK75qxsQaMJ_DmXk9yZbCBJuG9HRwlGc&amp;index=2" target="_blank" rel="noopener">tmux:Shared Sessions</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43687973" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43687973</a></li>
<li><a href="https://www.youtube.com/watch?v=BHhA_ZKjyxo&amp;list=PLtK75qxsQaMJ_DmXk9yZbCBJuG9HRwlGc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=BHhA_ZKjyxo&amp;list=PLtK75qxsQaMJ_DmXk9yZbCBJuG9HRwlGc</a></li>
<li><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="noopener">https://gist.github.com/ryerh/14b7c24dfd623ef8edc7</a></li>
<li><a href="http://louiszhai.github.io/2017/09/30/tmux/" target="_blank" rel="noopener">http://louiszhai.github.io/2017/09/30/tmux/</a></li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>xargs command</title>
    <url>/2019/06/21/xargs-command/</url>
    <content><![CDATA[<p>xargs 命令应该紧跟在管道操作符之后。它使用标准输入作为主要的数据源，将从 stdin 中读取的数据作为指定命令的参数并执行该命令。</p>
<p>例如：<br>在一组 C 语言源码文件中搜索自负串main:<br><code>ls *.c | sargs grep main</code></p>
<h4 id="Example-1-将多行输入-–-gt-单行输出"><a href="#Example-1-将多行输入-–-gt-单行输出" class="headerlink" title="Example 1: 将多行输入  –&gt; 单行输出"></a>Example 1: 将多行输入  –&gt; 单行输出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   cat example.txt</span><br><span class="line">1 2 3 4</span><br><span class="line">5 6</span><br><span class="line">7 8 9</span><br><span class="line">10 11</span><br><span class="line">➜   cat example.txt | xargs</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11</span><br></pre></td></tr></table></figure>
<h4 id="Example-2-将单行输入-–-gt-多行输出"><a href="#Example-2-将单行输入-–-gt-多行输出" class="headerlink" title="Example 2: 将单行输入  –&gt; 多行输出"></a>Example 2: 将单行输入  –&gt; 多行输出</h4><p>xargs 的 -n 选项可以限制每次调用命令时用到的参数个数。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜   cat example.txt | xargs -n  3</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 9</span><br><span class="line">10 11</span><br></pre></td></tr></table></figure></p>
<p>工作原理：<br>xargs 命令接收来自stdin的输入，将数据解析成单个元素，然后调用指定命令讲这些元素作为该命令的参数。xargs 默认使用 <strong>空白字符</strong> 分割输入并执行 <code>/bin/echo</code></p>
<h4 id="Example-3-自定义分隔符-d-选项"><a href="#Example-3-自定义分隔符-d-选项" class="headerlink" title="Example 3: 自定义分隔符 -d 选项"></a>Example 3: 自定义分隔符 -d 选项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"splitXsplit1Xsplit2Xsplit3"</span> | xargs -d X</span><br><span class="line">split split1 split2 split3</span><br></pre></td></tr></table></figure>
<h4 id="Example-4-结合find使用xargs"><a href="#Example-4-结合find使用xargs" class="headerlink" title="Example 4: 结合find使用xargs"></a>Example 4: 结合find使用xargs</h4><p><code>find . -type f -name &quot;*.txt&quot; -print0 | xargs -o grep -L image</code></p>
<p> 如果文件系统的有些文件名中包含忠哥，find 命令的 -print0 选项可以使用0（NUL）来分割查找到的元素，然后再用xargs对应的-0选项进行解析</p>
<p> 反例：<br> <code>$find . -type f -name &quot;*.txt&quot; -print | xargs rm -f</code><br>这样做很危险，由可能会误删除文件。我们无法预测 find命令输出的分隔符究竟是什么（究竟是‘\n’还是 ‘’）。如果由文件名中包含空格符（‘ ’ ），xargs会将其误认为是分隔符。例如， <code>bashrc text.txt</code> 会被是为 bashrc 和 text.txt 。因此上面的命令不会删除 <code>bashrc text.txt</code> ,而是会把 bashrc删除</p>
<p>正确的姿势：<br> <code>$find . -type f -name &quot;*.txt&quot; -print0 | xargs -0 rm -f</code></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p> <code>docker ps -a -q | xargs --no-run-if-empty docker rm -f</code></p>
<p> 参数 <code>--no-run-if-empty</code> 可以避免在前面的命令完全没有输出的情况下执行该命令</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>youtube 推荐频道(Non-tech)</title>
    <url>/2019/12/10/youtube-%E6%8E%A8%E8%8D%90%E9%A2%91%E9%81%93-Non-tech/</url>
    <content><![CDATA[<p>自从到新公司有梯子后，外出运动的时间变少了，都奉献给了youtube.有些节目被查水表了，<strong>“此帐户已被终止，因为我们收到多份第三方提交的关于该用户发布的内容侵犯版权的声明。”</strong> 所以也不能保证下面罗列的节目在未来可以持续观看</p>
<table>
<thead>
<tr>
<th style="text-align:left">频道</th>
<th style="text-align:left">关键字</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">梦觉教游泳</td>
<td style="text-align:left">postman,测试</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">一本好书</td>
<td style="text-align:left">devops,terraform</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">越哥说电影</td>
<td style="text-align:left">电影解读</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">树根朽木</td>
<td style="text-align:left">电影解读</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">宇哥讲电影</td>
<td style="text-align:left">电影、剧集解读</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">看电影了没</td>
<td style="text-align:left">电影</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">盗月社食遇记</td>
<td style="text-align:left">美食</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">回形针PaperClip</td>
<td style="text-align:left">科普</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">5分鐘DIY</td>
<td style="text-align:left">生活小技巧</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">四季萌芽</td>
<td style="text-align:left">火影</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">深夜讀書</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">PAPAYA 電腦教室</td>
<td style="text-align:left">office三件套</td>
</tr>
</tbody>
</table>
<p><a href="https://www.devops-tech.cn/2019/05/22/Small-Tools-1-youtube-dl/" target="_blank" rel="noopener">如何下载</a>youtube视频、音频</p>
]]></content>
      <tags>
        <tag>Q List</tag>
      </tags>
  </entry>
  <entry>
    <title>youtube 推荐频道(Tech)</title>
    <url>/2019/12/10/youtube-%E6%8E%A8%E8%8D%90%E9%A2%91%E9%81%93-Tech/</url>
    <content><![CDATA[<ul>
<li>Valentin Despa postman、 测试</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">频道</th>
<th style="text-align:left">关键字</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Valentin Despa</td>
<td style="text-align:left">postman,测试</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Nebulaworks</td>
<td style="text-align:left">devops,terraform</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">tutoriaLinux</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p><a href="https://www.devops-tech.cn/2019/05/22/Small-Tools-1-youtube-dl/" target="_blank" rel="noopener">如何下载</a>youtube视频、音频</p>
]]></content>
      <tags>
        <tag>Q List</tag>
      </tags>
  </entry>
  <entry>
    <title>乱七八说</title>
    <url>/2020/04/15/%E4%B9%B1%E4%B8%83%E5%85%AB%E8%AF%B4/</url>
    <content><![CDATA[<h3 id="自言自语"><a href="#自言自语" class="headerlink" title="自言自语"></a>自言自语</h3><p>不随意在论坛上发布言论，容易被不知上下文的人乱七八说。</p>
<blockquote>
<p>相比较，在技术论坛上，将自己的问题描述清楚，很多人乐意、有兴趣来帮你解决；最好把上下文给全一点，即使没有给全，一般技术人员会耐心的询问。但很多日常生活的论坛，缺乏谨慎、客观、耐心，弄不好就是一场大战。</p>
</blockquote>
<h3 id="ta说的"><a href="#ta说的" class="headerlink" title="ta说的"></a>ta说的</h3><p>“自由有各种不同的类型，而最宝贵那一种，在这个以胜利、成就和炫耀为基准的花花世界中，很少被人提及。<br>真正重要的那种自由，意味着专注、自觉、自律、不懈努”</p>
<p>“关乎于真正教育的真正价值，与成绩无关，与学位无关，而在于一种自觉——意识到什么是真实的，什么是必要的；这种自觉就隐藏在我们身边平淡无奇的生活之中，我们必须时时刻刻一遍又一遍地提醒自己”</p>
<blockquote>
<p>来自 <strong>大卫·福斯特·华莱士</strong>《生命中最简单又最困难的事》。最近才知道这么一个人，他是特别爱哲思的一个人，思考的角度不同于常人，提及的也是最容易被我们忽视的东西。看他的文字比较费脑子，但能感受到其真诚、朴实。  有人说哲学就是抬杠，就是钻牛角尖，就是较真儿…也没有错吧。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Q List</tag>
      </tags>
  </entry>
  <entry>
    <title>值得收藏的技术类站点</title>
    <url>/2019/10/04/%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F%E7%9A%84%E6%8A%80%E6%9C%AF%E7%B1%BB%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<p>一些技术公司，及其站点网站的列表，有很多高质量的文章和最佳实践。</p>
<p><a href="https://www.praqma.com/" target="_blank" rel="noopener">https://www.praqma.com/</a></p>
<p><a href="https://www.cloudbees.com/" target="_blank" rel="noopener">https://www.cloudbees.com/</a></p>
<p><a href="https://www.freecodecamp.org/" target="_blank" rel="noopener">https://www.freecodecamp.org/</a></p>
<p><a href="https://devopscube.com/" target="_blank" rel="noopener">https://devopscube.com/</a></p>
<p><a href="https://www.endpoint.com/blog" target="_blank" rel="noopener">https://www.endpoint.com/blog</a></p>
<p>技术归类：<a href="http://www.devopsbookmarks.com" target="_blank" rel="noopener">http://www.devopsbookmarks.com</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>入手Telegram</title>
    <url>/2020/04/17/%E5%85%A5%E6%89%8BTelegram/</url>
    <content><![CDATA[<p>听说有很多有趣的组织、个人都有电报，于是想看看。</p>
<h3 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1. 是什么？"></a>1. 是什么？</h3><p><a href="https://telegram.org/" target="_blank" rel="noopener">Telegram</a> —— 中文名又称”电报”，或简称”TG”。Telegram 是跨平台的即时通信软件。</p>
<p>作用和特色有点太多，还是直接上图吧👇</p>
<p><img src="https://s1.ax1x.com/2020/04/19/Juq1FU.png" alt="Juq1FU.png"></p>
<p>更多关于 Telegram 的介绍可以查看 [Wikipedia](<a href="https://en.wikipedia.org/wiki/Telegram_%28software%29）。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Telegram_%28software%29）。</a></p>
<h3 id="2-怎么用"><a href="#2-怎么用" class="headerlink" title="2. 怎么用"></a>2. 怎么用</h3><p>在中国大陆境内无法直接连接，注册和使用都需要科学上网。</p>
<p>自己注册过程如下：</p>
<ul>
<li><ol>
<li>为了不下载东西，在网页直接注册 <a href="https://web.telegram.org/" target="_blank" rel="noopener">https://web.telegram.org/</a><br>多次尝试无法注册，提示如下：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Too fast</span><br><span class="line">You are performing too many actions. Please try again later.</span><br><span class="line">Click for technical details</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<blockquote>
<p>其实尝试的次数并不多，1-2次后就有以上提示了。+ 86的中国大陆号码似乎收不到验证码</p>
</blockquote>
<ul>
<li><ol start="2">
<li>找一个临时的美国号码<blockquote>
<p>不太好使</p>
</blockquote>
</li>
</ol>
</li>
<li><p>[] 尚未注册成功</p>
</li>
</ul>
<h3 id="3-推荐内容"><a href="#3-推荐内容" class="headerlink" title="3. 推荐内容"></a>3. 推荐内容</h3><ul>
<li>[] todo </li>
</ul>
<hr>
<p><strong>More Ref:</strong><br><a href="https://www.notion.so/Telegram-95a6c23f0bb1466892b55f9ec8c755fd" target="_blank" rel="noopener">Telegram 教程全指南</a><br><a href="https://telegram.org/faq" target="_blank" rel="noopener">官网faq</a></p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Vivaldi入手</title>
    <url>/2020/04/09/%E5%85%A5%E6%89%8BVivaldi/</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><p>最近才在一些论坛上听说 <strong>Vivaldi</strong> 浏览器的大名（我孤陋寡闻了😅）。毕竟入手一个浏览器工具又不花钱，那Chrome挺好用的，为什么要换？</p>
<blockquote>
<p>尝尝新鲜的，换着试试看，毕竟不尝试一段时间怎么知道好不好。</p>
</blockquote>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>从<a href="https://en.wikipedia.org/wiki/Vivaldi_(web_browser" target="_blank" rel="noopener">维基百科的介绍</a>)来看，Vivaldi的来头可不小，创始人是 Opera 浏览器的前任CEO，估计中间有很多商业故事。使用 Chromium 做内核，能直接安装Chrome网上应用店的应用程序.2016年4月发布第一个版本，距今正好4年，算是比较年轻。后生可畏，轻装上阵，说不定比庞大的chrome会有一些小优势。</p>
<p><code>Vivaldi is a freeware, cross-platform web browser developed by Vivaldi Technologies, a company founded by Opera Software co-founder and former CEO Jon Stephenson von Tetzchner and Tatsuki Tomita. It was officially launched on April 6, 2016.</code></p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>直接到官网 <a href="https://vivaldi.com/" target="_blank" rel="noopener">https://vivaldi.com/</a> 下载安装对应系统的版本即可。我当前安装的具体版本是：<code>Vivaldi    2.11.1811.52 (Stable channel) (64-bit)</code></p>
<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><p>打开安装好的浏览器后会有一个链接 <code>vivaldi://welcome</code> ，引导做初始化设置</p>
<h5 id="3-1-引导"><a href="#3-1-引导" class="headerlink" title="3.1 引导"></a>3.1 引导</h5><p><strong>Welcome to Vivaldi</strong></p>
<blockquote>
<p>没啥～</p>
</blockquote>
<p><strong>Import Bookmarks &amp; Settings</strong></p>
<blockquote>
<p>不要要导入导出的步骤，vivaldi会要求输入电脑的密码获取权限拿其他浏览器的书签内容。</p>
</blockquote>
<p><strong>Pick a Theme</strong></p>
<blockquote>
<p>选背景主题，不多说，但是据说能够做很多自定义的设置，比如某个网站打开后指定其tab颜色。</p>
</blockquote>
<p><strong>Position Your Tabs</strong></p>
<blockquote>
<p>这里的Tabs指的是一般浏览器最上头一栏，可以切换你的网页的部分。vivaldi 支持你把这个Tabs放到 顶部、左边、右边、底部，但是一般还是习惯 顶部，暂时不换了。尝试了一下放到左边，占据的面积会大一些，因为会直接显示每个网页的缩略图，清晰的让你看到网页大致内容。</p>
</blockquote>
<p><strong>Get Going</strong></p>
<blockquote>
<p>观看指南的链接、加入社区的链接、关注多个社交账、号是否接收邮件</p>
</blockquote>
<p>更多详细的功能也可以看发布<a href="https://en.wikipedia.org/wiki/Vivaldi_(web_browser" target="_blank" rel="noopener">计划</a>#Releases)，毕竟每次新加功能都会在发布计划里提到。</p>
<h5 id="3-2-实际使用"><a href="#3-2-实际使用" class="headerlink" title="3.2 实际使用"></a>3.2 实际使用</h5><p>很容易实现在多panel功能，效果如下，方便对比、或者参考：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+-------------+ +-------------+</span><br><span class="line">|             | |             |</span><br><span class="line">|             | |             |</span><br><span class="line">| website 1   | |   website 2 |</span><br><span class="line">|             | |             |</span><br><span class="line">|             | |             |</span><br><span class="line">|             | |             |</span><br><span class="line">|             | |             |</span><br><span class="line">+-------------+ +-------------+</span><br></pre></td></tr></table></figure>
<p>针对网页记笔记，右边网页，左边笔记，后期也可查找、使用。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------------------------+</span><br><span class="line">|    ||                       |</span><br><span class="line">|    ||                       |</span><br><span class="line">|note||                       |</span><br><span class="line">|    ||       website         |</span><br><span class="line">|    ||                       |</span><br><span class="line">+-----|                       |</span><br><span class="line">|    ||                       |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure></p>
<hr>
<ul>
<li style="list-style: none"><input type="checkbox"> TODO 很多功能还未尝试，等用过后再来聊聊。不过听说<em>快捷键</em>、<em>网页笔记</em>（保存百度文库的复制内容？）算是特色吧</li>
</ul>
<ul>
<li style="list-style: none"><input type="checkbox"> TODO 但其实以前也没研究过chrome，firefox有没有类似功能。移动端来看，目前还只有 Android 版 Vivaldi，而且还是测试版本，估计等待不久就会出正式版。对开发人员而言，如何调试程序、定位bug，清理缓存数据？是否会有新的交互方式呢，</li>
</ul>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PL72e6dBabYNVRfpvEUt-WNfV7tZuKDAPB" target="_blank" rel="noopener">youtube播放列表</a></li>
<li>详细的功能也可以看发布计划,<a href="https://en.wikipedia.org/wiki/Vivaldi_(web_browser)#Releases" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Vivaldi_(web_browser)#Releases</a>, 毕竟每次新加功能都会在发布计划里提到</li>
<li>小工具<a href="http://asciiflow.com/" target="_blank" rel="noopener">asciiflow</a></li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>反摩尔定理 = 学如逆水行舟</title>
    <url>/2019/04/10/%E5%8F%8D%E6%91%A9%E5%B0%94%E5%AE%9A%E7%90%86-%E5%AD%A6%E5%A6%82%E9%80%86%E6%B0%B4%E8%A1%8C%E8%88%9F/</url>
    <content><![CDATA[<h3 id="1-什么是反摩尔定理？"><a href="#1-什么是反摩尔定理？" class="headerlink" title="1.什么是反摩尔定理？"></a>1.什么是反摩尔定理？</h3><p>Google(谷歌)的 CEO 埃里克•施密特在一次采访中指出，如果你反过来看摩尔定理， 一个 IT 公司如果今天和十八个月前卖掉同样多的、同样的产品，它的营业额就要降一半。IT 界把它称为 <strong>反摩尔定理</strong>。</p>
<h3 id="2-如何解释反摩尔定理"><a href="#2-如何解释反摩尔定理" class="headerlink" title="2.如何解释反摩尔定理"></a>2.如何解释反摩尔定理</h3><p>反摩尔定理的前提是摩尔定理（即当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上。）</p>
<p>打个比方： 小蓝公司 2018年6月，生产了1000万台手机，每台销售1000元，等过了18个月，由于摩尔定理的存在，硬件价格大大下降只有原来的一半即500元，在同样多的、同样的产品的情况下，营业额自然减半了。</p>
<h3 id="3-通俗解释"><a href="#3-通俗解释" class="headerlink" title="3.通俗解释"></a>3.通俗解释</h3><p>别人都在努力学习，而有个成绩优异的小忧同学现在成绩很好，等过了一年半载，其他人都进步很快，相对而言，那个成绩优异的小忧就退步了。</p>
<h3 id="4-影响"><a href="#4-影响" class="headerlink" title="4.影响"></a>4.影响</h3><ul>
<li>消极影响：<br>反摩尔定律对于所有的IT公司来讲，都是非常可怕的，因为一个IT公司花了同样的劳动，却只得到以前一半的收入。反摩尔定律逼着所有的硬件设备公司必须赶上摩尔定律所规定的更新速度</li>
<li>积极影响：<br>反摩尔定律促成科技领域质的进步，并为新兴公司提供生存和发展的可能。和所有事物的发展一样，IT领域的技术进步也有量变和质变两种。为了赶上摩尔定律预测的发展速度，光靠量变是不够的。每一种技术，过不了多少年，量变的潜力就会被挖掘光，这时就必须要有革命性的创造发明诞生。</li>
</ul>
<h3 id="5-‘反摩尔定理’-‘学如逆水行舟，不进则退’"><a href="#5-‘反摩尔定理’-‘学如逆水行舟，不进则退’" class="headerlink" title="5.‘反摩尔定理’ == ‘学如逆水行舟，不进则退’"></a>5.‘反摩尔定理’ == ‘学如逆水行舟，不进则退’</h3><p>总结一下，IT界三大定律: <strong>摩尔定律</strong> 、<strong>反摩尔定律</strong>、<strong><a href="https://qinrui777.github.io/2019/03/27/%E5%AE%89%E8%BF%AA-%E6%AF%94%E5%B0%94%E5%AE%9A%E5%BE%8B-Andy-and-Bill%E2%80%99s-Law/" target="_blank" rel="noopener">安迪-比尔定律</a></strong> </p>
<blockquote>
<p>小编之前就知道一个，有点儿孤陋寡闻了 &gt;::&lt;</p>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>浪潮之巅</tag>
      </tags>
  </entry>
  <entry>
    <title>安迪-比尔定律(Andy and Bill’s Law)</title>
    <url>/2019/03/27/%E5%AE%89%E8%BF%AA-%E6%AF%94%E5%B0%94%E5%AE%9A%E5%BE%8B-Andy-and-Bill%E2%80%99s-Law/</url>
    <content><![CDATA[<h3 id="这句话出处是哪里？"><a href="#这句话出处是哪里？" class="headerlink" title="这句话出处是哪里？"></a>这句话出处是哪里？</h3><pre><code>“Andy gives,Bill takes away.(安迪提供什么，比尔拿走什么)&quot;
</code></pre><h3 id="什么是安迪-比尔定律？"><a href="#什么是安迪-比尔定律？" class="headerlink" title="什么是安迪-比尔定律？"></a>什么是安迪-比尔定律？</h3><p>Andy指的是原英特尔公司CEO 安迪•格鲁<a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E8%BF%AA%C2%B7%E8%91%9B%E6%B4%9B%E5%A4%AB" target="_blank" rel="noopener">Andy Grove</a>；Bill就是微软的比尔•盖茨.</p>
<p>这句话的意思是，英特尔公司总裁安迪·格罗夫一旦向市场推广了一种新型芯片产品，微软CEO比尔盖茨就会及时的升级自己的软件产品，吸收新型芯片的高性能。硬件提高的性能，很快被软件消耗掉了。似乎两方是一对黄金搭档，心照不宣。</p>
<blockquote>
<p>简而言之，安迪-比尔定律揭示了硬件和软件相互促进彼此，不断更新换代的现象。</p>
</blockquote>
<h3 id="为什么要“更新”？"><a href="#为什么要“更新”？" class="headerlink" title="为什么要“更新”？"></a>为什么要“更新”？</h3><h6 id="1-从买卖双方分析："><a href="#1-从买卖双方分析：" class="headerlink" title="1.从买卖双方分析："></a>1.从买卖双方分析：</h6><p>对于厂商、公司而言，只有不断的推出新产品，才能有营收，才能获得更大的市场，最终通常是为了赚更多的钱。对于个人而言，个人的欲望在不断的增长，大哥比方：以前村里的张三有个mp3听听歌就可能满足的不行了，但是看着县里的李四拿着最新的mp4不仅能听歌，还能下载电影看，于是就渴望也有一个新玩意。过了一年半载出了一个新的手机，不仅有上述功能，还可以在线打游戏，只有拥有它才可以和别的小伙伴一起“冲锋陷阵”…</p>
<h6 id="2-从硬件、软件公司分析："><a href="#2-从硬件、软件公司分析：" class="headerlink" title="2.从硬件、软件公司分析："></a>2.从硬件、软件公司分析：</h6><p>还是拿上面的例子，硬件公司老是生产mp3，等到大家差不多人手一个的时候，就赚不到更多的钱了。而这个时候有软件公司开发的新的软件，需要用新的设备才能运行，硬件公司还能又卖一波新硬件，而且又是新的市场，单价一般而言更贵，于是乎这样赚钱的机会怎么能放过。同业的竞争公司看到这样的趋势，也加紧研发去抢新的蛋糕（旧的蛋糕都快被人吃的差不多了，新的蛋糕就看谁做的快做的好了）。软件公司这时也纷纷用新的思路去做更多的软件，吸引新用户，也想着做一些更牛逼的软件（虽然现在硬件水平跟不上，但是总有一天那些硬件会有的，加紧研发自己的软件就准没错）。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>浪潮之巅</tag>
      </tags>
  </entry>
  <entry>
    <title>巨浪下的小学</title>
    <url>/2020/04/08/%E5%B7%A8%E6%B5%AA%E4%B8%8B%E7%9A%84%E5%B0%8F%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>《巨浪下的小学》是一本书名，一位旅居日本的英国作家，“钻牛角尖”式地调查、反思一场日本东北部海啸的事件。更多的内容用在描述记录发生悲剧的原因、灾难后幸存者的生活、与政府打官司的过程。结局尚不揭秘，下文再聊。</p>
<h3 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h3><blockquote>
<p>震动本身并没有那么令人害怕，但它会越来越强烈，而且不知道何时会结束，这才令人胆战心惊</p>
</blockquote>
<blockquote>
<p>伤亡人数极难确定。晚上6:30，电视新闻报道称有23人死亡。但到了晚上9点，这一数字上升到61人，午夜过后，各大通讯社报道仍称死亡人数为64人。显然，随着通信逐渐恢复，具体数字还将继续上升。这种情况通常会催生一种非理性的悲观情绪，人们会倾向于相信最糟糕的可能性，而最终结果很可能没有那么坏。</p>
</blockquote>
<blockquote>
<p>恐惧生根发芽，对于看不见的毒物的恐惧在空中飘荡，在水中流淌</p>
</blockquote>
<blockquote>
<p>那些在战区和灾区工作的人，过了一段时间后，就会习得一种从事件中抽离出来的本领。这是一种职业需要：如果轻易就被这种死亡和痛苦的景象压垮，那没有哪个医生、救援人员或记者能干好自己的工作。获得这种本领的诀窍在于收起同情心，不要把每个人的悲剧当成自己的悲剧，而我已经掌握这一窍门。我知道发生了什么，我也知道一切是多么骇人听闻，但关键是我自己不能被吓倒。</p>
</blockquote>
<blockquote>
<p>他们有一张“灾害地图”，用来标识易受海啸袭击的沿海地区，但上面没有釜谷。他们在编写学校应急手册时，没有考虑到海啸的可能性，也没有进行海啸疏散演习。市政府也没有人检查学校的应急准备工作。报告还总结称，学校的老师从心理上无法接受危险迫在眉睫这件事。</p>
</blockquote>
<blockquote>
<p>海啸过后的几年时间里，日本发生了各种各样的变化，但结果是让民众因此失去而不是获得力量和信心。其中部分原因是整个东亚地区都变得越来越不安稳——朝鲜的咄咄逼人，还有中国的自信满满。但关键还是在于日本领导层与其所应该代表的民众之间的隔阂越来越大。</p>
</blockquote>
<blockquote>
<p>“孩子被看不见的怪物谋杀了，”紫桃佐代美说，“我们向它发泄愤怒，可是它没有任何反应。它就好像一团黑影，没有人类的温暖。”她继续说，“海啸是个看得见的怪物。可是，看不见的怪物将永远存在。</p>
</blockquote>
<blockquote>
<p>隆洋则说：“人类制造的一切最终都将被自然摧毁。高山与河流都是大自然的产物，它们将继续存在。而人类的一切都会消逝。我们需要重新思考我们给予大自然的尊重。”</p>
</blockquote>
<blockquote>
<p>但是，大川小学悲剧的处理问题总是笼罩着一层不光彩、不公正的阴云，他们似乎都在拼命抑制某种恐慌，笨拙地掩饰着什么。有时候，这似乎既体现了他们的无能，又像是一个蓄谋已久的阴谋。每隔几周就会出现新的面孔，但依旧面无表情且无能。</p>
</blockquote>
<blockquote>
<p>旧盟友和老相识之间反而散发出一种同志般的快乐之情。但在场的每个人都做好了失败的准备。吉冈已经竭尽全力打这场官司，但仍然无法改变某些事实。</p>
</blockquote>
<p>书中有很多地方，值得我反复的阅读，因为每次阅读都会有新的发现，新的思考。而作者也在尽全力地完整的呈现海啸中到底发生了什么，海啸后人们的生活、精神状况。更多的内容也可以看看豆瓣上<a href="https://book.douban.com/subject/34820857/blockquotes?sort=score&amp;start=0" target="_blank" rel="noopener">其他的摘录</a>，但最好是不要断章取义，看完上下文再作出评论。</p>
<h3 id="几点有感"><a href="#几点有感" class="headerlink" title="几点有感"></a>几点有感</h3><blockquote>
<p>可能对原文有误解，或者解读错误的地方，请不要全信我，欢迎指出纰漏！</p>
</blockquote>
<h5 id="1-灾难意识"><a href="#1-灾难意识" class="headerlink" title="1.灾难意识"></a>1.灾难意识</h5><p>生活在大川附近的人都感觉自己不是在海边，生活习惯更多的像是在内陆，可能是因为种植很多水稻，没见到文中提及很多村民靠出海打渔为生。地震在日本很常见，但是地震后的海啸确是人们潜意识中难以置信的，所以也造成了悲剧的发生。就像很多灾难的发生一样，人们没有意识到、不相信，于是心态极好地不应对、不防护，结果造成了不堪的后果。</p>
<p>“另可信其有，不可信其无”。这句话用在灾难面前还是需要做到的，毕竟你防范了也没有什么损失。</p>
<h5 id="2-“发生了什么”"><a href="#2-“发生了什么”" class="headerlink" title="2.“发生了什么”"></a>2.“发生了什么”</h5><p>是学校缺乏正确、清晰的应急手册？还是老师们没有危机意识？ 是疏忽大意，还是定义为过失、玩忽职守？</p>
<p>那天海啸时，到底发生了什么？是失去孩子们的家长想知道的，并不是想得到什么，或许只想知道孩子最好和谁在一起，在做什么。而面对政府、教育部的遮掩，可能加深了家长们的猜测。看起来像是，一群人探寻一个被遮掩的真相，而一部分日本人民也有着执拗的性格。</p>
<p>除了寻找那天的真相，另一个场景也在寻找。有的孩子遗体很快被找到，但有一些却一直在搜寻中。父母一直要找到孩子的遗体，坚持1-2个月，甚至2-3年，不幸的便是至今未找到。父母心中可能是对去世孩子的愧疚，又或者是其他的原因驱使着他们坚持。</p>
<p>文章中很多文字可以看到作者愤怒的情绪，对制度的愤怒，对一些人某种不承认的愤怒。</p>
<h5 id="3-灾难之后"><a href="#3-灾难之后" class="headerlink" title="3.灾难之后"></a>3.灾难之后</h5><p>人们关系的改变，失去孩子的父母关系更加密切，而与那些幸运的家庭越行越远，之前不认识的家长一同寻找各自的孩子，相互抱团 、理解 。</p>
<p>次生灾害的发生，寻找僧人超度鬼魂…</p>
<h5 id="4-谈一下结局"><a href="#4-谈一下结局" class="headerlink" title="4.谈一下结局"></a>4.谈一下结局</h5><p>海啸发生于2011年3月，中间历经多轮较量，最终2016年10月法院作出判决–“赔偿14.3亿日元，少于家长要求的 23亿日元”。赔偿数字不是人们追寻的，而是那个天平的位置、家长们心中的价值、事故责任归属。家长心中悬空已久的大石头，慢慢放下，然后开始余生的生活。</p>
<h5 id="5-启示"><a href="#5-启示" class="headerlink" title="5.启示"></a>5.启示</h5><p>还有多少类型的灾难？地震、海啸、山洪、病毒、火灾、虫害、缺水少粮…</p>
<p>需要准备什么？物质准备、精神准备、人情冷暖…</p>
<p>灾难之后呢，该怎么应对？避免次生灾害，寻找出路，改变生活…</p>
<blockquote>
<p>书不尽言，言不尽意。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>枢纽1</title>
    <url>/2020/04/02/%E6%9E%A2%E7%BA%BD1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="用心想想，ta可能用什么密码" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c47e18f1b6f53d858e78bda78827132950495876d71922e41c4f877e813f7085"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Q List</tag>
      </tags>
  </entry>
  <entry>
    <title>画UML</title>
    <url>/2020/02/25/%E7%94%BBUML/</url>
    <content><![CDATA[<p>TL;DR<br>用 <strong>文字</strong> + <strong>工具</strong> ，画个好图</p>
<h3 id="什么是-UML"><a href="#什么是-UML" class="headerlink" title="什么是 UML"></a>什么是 UML</h3><p>全称 Unified Modelling Language,<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">UML维基百科</a></p>
<h3 id="什么是-PlantUML"><a href="#什么是-PlantUML" class="headerlink" title="什么是 PlantUML"></a>什么是 PlantUML</h3><p>是一个开源项目，支持快速绘制各种图，包括 时序图、用例图、类图、活动图、组件图、状态图、对象图、部署图、定时图；同时还支持以下非UML图:线框、图形界面、架构图、规范和描述语言 (SDL)、Dita diagram、甘特图 、思维导图 </p>
<p>官网：<a href="https://plantuml.com/zh/" target="_blank" rel="noopener">https://plantuml.com/zh/</a>, 包含了各种具体用法，比如更改字的颜色，图片背景颜色等</p>
<h3 id="举几个🌰🌰"><a href="#举几个🌰🌰" class="headerlink" title="举几个🌰🌰"></a>举几个🌰🌰</h3><p><strong>示例1: 画一个UML</strong><br>工具: VSCode +  插件 plantuml<br>步骤：</p>
<ul>
<li>1.打开VSCode,安装插件 plantuml <blockquote>
<p>似乎要提前安装JDK,由于我本机已经安装，暂没验证这一步</p>
</blockquote>
</li>
<li>2.新建文件 <code>example1.wsd</code></li>
<li><p>3.添加内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@startmindmap</span><br><span class="line">skinparam  true</span><br><span class="line">* 数据库运维</span><br><span class="line">** 安装</span><br><span class="line">*** 如何安装</span><br><span class="line">*** 如何设置高可用</span><br><span class="line">** 备份</span><br><span class="line">** 恢复</span><br><span class="line">@endmindmap</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.按 <code>alt + d</code>,立马会生成UML图</p>
</li>
</ul>
<p><strong>示例2: 给md文档添加 UML 图</strong><br>好处：不用单独保留一张图片，然后再插入到 <code>readme.md</code> 文档中<br>工具: markdown<br>新建md文件，比如 <code>example2.md</code>,成果如下：</p>
<p><img src="/images/uml_example2.png" width="80%" height="80%"></p>
<p>只能利用vscode 打开时，才能看到图形，如用浏览器，打开一个readme.md文档，是无法看到图形的</p>
<hr>
<p><strong>More Ref:</strong>  </p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">UML维基百科</a></li>
<li><a href="https://www.freecodecamp.org/news/inserting-uml-in-markdown-using-vscode/" target="_blank" rel="noopener">参考例子</a></li>
<li><a href="https://youtu.be/0MEs4WrOZmk" target="_blank" rel="noopener">youtube视频</a></li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情的启示[伪上帝之眼]</title>
    <url>/2020/04/10/%E7%96%AB%E6%83%85%E7%9A%84%E5%90%AF%E7%A4%BA-%E4%BC%AA%E4%B8%8A%E5%B8%9D%E4%B9%8B%E7%9C%BC/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>移动端打包pipeline通识：从零开始</title>
    <url>/2020/01/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%93%E5%8C%85pipeline%E9%80%9A%E8%AF%86%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>背景： 一台被格式化后的 MacBook Pro, 对某个移动端项目( xx类型 )做android pipeline、iOS pipeline</p>
<p>网络：公司网络（可翻墙）</p>
<blockquote>
<p>makefile</p>
</blockquote>
<p>记得验证/确认</p>
<h3 id="1-安装-Set-up"><a href="#1-安装-Set-up" class="headerlink" title="1-安装/Set up"></a>1-安装/Set up</h3><h5 id="1-1-install-brew"><a href="#1-1-install-brew" class="headerlink" title="1.1 install brew"></a>1.1 install brew</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line">brew -v</span><br></pre></td></tr></table></figure>
<p>brew cask 是在brew 的基础上一个增强的工具，用来安装Mac上的Gui程序应用包（.dmg/.pkg）, 比如qq、chrome等。它先下载解压到统一的目录中（/opt/homebrew-cask/Caskroom），省掉了自己去下载、解压、拖拽（安装）等步骤，同样，卸载相当容易与干净。然后再软链到~/Applications/目录下, 非常方便，而且还包含很多在 AppStore 里没有的常用软件。</p>
<h5 id="1-2-install-brew-cask"><a href="#1-2-install-brew-cask" class="headerlink" title="1.2 install brew cask"></a>1.2 install brew cask</h5><p><code>brew install brew-cask-completion</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Desktop brew cask</span><br><span class="line">Homebrew Cask provides a friendly CLI workflow <span class="keyword">for</span> the administration</span><br><span class="line">of macOS applications distributed as binaries.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">    --cache    display the file used to cache the Cask</span><br><span class="line">    audit      verifies installability of Casks</span><br><span class="line">    cat        dump raw <span class="built_in">source</span> of the given Cask to the standard output</span><br><span class="line">    create     creates the given Cask and opens it <span class="keyword">in</span> an editor</span><br><span class="line">    doctor     checks <span class="keyword">for</span> configuration issues</span><br><span class="line">    edit       edits the given Cask</span><br><span class="line">    fetch      downloads remote application files to <span class="built_in">local</span> cache</span><br><span class="line">    home       opens the homepage of the given Cask</span><br><span class="line">    info       displays information about the given Cask</span><br><span class="line">    install    installs the given Cask</span><br><span class="line">    list       with no args, lists installed Casks; given installed Casks, lists staged files</span><br><span class="line">    outdated   list the outdated installed Casks</span><br><span class="line">    reinstall  reinstalls the given Cask</span><br><span class="line">    style      checks Cask style using RuboCop</span><br><span class="line">    uninstall  uninstalls the given Cask</span><br><span class="line">    upgrade    upgrades all outdated casks</span><br><span class="line">    zap        zaps all files associated with the given Cask</span><br><span class="line"></span><br><span class="line">See also <span class="string">"man brew-cask"</span></span><br></pre></td></tr></table></figure>
<h5 id="1-3-install-java"><a href="#1-3-install-java" class="headerlink" title="1.3 install java"></a>1.3 install java</h5><h3 id="方法一-官网下载"><a href="#方法一-官网下载" class="headerlink" title="方法一: 官网下载"></a>方法一: 官网下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-cookies --no-check-certificate --header <span class="string">"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;"</span> <span class="string">"https://download.oracle.com/otn/java/jdk/8u231-b11/5b13a193868b4bf28bcb45c792fce896/jdk-8u231-macosx-x64.dmg"</span></span><br></pre></td></tr></table></figure>
<p>方法二： brew cask下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/cask-versions</span><br><span class="line">brew cask install adoptopenjdk8</span><br></pre></td></tr></table></figure>
<p>检查版本：<code>java -version</code></p>
<h5 id="1-4-install-jenkins"><a href="#1-4-install-jenkins" class="headerlink" title="1.4 install jenkins"></a>1.4 install jenkins</h5><p>在Mac OS上安装jenkins的N(4)种方法</p>
<ul>
<li>方法一： 下载war包，java命令启动<br><code>curl -L -O http://mirrors.jenkins-ci.org/war/2.211/jenkins.war</code></li>
</ul>
<p><code>java -jar /xx/xx/jenkins.war --httpPort=8080</code></p>
<ul>
<li><p>方法二： 将下载的war包文件部署到 tomcat servlet 容器，用脚本 startup.sh 启动</p>
<blockquote>
<p>暂不介绍</p>
</blockquote>
</li>
<li><p>方法三： brew 安装&amp;启动</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#install jenkins, Requires Java 1.8, [issus](https://github.com/Homebrew/homebrew-core/issues/39037)</span></span><br><span class="line">brew install jenkins-lts</span><br><span class="line"><span class="comment"># start jenkins, default port: 8080</span></span><br><span class="line">brew services start jenkins-lts</span><br><span class="line"><span class="comment"># stop jenkins</span></span><br><span class="line">brew services stop jenkins-lts</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>修改默认端口 <a href="https://medium.com/@vishnuteja/install-jenkins-as-a-service-on-macos-and-change-port-number-9aa097e5cfbf" target="_blank" rel="noopener">link</a></li>
<li>假设希望jenkins能够开机自启动以及异常自己主动重新启动 <a href="https://yq.aliyun.com/articles/349494?spm=a2c4e.11153940.0.0.2a706e73I8msiV" target="_blank" rel="noopener">link</a></li>
</ul>
</blockquote>
<p><code>sudo touch /Library/LaunchDaemons/org.jenkins-ci.plist</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Jenkins<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/java<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-Dmail.smtp.starttls.enable=true<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-jar<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/opt/jenkins/libexec/jenkins.war<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>--httpListenAddress=127.0.0.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>--httpPort=8080<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>jenkins<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方法四： docker container 启动，添加宿主机作为一个slave node，并使用</li>
</ul>
<p>TODO:<br>[] jenkins加入到开机自启动<br>[X] 定制化配置等</p>
<p>我是谁 -&gt; <code>whoami</code><br>我在哪里 -&gt; <code>pwd &amp;&amp; ls -al</code><br>我要到哪里去 -&gt;  <em>New item</em></p>
<h3 id="配置项目pipeline"><a href="#配置项目pipeline" class="headerlink" title="配置项目pipeline"></a>配置项目pipeline</h3><p>安装项目所需工具 cocoapods </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install cocoapods</span></span><br><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>检查所有工具的版本<br>xcodebuild -version<br>react-native</p>
<p>添加jenkins 凭证</p>
<p>ref:</p>
<ul>
<li><a href="https://juejin.im/post/5cd2a50e518825356d54b847" target="_blank" rel="noopener">brew &amp; brew cask</a></li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
  </entry>
  <entry>
    <title>给博客上个锁</title>
    <url>/2020/04/02/%E7%BB%99%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%B8%AA%E9%94%81/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="用心想想，ta可能用什么密码" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="e3ba2a2745f8b54091e691830ca3c77c3a7af95ed890a95b99fb0973d65cc760"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>获取fir中的ios ipa安装包</title>
    <url>/2019/04/09/%E8%8E%B7%E5%8F%96fir%E4%B8%AD%E7%9A%84ios-ipa%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<h2 id="主要是针对iOS-移动端的打包，下载可能出现的需求。"><a href="#主要是针对iOS-移动端的打包，下载可能出现的需求。" class="headerlink" title="主要是针对iOS 移动端的打包，下载可能出现的需求。"></a>主要是针对iOS 移动端的打包，下载可能出现的需求。</h2><blockquote>
<p>通常流程： pipeline用fir cli命令，或者dev同学用fir cli直接将产出的xx.ipa软件包推送到fir仓库，Qa同学以及业务同事直接拿二维码下载安装在手机上即可。</p>
</blockquote>
<blockquote>
<p>新需求： 安全团队的同事需要直接拿xx.ipa软件包做安全方面的扫描、测试工作，怎么办？</p>
</blockquote>
<p>～～～请看下面～～～</p>
<h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><h4 id="1-用浏览器打开fir链接地址"><a href="#1-用浏览器打开fir链接地址" class="headerlink" title="1.用浏览器打开fir链接地址"></a>1.用浏览器打开fir链接地址</h4><p><img src="/images/fir_image_01.png" alt="fir_image_01"></p>
<h4 id="2-模拟手机下载的请求"><a href="#2-模拟手机下载的请求" class="headerlink" title="2.模拟手机下载的请求"></a>2.模拟手机下载的请求</h4><p>打开 <strong>开发者工具</strong> ，模拟iPhone，刷新一下<br><img src="/images/fir_image_02.png" alt="fir_image_02"></p>
<p>点击 “下载安装”<br><img src="/images/fir_image_03.png" alt="fir_image_03"></p>
<h4 id="3-获取url"><a href="#3-获取url" class="headerlink" title="3.获取url"></a>3.获取url</h4><p><img src="/images/fir_image_04.png" alt="fir_image_04"></p>
<h4 id="4-获取下载ipa文件的下载地址："><a href="#4-获取下载ipa文件的下载地址：" class="headerlink" title="4.获取下载ipa文件的下载地址："></a>4.获取下载ipa文件的下载地址：</h4><p><img src="/images/fir_image_05.png" alt="fir_image_05"></p>
<p><strong>header</strong> 的 <strong>key-value</strong> 如下：</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value </th>
</tr>
</thead>
<tbody>
<tr>
<td>User-Agent</td>
<td>Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1</td>
</tr>
<tr>
<td>Upgrade-Insecure-Requests</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>当然可以直接用下面的命令得到下载地址:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s -X GET \</span><br><span class="line">  <span class="string">'https://apps-cn.xxx.com/fir-api-&lt;3中的url&gt;'</span> \</span><br><span class="line">  -H <span class="string">'Cache-Control: no-cache'</span> \</span><br><span class="line">  -H <span class="string">'Postman-Token: 12ee4b20-c8cc-4729-8342-4d2dd32df2d4'</span> \</span><br><span class="line">  -H <span class="string">'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'</span> \</span><br><span class="line">  -H <span class="string">'Upgrade-Insecure-Requests: 1'</span> | grep software-package -A 3 | awk -F <span class="string">"["</span> <span class="string">'&#123;print $3&#125;'</span> | awk -F <span class="string">"]"</span> <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5-下载"><a href="#5-下载" class="headerlink" title="5.下载"></a>5.下载</h4><p>直接将第4步中的下载地址粘贴到浏览器中，或者用 <code>wget</code> 命令下载均可</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>再看git</title>
    <url>/2020/04/17/%E5%86%8D%E7%9C%8Bgit/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>犹如做手工大多都要用到尺子区度量一样，git也是大多it从业者的必须工具；当然哪怕你不是这个行业的，你也可以用它来做点儿别的，比如仅画一条直线、记录一段文字、存放一个图片。<br>你可以只用三板斧 <code>git add xx</code>,<code>git commit xx</code>,<code>git push xx</code>,遇到难题大不了删除本地文件，然后重新下载一份；但是你也可以把它玩出花儿来。或者感兴趣的研究一些本后的原理，处理一些复杂的使用场景。最终能达到你的目的即可，且高效一点儿，慢慢来、慢慢学～</p>
</blockquote>
<p>每个人的使用习惯和遇到的场景不太一样，只能尽量地讲讲命令的使用，绝对不会覆盖到所有使用场景。况且，<em>条条大道通罗马</em>，git命令也是一样，选择你偏好的就可以了。</p>
<p><strong>主要参考资料如下</strong>：</p>
<ul>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git book</a></li>
</ul>
<h3 id="1-Git特色"><a href="#1-Git特色" class="headerlink" title="1. Git特色"></a>1. Git特色</h3><ul>
<li>近乎所有操作都是本地执行</li>
<li>直接记录快照，而非差异比较</li>
<li>Git 保证完整性</li>
</ul>
<blockquote>
<p>Git 中所有的数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。<br>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。</p>
</blockquote>
<h3 id="2-不同状态"><a href="#2-不同状态" class="headerlink" title="2. 不同状态"></a>2. 不同状态</h3><p>git项目的三个阶段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------------+       +-----------------+       +-----------------+</span><br><span class="line">|    工 作 区      |       |     暂 存 区     |       |     .git目 录    |</span><br><span class="line">+--------+--------+       +--------+--------+       +---------+-------+</span><br><span class="line">         |                         |                          |</span><br><span class="line">         |                         |                          |</span><br><span class="line">         |                checkout repo                       |</span><br><span class="line">         |    &lt;--------------------+------------------------+ |</span><br><span class="line">         |                         |                          |</span><br><span class="line">         |        git add          |                          |</span><br><span class="line">         | +--------------------&gt;  |                          |</span><br><span class="line">         |                         |                          |</span><br><span class="line">         |                         |        git commit        |</span><br><span class="line">         |                         +-----------------------&gt;  |</span><br><span class="line">         |                         |                          |</span><br><span class="line">         |                         |                          |</span><br><span class="line">         +                         +                          +</span><br></pre></td></tr></table></figure>
<p>文件可能处于其中之一： 已修改（modified）、 已暂存（staged）、已提交（committed）</p>
<ul>
<li>已修改表示修改了文件，但还没保存到数据库中。</li>
<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
<li>已提交表示数据已经安全地保存在本地数据库中。</li>
</ul>
<h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制用户信息、外观、行为等的配置变量。 这些变量存储在三个不同的位置：</p>
<ul>
<li>1.系统级<br>/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 git config 时带上 –system 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）<br>命令：<code>git config --system -l</code><blockquote>
<p> mac OS下 似乎默认没有这个文件 <code>/etc/gitconfig</code></p>
</blockquote>
</li>
<li>2.(用户)全局级<br>~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 你可以传递 –global 选项让 Git 读写此文件，这会对你系统上 所有 的仓库生效。<br>命令如：<code>git config --global -l</code></li>
<li>3.仓库级<br>当前使用仓库的 Git 目录中的 config 文件（即 .git/config）：针对该仓库。 你可以传递 –local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。。 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）<br><code>git config --local -l</code></li>
</ul>
<p>每一个级别会覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量，即(用户)全局级 &gt; 系统级</p>
<h4 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h4><p>如果想要检查你的配置，可以使用 <code>git config --list</code> 命令来列出所有 Git 当时能找到的配置。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">user.name=John Doe</span><br><span class="line">user.email=johndoe@example.com</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=auto</span><br><span class="line">color.diff=auto</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。 这种情况下，<strong>Git 会使用它找到的每一个变量的最后一个配置</strong>。</p>
<p>你可以通过输入 <code>git config &lt;key&gt;</code> 来检查 Git 的某一项配置</p>
<h3 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h3><blockquote>
<p>参考 <a href="https://zhuanlan.zhihu.com/p/107324618" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/107324618</a> 。下面是按照子命令讲解，但如果按照场景讲解可能会更匹配日常使用。</p>
</blockquote>
<ul>
<li><p>git clone/fetch/checkout</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt; <span class="comment">#克隆现有的仓库</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>git branch </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch  <span class="comment"># 显示当前分支</span></span><br><span class="line">git branch -a <span class="comment"># 查看本地分支、远程所有分支</span></span><br><span class="line">git branch branchName <span class="comment"># 新建分支</span></span><br><span class="line">git branch -m branchOld branchNew <span class="comment"># 修改分支名称，从 branchOld 改为 branchNew</span></span><br><span class="line">git push origin --delete dev2  <span class="comment"># 删除分支名 dev2 的远程分支,居然一行命令就搞定了</span></span><br><span class="line">git branch &lt;branchName&gt; &lt;start point&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>git checkout</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git checkout branchName <span class="comment">#命令会将当前工作分支切换到branchName</span></span><br><span class="line">git checkout -b newBranch <span class="comment">#从当前分支copy一份到新分支，并切换到新分支下，等同于2步：1-git branch newBranch-git checkout newBranch</span></span><br><span class="line"><span class="comment"># 加入-B可选参数后会强制创建新分支，并且会覆盖原来存在的同名分支。</span></span><br><span class="line">git checkout -- CONTRIBUTING.md <span class="comment">#撤消对文件的修改。如果你并不想保留对 CONTRIBUTING.md 文件的修改怎么办？用这个命令</span></span><br><span class="line"><span class="comment"># 取消暂存的文件</span></span><br><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>请务必记得 git checkout – <file> 是一个危险的命令。 你对那个文件在本地的任何修改都会消失——Git 会用最近提交的版本覆盖掉它。 除非你确实清楚不想要对那个文件的本地修改了，否则请不要使用这个命令。</file></p>
</blockquote>
<ul>
<li><p>git status</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文件状态</span></span><br><span class="line">git status <span class="comment">#标准输出</span></span><br><span class="line">git status -s(或--short) <span class="comment"># 简洁输出;新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>git add </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#跟踪(track)新文件,或者说将 文件从 工作区加入到暂存区;在add之前，可以status查看到新文件是 Untracked files</span></span><br><span class="line">git add filename <span class="comment">#添加指定文件 </span></span><br><span class="line">git add *.c <span class="comment">#添加匹配结果指定的文件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>git diff</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#diff 比较,命令可以不指定 &lt;filename&gt;，则对全部文件操作</span></span><br><span class="line">git diff --staged <span class="comment"># 暂存取 vs .git目录/仓库</span></span><br><span class="line">git diff --cached &lt;filename&gt; <span class="comment">#暂存区 vs Git仓库, --staged 和 --cached 是同义词</span></span><br><span class="line"></span><br><span class="line">git diff &lt;commit&gt; &lt;filename&gt; <span class="comment">#工作目录 vs Git仓库</span></span><br><span class="line">git diff &lt;commit&gt; &lt;commit&gt; <span class="comment">#Git仓库 vs Git仓库</span></span><br><span class="line"></span><br><span class="line">git diff branch1 branch2 --<span class="built_in">stat</span>      //显示2个分支所有有差异的文件列表</span><br><span class="line">git diff branch1 branch2             //显示2个分支所有有差异的文件的详细差异</span><br><span class="line">git diff branch1 branch2 file_path   //显示2个分支指定文件的详细差异</span><br></pre></td></tr></table></figure>
</li>
<li><p>git rm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -f file-path <span class="comment">#从跟踪文件列表中清除，并从磁盘上删除文件</span></span><br><span class="line">git rm --cached file-path <span class="comment">#从跟踪文件列表中清除，仍然将源文件保存在磁盘上</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>git mv</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv README.md README</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行 git mv 就相当于运行了下面三条命令：</span></span><br><span class="line">mv README.md README</span><br><span class="line">git rm README.md</span><br><span class="line">git add README</span><br></pre></td></tr></table></figure>
</li>
<li><p>git commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m “desc”  <span class="comment"># 正常提交</span></span><br><span class="line">git commit -a -m “desc”  <span class="comment">#？？</span></span><br><span class="line"><span class="comment"># -a, --all</span></span><br><span class="line"><span class="comment">#           Tell the command to automatically stage files that have been modified and</span></span><br><span class="line"><span class="comment">#           deleted, but new files you have not told Git about are not affected.</span></span><br><span class="line"></span><br><span class="line">git commit --amend <span class="comment">#有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令来重新提交,这是有交互的</span></span><br><span class="line">git commit –amend -m “desc” <span class="comment">#追加提交，这是没有交互的</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>git remote<br>参见 <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">远程仓库的使用</a></p>
</li>
</ul>
<p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="comment">#它会列出你指定的每一个远程服务器的简写。 常见输出：origin</span></span><br><span class="line">git remote -v <span class="comment">#显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</span></span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt; <span class="comment">#添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：</span></span><br><span class="line">git fetch &lt;remote&gt; <span class="comment">#该命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</span></span><br><span class="line">git remote show &lt;remote&gt;  <span class="comment">#如果想要查看某一个远程仓库的更多信息，可以使用,例如 git remote show origin</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>git push</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin <span class="built_in">test</span>:<span class="built_in">test</span>  <span class="comment"># 提交本地test分支 作为远程的test分支</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>git merge</p>
<ul>
<li>[] todo</li>
</ul>
</li>
<li><p>git log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;dev&gt; <span class="comment">#查看分支 dev 的提交历史记录，默认是时间倒序，最近的提交排在最上面），不写分支名查看当前分支的提交历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --reverse <span class="comment">#时间正序显示提交历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --oneline <span class="comment"># 一行显示提交历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --graph <span class="comment">#图示法显示提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --reverse --oneline --graph <span class="comment">#时间正序 + 一行显示 + 图示法显示</span></span><br><span class="line">git <span class="built_in">log</span> -n <span class="comment">#显示最近的 n 个提交</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>[] origin 是什么  git 的 origin 的含义 cnblogs.com/xuyaowen/p/git-origin.html</p>
</li>
<li>[] 追踪关系 –track</li>
<li>[] upstream ??</li>
</ul>
<p>其他：<br>HEAD 最近一次 commit<br>HEAD^ 上次提交<br>HEAD~100 上100次提交</p>
<p>git revert </p>
<p>英文来定义一下 fetch 和 pull 更为明白：</p>
<p>git fetch is the command that says “bring my local copy of the remote repository up to date.”<br>git pull says “bring the changes in the remote repository where I keep my own code.”</p>
<h3 id="5-一些场景"><a href="#5-一些场景" class="headerlink" title="5. 一些场景"></a>5. 一些场景</h3><ul>
<li>建立个人镜像的仓库 mirror</li>
<li>清除github上某个文件的历史版本</li>
</ul>
<p>cached 是什么状态</p>
<p>本地和远程的关系，还要把新分支推到远程也就是在远程建立一样的一个分支。所以我们在本地和远程建立分支后还要把他们关联起来，这样才有意义！！！</p>
<hr>
<p><strong>More Ref:</strong></p>
<ul>
<li>[ascii现在画图工具]<a href="http://asciiflow.com/" target="_blank" rel="noopener">http://asciiflow.com/</a></li>
<li><a href="https://www.jianshu.com/p/2f3c5f3ad3d9" target="_blank" rel="noopener">分支</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/107324618" target="_blank" rel="noopener">git命令-from-zhihu</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/96631135?utm_source=qq&amp;utm_medium=social&amp;utm_oi=30019480977408" target="_blank" rel="noopener">Git内部原理</a></li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
</search>
